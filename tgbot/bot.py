import logging
import uuid
import mimetypes
import boto3
import asyncio, os, hashlib, random, string
from datetime import datetime, timezone, timedelta
from contextlib import asynccontextmanager
from pathlib import Path
from io import BytesIO
from html import escape
from zoneinfo import ZoneInfo
from dotenv import load_dotenv
from urllib.parse import urlencode

from aiogram.enums import ChatType
from aiogram.exceptions import TelegramBadRequest
from aiogram.types import ChatMemberUpdated, ChatJoinRequest
from aiogram import Bot, Dispatcher, F
import aiogram.types as types
from aiogram.filters import Command, StateFilter
from aiogram.types import (Message, CallbackQuery, InlineKeyboardMarkup,
                           InlineKeyboardButton, InputMediaPhoto)
from aiogram.types import WebAppInfo
from aiogram.types import BotCommand
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, KeyboardButtonRequestChat, ChatAdministratorRights
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import LinkPreviewOptions

from sqlalchemy import text as _sqltext
from sqlalchemy import text as stext
from sqlalchemy import (text, String, Integer, BigInteger,
                        Boolean, DateTime, ForeignKey)
from sqlalchemy.ext.asyncio import (create_async_engine, async_sessionmaker)
from sqlalchemy.orm import DeclarativeBase, Mapped, mapped_column

from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.date import DateTrigger

import aiohttp
from aiohttp import web
from aiohttp import ClientSession, ClientTimeout, FormData

logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s: %(message)s")
load_dotenv()

MEDIA_BASE_URL = os.getenv("MEDIA_BASE_URL", "https://media.prizeme.ru")
WEBAPP_BASE_URL = os.getenv("WEBAPP_BASE_URL", "https://prizeme.ru")


DESCRIPTION_PROMPT = (
    "<b>–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞:</b>\n\n"
    "–ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–µ –±–æ–ª–µ–µ 2500 —Å–∏–º–≤–æ–ª–æ–≤.\n\n"
    "<i>–ü–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—à–∏—Ç–µ —É—Å–ª–æ–≤–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –¥–ª—è –≤–∞—à–∏—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤.\n"
    "–ü–æ—Å–ª–µ –Ω–∞—á–∞–ª–∞ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –≤–≤–µ–¥—ë–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω\n"
    "–Ω–∞ –≤—Å–µ—Ö —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –Ω–∏–º –∫–∞–Ω–∞–ª–∞—Ö.</i>")

MEDIA_QUESTION = "–•–æ—Ç–∏—Ç–µ –ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ / gif / –≤–∏–¥–µ–æ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ä–æ–∑—ã–≥—Ä—ã—à–∞?"

MEDIA_INSTRUCTION = (
    "<b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ / <i>gif</i> / –≤–∏–¥–µ–æ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ä–æ–∑—ã–≥—Ä—ã—à–∞.</b>\n\n"
    "<i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –¥–æ—Å—Ç–∞–≤–∫—É. –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ \"–Ω–µ—Å–∂–∞—Ç—ã–º\" —Å–ø–æ—Å–æ–±–æ–º (–ù–ï –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç).</i>\n\n"
    "<b>–í–Ω–∏–º–∞–Ω–∏–µ!</b> –í–∏–¥–µ–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ MP4, –∞ –µ–≥–æ —Ä–∞–∑–º–µ—Ä –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 5 –ú–ë."
)

BTN_EVENTS = "–ú–æ–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∏"
BTN_CREATE = "–°–æ–∑–¥–∞—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à"
BTN_ADD_CHANNEL = "–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª"
BTN_ADD_GROUP = "–î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É"
BTN_SUBSCRIPTIONS = "–ü–æ–¥–ø–∏—Å–∫–∏"
BOT_USERNAME: str | None = None

# === callbacks for draft flow ===
CB_PREVIEW_CONTINUE = "preview:continue"
CB_TO_CHANNELS_MENU = "draft:to_channels"
CB_OPEN_CHANNELS    = "channels:open"
CB_CHANNEL_ADD      = "channels:add"          # —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —É —Ç–µ–±—è? –æ—Å—Ç–∞–≤—å —Å–≤–æ–π
CB_CHANNEL_START    = "raffle:start"          # –∑–∞–≥–ª—É—à–∫–∞ –Ω–∞ –±—É–¥—É—â–µ–µ
CB_CHANNEL_SETTINGS = "raffle:settings"       # –ø–æ–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞

MSK_TZ = ZoneInfo("Europe/Moscow")

logger_media = logging.getLogger("media")
logger_media.setLevel(logging.DEBUG)

BOT_TOKEN = os.getenv("BOT_TOKEN")
DEFAULT_TZ = os.getenv("TZ", "Europe/Moscow")
S3_ENDPOINT = os.getenv("S3_ENDPOINT")
S3_BUCKET   = os.getenv("S3_BUCKET")
S3_KEY      = os.getenv("S3_ACCESS_KEY")
S3_SECRET   = os.getenv("S3_SECRET_KEY")
S3_REGION   = os.getenv("S3_REGION", "ru-1")

t = os.getenv("BOT_TOKEN","")
logging.info("[BOOT] BOT_TOKEN_SHA256=%s", hashlib.sha256(t.encode()).hexdigest())

# –¢–µ–∫—Å—Ç—ã —ç–∫—Ä–∞–Ω–æ–≤
CONNECT_INVITE_TEXT = (
    "‚≠êÔ∏è –í–∞—à —Ä–æ–∑—ã–≥—Ä—ã—à —Å–æ–∑–¥–∞–Ω, –æ—Å—Ç–∞–ª–æ—Å—å —Ç–æ–ª—å–∫–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å!\n\n"
    "–ü–æ–¥–∫–ª—é—á–∏—Ç–µ –º–∏–Ω–∏–º—É–º 1 –∫–∞–Ω–∞–ª/–≥—Ä—É–ø–ø—É, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à.\n\n"
    "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ."
)

# –ò–Ω—Ñ–æ-–±–ª–æ–∫ –ø—Ä–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞/–≥—Ä—É–ø–ø—ã (HTML)
ADD_CHAT_HELP_HTML = (
    "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ / –≥—Ä—É–ø–ø—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞, –±–µ–∑ —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à –ø—Ä–æ–≤–µ—Å—Ç–∏ –Ω–µ —É–¥–∞—Å—Ç—Å—è, "
    "–±—É–¥—å—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã –∏ –ø–æ–¥–∫–ª—é—á–∞–π—Ç–µ —Ç–µ –∫–∞–Ω–∞–ª—ã / –≥—Ä—É–ø–ø—ã, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–≤–æ–¥–∏—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à.\n\n"
    "–ü—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –±–æ—Ç–∞ @prizeme_official_bot –≤ –∫–∞–Ω–∞–ª / –≥—Ä—É–ø–ø—É –í—ã –¥–∞—ë—Ç–µ –ø—Ä–∞–≤–æ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è "
    "(–Ω–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π—Ç–µ, —ç—Ç–æ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –Ω–∞–±–æ—Ä –ø—Ä–∞–≤ –±–µ–∑ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–º / –≥—Ä—É–ø–ø–æ–π):\n\n"
    "‚Ä¢ –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π\n"
    "‚Ä¢ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π\n"
    "‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤\n"
    "‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫\n\n"
    "<b>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É –ø–æ–¥ —Å—Ç—Ä–æ–∫–æ–π –ø–æ–∏—Å–∫–∞ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ / –≥—Ä—É–ø–ø—ã –∫ –±–æ—Ç—É.</b>"
)

def kb_add_cancel() -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    kb.button(text="–û—Ç–º–µ–Ω–∞", callback_data="add:cancel")
    kb.adjust(1)
    return kb.as_markup()

# ---- –î—Ä—É–≥–æ–µ ----

if not all([S3_ENDPOINT, S3_BUCKET, S3_KEY, S3_SECRET]):
    logging.warning("S3 env not fully set ‚Äî uploads will fail.")


# –¢–µ–∫—Å—Ç—ã —ç–∫—Ä–∞–Ω–æ–≤_2

def build_connect_invite_kb(event_id: int) -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    # NB: –≤ callback –ø–µ—Ä–µ–¥–∞—ë–º id —Ä–æ–∑—ã–≥—Ä—ã—à–∞, —á—Ç–æ–±—ã –ø–æ—Ç–æ–º –ø–æ–Ω–∏–º–∞—Ç—å, –∫ –∫–∞–∫–æ–º—É —Å–æ–±—ã—Ç–∏—é –ø–æ–¥–∫–ª—é—á–∞–µ–º –∫–∞–Ω–∞–ª—ã
    kb.button(text="–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª/–≥—Ä—É–ø–ø—É", callback_data=f"raffle:connect_channels:{event_id}")
    return kb.as_markup()

# –≠–∫—Ä–∞–Ω —Å —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ –∫–∞–Ω–∞–ª–∞–º–∏ –∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏
def build_connect_channels_text(
    event_title: str | None = None,
    attached: list[tuple[str, str | None, int]] | None = None,  # (title, username, chat_id)
) -> str:
    """
    –°–æ–±–∏—Ä–∞–µ—Ç "—Å–µ—Ä—ã–π" —Ç–µ–∫—Å—Ç–æ–≤—ã–π –±–ª–æ–∫.
    attached ‚Äî —Å–ø–∏—Å–æ–∫ —É–∂–µ –ø—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω–Ω—ã—Ö –∫ —Ç–µ–∫—É—â–µ–º—É —Ä–æ–∑—ã–≥—Ä—ã—à—É –∫–∞–Ω–∞–ª–æ–≤/–≥—Ä—É–ø–ø:
               (title, username_or_None, chat_id)
    –ï—Å–ª–∏ –µ—Å—Ç—å username ‚Äî –¥–µ–ª–∞–µ–º –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É, –∏–Ω–∞—á–µ –ø—Ä–æ—Å—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ.
    """
    title = (
        f"üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –∫ —Ä–æ–∑—ã–≥—Ä—ã—à—É \"{event_title}\""
        if event_title else
        "üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –∫ —Ä–æ–∑—ã–≥—Ä—ã—à—É"
    )

    lines = [
        title,
        "",
        "–ü–æ–¥–∫–ª—é—á–∏—Ç—å –∫–∞–Ω–∞–ª –∫ —Ä–æ–∑—ã–≥—Ä—ã—à—É —Å–º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä, "
        "–∫–æ—Ç–æ—Ä—ã–π –æ–±–ª–∞–¥–∞–µ—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º —É—Ä–æ–≤–Ω–µ–º –ø—Ä–∞–≤ –≤ –ø—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω–Ω–æ–º –∫–∞–Ω–∞–ª–µ.",
        "",
        "–ü–æ–¥–∫–ª—é—á—ë–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã:",
    ]

    if attached:
        for i, (t, uname, _cid) in enumerate(attached, start=1):
            if uname:
                lines.append(f"{i}. <a href=\"https://t.me/{uname}\">{t}</a>")
            else:
                lines.append(f"{i}. {t}")
    else:
        lines.append("‚Äî –ø–æ–∫–∞ –Ω–µ—Ç")

    return "\n".join(lines)

def build_channels_menu_kb(
    event_id: int,
    channels: list[tuple[int, str]],
    attached_ids: set[int] | None = None
) -> InlineKeyboardMarkup:
    """
    channels: —Å–ø–∏—Å–æ–∫ (organizer_channel_id, title)
    attached_ids: ids organizer_channels, —É–∂–µ –ø—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω–Ω—ã—Ö –∫ —Ç–µ–∫—É—â–µ–º—É —Ä–æ–∑—ã–≥—Ä—ã—à—É
    """
    attached_ids = attached_ids or set()
    kb = InlineKeyboardBuilder()

    # –ö–Ω–æ–ø–∫–∏ –≤—Å–µ—Ö —Ä–∞–Ω–µ–µ –ø–æ–¥–∫–ª—é—á—ë–Ω–Ω—ã—Ö –∫ –±–æ—Ç—É –∫–∞–Ω–∞–ª–æ–≤/–≥—Ä—É–ø–ø (–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–º —Å–ø–∏—Å–∫–æ–º)
    for ch_id, title in channels:
        mark = "‚úÖ " if ch_id in attached_ids else ""
        kb.button(
            text=f"{mark}{title}",
            callback_data=f"raffle:attach:{event_id}:{ch_id}"
        )
    if channels:
        kb.adjust(1)

    # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ ‚Äî –¥–≤–µ –∫–Ω–æ–ø–∫–∏ —Ä—è–¥–æ–º: "–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª" –∏ "–î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É"
    kb.row(
        InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª", callback_data=f"raffle:add_channel:{event_id}"),
        InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É", callback_data=f"raffle:add_group:{event_id}")
    )

    # –û—Ç–¥–µ–ª—å–Ω—ã–º–∏ —Å—Ç—Ä–æ–∫–∞–º–∏, –≤ –∑–∞–¥–∞–Ω–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
    kb.row(InlineKeyboardButton(text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞", callback_data=f"raffle:settings_disabled:{event_id}"))
    kb.row(InlineKeyboardButton(text="–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à", callback_data=f"raffle:start:{event_id}"))

    return kb.as_markup()

# === Launch confirm helpers ===

def build_final_check_text() -> str:
    # —Ñ–æ—Ä–º–∞—Ç –∫–∞–∫ –Ω–∞ —Ç–≤–æ—ë–º —Å–∫—Ä–∏–Ω—à–æ—Ç–µ
    return (
        "üöÄ <b>–û—Å—Ç–∞–ª—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥ –∏ –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à</b>\n\n"
        "–í—ã—à–µ –ø–æ–∫–∞–∑–∞–Ω –±–ª–æ–∫ —Å —Ä–æ–∑—ã–≥—Ä—ã—à–µ–º, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å—ë —É–∫–∞–∑–∞–Ω–æ –≤–µ—Ä–Ω–æ. "
        "–ö–∞–∫ —Ç–æ–ª—å–∫–æ —ç—Ç–æ —Å–¥–µ–ª–∞–µ—Ç–µ, –º–æ–∂–µ—Ç–µ –∑–∞–ø—É—Å–∫–∞—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–Ω–∏–∑—É.\n\n"
        "<b><i>–í–Ω–∏–º–∞–Ω–∏–µ!</i></b> –ü–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ –ø–æ—Å—Ç —Å —Ä–æ–∑—ã–≥—Ä—ã—à–µ–º –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω "
        "–≤ –ø–æ–¥–∫–ª—é—á—ë–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–∞—Ö / –≥—Ä—É–ø–ø–∞—Ö –∫ —Ç–µ–∫—É—â–µ–º—É —Ä–æ–∑—ã–≥—Ä—ã—à—É."
    )

def kb_launch_confirm(gid: int) -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    kb.button(text="–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à", callback_data=f"launch:do:{gid}")
    kb.button(text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞", callback_data=f"raffle:settings_disabled:{gid}")
    kb.adjust(1)
    return kb.as_markup()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥ –ø–æ—Å—Ç–æ–º –≤ –∫–∞–Ω–∞–ª–µ: –æ—Ç–∫—Ä—ã–≤–∞–µ–º WebApp –ø–æ –Ω–∞—à–µ–º—É –¥–æ–º–µ–Ω—É, –∞ –Ω–µ –ø–æ t.me/startapp

def kb_public_participate(gid: int, *, for_channel: bool = False) -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    if for_channel:
        # –í –ö–ê–ù–ê–õ–´ ‚Äî –¢–û–õ–¨–ö–û URL-–∫–Ω–æ–ø–∫–∞ –Ω–∞ t.me —Å startapp (web_app –≤ –∫–∞–Ω–∞–ª–∞—Ö –∑–∞–ø—Ä–µ—â—ë–Ω)
        global BOT_USERNAME
        url = f"https://t.me/{BOT_USERNAME}?startapp={gid}"
        kb.button(text="–£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å", url=url)
    else:
        # –í –õ–ò–ß–ö–ï/–ì–†–£–ü–ü–ï –º–æ–∂–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å –Ω–∞–ø—Ä—è–º—É—é –Ω–∞—à –¥–æ–º–µ–Ω –∫–∞–∫ WebApp
        webapp_url = f"{WEBAPP_BASE_URL}/miniapp/?tgWebAppStartParam={gid}"
        kb.button(text="–£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å", web_app=WebAppInfo(url=webapp_url))
    return kb.as_markup()

def kb_public_participate_disabled() -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    webapp_url = f"{WEBAPP_BASE_URL}/miniapp/?tgWebAppStartParam=demo"
    kb.button(text="–£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å", web_app=WebAppInfo(url=webapp_url))
    return kb.as_markup()

# –°–ª–µ–¥—É—é—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏

def format_endtime_prompt() -> str:
    now_msk = datetime.now(MSK_TZ)
    example = now_msk.strftime("%H:%M %d.%m.%Y")
    current = example  # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –∏ –∫–∞–∫ –ø—Ä–∏–º–µ—Ä, –∏ –∫–∞–∫ "—Ç–µ–∫—É—â–µ–µ"

    return (
        "‚è∞ <b>–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ (–ß–ß:–ú–ú –î–î.–ú–ú.–ì–ì–ì–ì)</b>\n\n"
        f"<b>–ù–∞–ø—Ä–∏–º–µ—Ä:</b> <code>{example}</code>\n\n"
        "‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b> –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —á–∞—Å–æ–≤—ã–º –ø–æ—è—Å–æ–º MSK (GMT+3).\n"
        f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –±–æ—Ç–µ: <code>{current}</code>"
    )

def kb_yes_no() -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    kb.button(text="–î–∞",  callback_data="media:yes")
    kb.button(text="–ù–µ—Ç", callback_data="media:no")
    kb.adjust(2)
    return kb.as_markup()

def kb_skip_media() -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    kb.button(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="media:skip")
    kb.adjust(1)
    return kb.as_markup()

def _s3_client():
    return boto3.client(
        "s3",
        region_name=S3_REGION,
        endpoint_url=S3_ENDPOINT,
        aws_access_key_id=S3_KEY,
        aws_secret_access_key=S3_SECRET,
    )

def _make_s3_key(filename: str) -> str:
    """–∫–ª—é—á –≤ –±–∞–∫–µ—Ç–µ: yyyy/mm/dd/<uuid>.<ext>"""
    now = datetime.utcnow()
    ext = (os.path.splitext(filename)[1] or "").lower() or ".bin"
    return f"{now:%Y/%m/%d}/{uuid.uuid4().hex}{ext}"

async def upload_bytes_to_s3(data: bytes, filename: str) -> tuple[str, str]:
    """
    –ö–ª–∞–¥—ë–º –±–∞–π—Ç—ã –≤ S3.
    –í–æ–∑–≤—Ä–∞—â–∞–µ–º (key, public_url), –≥–¥–µ key = yyyy/mm/dd/uuid.ext
    """
    logging.info(f"üì§ UPLOAD_TO_S3 filename={filename}, bytes={len(data)}")
    key = _make_s3_key(filename)
    content_type = mimetypes.guess_type(filename)[0] or "application/octet-stream"

    def _put():
        _s3_client().put_object(
            Bucket=S3_BUCKET,
            Key=key,
            Body=data,
            ContentType=content_type,
        )
    await asyncio.to_thread(_put)
    logging.info(f"‚úÖ S3_PUT_OK key={key}")

    public_url = f"{S3_ENDPOINT.rstrip('/')}/{S3_BUCKET}/{key}"
    return key, public_url


async def file_id_to_public_url_via_s3(bot: Bot, file_id: str, suggested_name: str) -> tuple[str, str]:
    tg_file = await bot.get_file(file_id)
    buf = BytesIO()
    await bot.download(tg_file, destination=buf)

    filename = os.path.basename(tg_file.file_path or "") or suggested_name
    if not os.path.splitext(filename)[1]:
        filename = suggested_name

    return await upload_bytes_to_s3(buf.getvalue(), filename)  # (key, s3_url)

def _make_preview_url(key: str, title: str, desc: str) -> str:
    # –ë–µ–∑ –∫–∞–∫–∏—Ö-–ª–∏–±–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ ‚Äî —Ç–æ–ª—å–∫–æ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –Ω–∞ –Ω–∞—à–µ–º –¥–æ–º–µ–Ω–µ
    base = MEDIA_BASE_URL.rstrip("/")
    return f"{base}/uploads/{key}"

# –•—Ä–∞–Ω–∏–º —Ç–∏–ø –≤–º–µ—Å—Ç–µ —Å file_id –≤ –æ–¥–Ω–æ–º –ø–æ–ª–µ –ë–î
def pack_media(kind: str, file_id: str) -> str:
    return f"{kind}:{file_id}"

def unpack_media(value: str | None) -> tuple[str|None, str|None]:
    if not value:
        return None, None
    if ":" in value:
        k, fid = value.split(":", 1)
        return k, fid
    # –æ–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: —Å—Ç–∞—Ä–æ–µ –ø–æ–ª–µ —Ç–æ–ª—å–∫–æ —Å photo id
    return "photo", value


async def _fallback_preview_with_native_media(m: Message, state: FSMContext, kind: str, fid: str) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—ã—á–Ω–æ–µ –º–µ–¥–∏–∞ —Å –ø–æ–¥–ø–∏—Å—å—é –∏ —Ç–æ–π –∂–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π (–±–µ–∑ –ª–∏–Ω–∫-–ø—Ä–µ–≤—å—é)."""
    data = await state.get_data()
    title = (data.get("title") or "").strip() or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
    prizes = int(data.get("winners_count") or 0)

    caption = _compose_preview_text(title, prizes)
    # –ü–æ—Ä—è–¥–æ–∫ ¬´—Å–≤–µ—Ä—Ö—É/—Å–Ω–∏–∑—É¬ª –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ —Ç—É—Ç –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω ‚Äî —ç—Ç–æ fallback.
    if kind == "photo":
        msg = await m.answer_photo(fid, caption=caption, reply_markup=kb_media_preview(media_on_top=False))
    elif kind == "animation":
        msg = await m.answer_animation(fid, caption=caption, reply_markup=kb_media_preview(media_on_top=False))
    else:
        msg = await m.answer_video(fid, caption=caption, reply_markup=kb_media_preview(media_on_top=False))

    await state.update_data(
        media_preview_msg_id=msg.message_id,
        media_top=False,
        media_url=None,      # –≤–∞–∂–Ω—ã–π –º–∞—Ä–∫–µ—Ä: —Ä–∞–±–æ—Ç–∞–µ–º –≤ fallback-—Ä–µ–∂–∏–º–µ
    )
    await state.set_state(CreateFlow.MEDIA_PREVIEW)

async def _ensure_link_preview_or_fallback(
    m: Message,
    state: FSMContext,
    kind: str,
    fid: str,
    filename: str
):
    logger_media.info("ensure_link_preview_or_fallback: kind=%s fid=%s", kind, fid)

    async def _do_once() -> tuple[str, str, str]:
        # 1) –∫–∞—á–∞–µ–º –∏–∑ TG –∏ –∫–ª–∞–¥–µ–º –≤ S3
        key, s3_url = await file_id_to_public_url_via_s3(m.bot, fid, filename)
        # 2) —Å–æ–±–∏—Ä–∞–µ–º —Å—Å—ã–ª–∫—É-–ø—Ä–æ–∫–ª–∞–¥–∫—É –Ω–∞ –Ω–∞—à –¥–æ–º–µ–Ω (uploads)
        data = await state.get_data()
        title = (data.get("title") or "").strip()
        desc  = (data.get("desc")  or "").strip()
        preview_url = _make_preview_url(key, title, desc)
        return key, s3_url, preview_url

    try:
        try:
            key, s3_url, preview_url = await _do_once()
        except Exception as e1:
            logger_media.warning("First try failed (%s), retrying once...", repr(e1))
            key, s3_url, preview_url = await _do_once()

        logger_media.info("‚úÖ S3 uploaded: key=%s s3_url=%s preview=%s", key, s3_url, preview_url)

        # 3) –∫–ª–∞–¥—ë–º –≤ state –ò–ú–ï–ù–ù–û preview_url (–∞ –Ω–µ s3_url!)
        await state.update_data(media_url=preview_url)

        # 4) —Ä–∏—Å—É–µ–º –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ª–∏–Ω–∫-–ø—Ä–µ–≤—å—é (—Ñ–∏–æ–ª–µ—Ç–æ–≤–∞—è —Ä–∞–º–∫–∞)
        await render_link_preview_message(m, state)
        await state.set_state(CreateFlow.MEDIA_PREVIEW)

    except Exception:
        logger_media.exception("Link-preview failed after retry; go fallback")
        await _fallback_preview_with_native_media(m, state, kind, fid)

def _compose_preview_text(
    title: str,
    prizes: int,
    *,
    desc_html: str | None = None,
    end_at_msk: str | None = None,
    days_left: int | None = None
) -> str:
    """
    –¢–µ–∫—Å—Ç ¬´—Å–µ—Ä–æ–≥–æ –±–ª–æ–∫–∞¬ª –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞.
    - title –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—ã—á–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º (–±–µ–∑ <b>), —á—Ç–æ–±—ã –Ω–µ –Ω–∞–≤—è–∑—ã–≤–∞—Ç—å –∂–∏—Ä–Ω—ã–π.
    - desc_html –≤—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è).
    - –¥–∞—Ç–∞ –±–µ—Ä—ë—Ç—Å—è –∏–∑ –≤–≤–µ–¥—ë–Ω–Ω–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º + "(N –¥–Ω–µ–π)" –ø–æ-—Ä—É—Å—Å–∫–∏.
    """
    lines = []
    if title:
        # –±–µ–∑ <b> ‚Äî –Ω–µ –Ω–∞–≤—è–∑—ã–≤–∞–µ–º –∂–∏—Ä–Ω—ã–π
        lines.append(escape(title))
        lines.append("")

    if desc_html:
        # –í–ê–ñ–ù–û: —ç—Ç–æ —É–∂–µ ¬´HTML¬ª, –Ω–µ –æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤ <b>, –Ω–µ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ.
        # –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –∂—ë—Å—Ç–∫–æ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å —Ç–µ–≥–∏ ‚Äî —Å–¥–µ–ª–∞–π –ª—ë–≥–∫—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é –≤—ã—à–µ.
        lines.append(desc_html)
        lines.append("")

    lines.append("–ß–∏—Å–ª–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: 0")
    lines.append(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–∑–æ–≤: {max(0, prizes)}")

    if end_at_msk:
        tail = f" ({days_left} –¥–Ω–µ–π)" if isinstance(days_left, int) and days_left >= 0 else ""
        lines.append(f"–î–∞—Ç–∞ —Ä–æ–∑—ã–≥—Ä—ã—à–∞: {end_at_msk}{tail}")
    else:
        lines.append("–î–∞—Ç–∞ —Ä–æ–∑—ã–≥—Ä—ã—à–∞: 00:00, 00.00.0000 (0 –¥–Ω–µ–π)")

    return "\n".join(lines)

async def render_link_preview_message(
    m: Message,
    state: FSMContext,
    *,
    reedit: bool = False
) -> None:
    """
    –†–µ–Ω–¥–µ—Ä–∏—Ç –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å link preview:
    - ¬´–Ω–µ–≤–∏–¥–∏–º–∞—è¬ª —Å—Å—ã–ª–∫–∞ <a href="...">&#8203;</a> –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ä–∞–º–∫—É –æ—Ç Telegram;
    - —Å–≤–µ—Ä—Ö—É —Ç–µ–∫—Å—Ç: –Ω–∞–∑–≤–∞–Ω–∏–µ (–æ–±—ã—á–Ω—ã–º), –æ–ø–∏—Å–∞–Ω–∏–µ (–∫–∞–∫ –≤–≤—ë–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å),
      —É—á–∞—Å—Ç–Ω–∏–∫–∏/–ø—Ä–∏–∑—ã/–¥–∞—Ç–∞ (—Å —Ä—É—Å—Å–∫–∏–º "N –¥–Ω–µ–π").
    """
    data = await state.get_data()
    media     = data.get("media_url")
    media_top = bool(data.get("media_top") or False)

    # title   = (data.get("title") or "").strip()
    prizes  = int(data.get("winners_count") or 0)

    # –æ–ø–∏—Å–∞–Ω–∏–µ: —Ö—Ä–∞–Ω–∏–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –∏ –µ–≥–æ HTML-–≤–µ—Ä—Å–∏—é
    # text ‚Äî —ç—Ç–æ ¬´–∫–∞–∫ –ø—Ä–∏—Å–ª–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å¬ª; –º—ã —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–ª–∏ —Ç–æ–ª—å–∫–æ –≤ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–µ –æ–ø–∏—Å–∞–Ω–∏—è.
    desc_raw  = (data.get("desc") or "").strip()
    # –†–∞–∑—Ä–µ—à–∞–µ–º –±–∞–∑–æ–≤—É—é —Ä–∞–∑–º–µ—Ç–∫—É, –ø–æ—ç—Ç–æ–º—É –ù–ï —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∑–¥–µ—Å—å (—Å–º–æ—Ç—Ä–∏ –ø—É–Ω–∫—Ç –≤ –¥–æ–∫—Å—Ç—Ä–∏–Ω–≥–µ –≤—ã—à–µ).
    desc_html = desc_raw

    # –¥–∞—Ç–∞ (—Å—Ç—Ä–æ–∫–∞ –¥–ª—è —á–µ–ª–æ–≤–µ–∫–∞) –∏ –¥–Ω–∏
    end_at_msk = data.get("end_at_msk_str")  # "HH:MM DD.MM.YYYY"
    days_left  = data.get("days_left")       # int

    txt = _compose_preview_text(
        "", prizes,
        desc_html=desc_html if desc_html else None,
        end_at_msk=end_at_msk,
        days_left=days_left
    )

    if not media:
        await m.answer(txt)
        return

    hidden_link = f'<a href="{media}">&#8203;</a>'
    full = f"{hidden_link}\n\n{txt}" if media_top else f"{txt}\n\n{hidden_link}"

    lp = LinkPreviewOptions(
        is_disabled=False,
        prefer_large_media=True,
        prefer_small_media=False,
        show_above_text=media_top,
    )

    old_id = data.get("media_preview_msg_id")
    if reedit and old_id:
        try:
            await m.bot.edit_message_text(
                chat_id=m.chat.id,
                message_id=old_id,
                text=full,
                link_preview_options=lp,
                reply_markup=kb_media_preview(media_top),
                parse_mode="HTML",
            )
            return
        except Exception:
            pass

    prev_id = data.get("media_preview_msg_id")
    if prev_id and not reedit:
        try:
            await m.bot.delete_message(chat_id=m.chat.id, message_id=prev_id)
        except Exception:
            pass

    msg = await m.answer(
        full,
        link_preview_options=lp,
        reply_markup=kb_media_preview(media_top),
        parse_mode="HTML",
    )
    await state.update_data(media_preview_msg_id=msg.message_id)

#--- –†–µ–Ω–¥–µ—Ä —Ç–µ–∫—Å—Ç–∞ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ë–ï–ó –º–µ–¥–∏–∞ ---
async def render_text_preview_message(
    m: Message,
    state: FSMContext,
    *,
    reedit: bool = False
) -> None:
    """
    –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –±–µ–∑ –º–µ–¥–∏–∞: –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º/—Å—á—ë—Ç—á–∏–∫–∞–º–∏/–¥–∞—Ç–æ–π
    –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π kb_preview_no_media().
    """
    data = await state.get_data()

    # –æ–ø–∏—Å–∞–Ω–∏–µ –±–µ—Ä—ë–º –∫–∞–∫ –µ—Å—Ç—å (—Ä–∞–∑—Ä–µ—à–∞–µ–º –±–∞–∑–æ–≤—É—é HTML-—Ä–∞–∑–º–µ—Ç–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
    desc_raw  = (data.get("desc") or "").strip()
    desc_html = desc_raw or None

    prizes     = int(data.get("winners_count") or 0)
    end_at_msk = data.get("end_at_msk_str")
    days_left  = data.get("days_left")

    txt = _compose_preview_text(
        "", prizes,
        desc_html=desc_html,
        end_at_msk=end_at_msk,
        days_left=days_left
    )

    # –µ—Å–ª–∏ –¥–æ —ç—Ç–æ–≥–æ —É–∂–µ —Ä–∏—Å–æ–≤–∞–ª–∏ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä ‚Äî –∞–∫–∫—É—Ä–∞—Ç–Ω–æ —É–¥–∞–ª–∏–º
    prev_id = data.get("media_preview_msg_id")
    if prev_id and not reedit:
        try:
            await m.bot.delete_message(chat_id=m.chat.id, message_id=prev_id)
        except Exception:
            pass

    msg = await m.answer(txt, reply_markup=kb_preview_no_media(), parse_mode="HTML")
    await state.update_data(
        media_preview_msg_id=msg.message_id,
        media_url=None,      # –∫—Ä–∏—Ç–∏—á–Ω–æ: –ø–æ–º–µ—á–∞–µ–º, —á—Ç–æ –º–µ–¥–∏–∞ –Ω–µ—Ç
        media_top=False,
    )

# --- –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –¥–ª—è —à–∞–≥–∞ "–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à" (—Ç–æ—Ç –∂–µ –≤–∏–¥, —á—Ç–æ –∏ –ø—Ä–∏ –æ–±—ã—á–Ω–æ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–µ) ---
async def _send_launch_preview_message(m: Message, gw: "Giveaway") -> None:
    """
    –†–∏—Å—É–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –ø–µ—Ä–µ–¥ —Ñ–∏–Ω–∞–ª—å–Ω—ã–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º:
    - –µ—Å–ª–∏ –º–µ–¥–∏–∞ –µ—Å—Ç—å: –ø—Ä–æ–±—É–µ–º —Å–¥–µ–ª–∞—Ç—å link-preview —á–µ—Ä–µ–∑ –Ω–∞—à /uploads (—Ñ–∏–æ–ª–µ—Ç–æ–≤–∞—è —Ä–∞–º–∫–∞),
      –ø—Ä–∏ —Å–±–æ–µ ‚Äî –Ω–∞—Ç–∏–≤–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–¥–∏–∞ (fallback);
    - –µ—Å–ª–∏ –º–µ–¥–∏–∞ –Ω–µ—Ç: –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä.
    """
    # 1) —Å—á–∏—Ç–∞–µ–º –¥–∞—Ç—É –∏ "N –¥–Ω–µ–π", —Å–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    end_at_msk_dt = gw.end_at_utc.astimezone(MSK_TZ)
    end_at_msk_str = end_at_msk_dt.strftime("%H:%M %d.%m.%Y")
    days_left = max(0, (end_at_msk_dt.date() - datetime.now(MSK_TZ).date()).days)

    preview_text = _compose_preview_text(
        "",                               # –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º
        gw.winners_count,
        desc_html=(gw.public_description or ""),
        end_at_msk=end_at_msk_str,
        days_left=days_left,
    )

    # 2) –µ—Å–ª–∏ –º–µ–¥–∏–∞ –Ω–µ—Ç ‚Äî –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç
    kind, fid = unpack_media(gw.photo_file_id)
    if not fid:
        await m.answer(preview_text)
        return

    # 3) –ø—Ä–æ–±—É–µ–º —Å–¥–µ–ª–∞—Ç—å link-preview –∫–∞–∫ –≤ –æ–±—ã—á–Ω–æ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–µ
    #    (–ø–æ–≤—Ç–æ—Ä–Ω–∞—è –≤—ã–≥—Ä—É–∑–∫–∞ –≤ S3 –¥–æ–ø—É—Å—Ç–∏–º–∞; –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è ‚Äî fallback)
    try:
        # –ø–æ–¥–±–∏—Ä–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –ø–æ–¥ —Ç–∏–ø
        if kind == "photo":
            suggested = "image.jpg"
        elif kind == "animation":
            suggested = "animation.mp4"
        elif kind == "video":
            suggested = "video.mp4"
        else:
            suggested = "file.bin"

        key, s3_url = await file_id_to_public_url_via_s3(m.bot, fid, suggested)
        preview_url = _make_preview_url(key, gw.internal_title or "", gw.public_description or "")

        # —Å–∫—Ä—ã—Ç–∞—è —Å—Å—ã–ª–∫–∞ + –æ–ø—Ü–∏–∏ link preview (–º–µ–¥–∏–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –°–ù–ò–ó–£ ‚Äî –∫–∞–∫ –≤ –¥–µ—Ñ–æ–ª—Ç–µ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞)
        hidden_link = f'<a href="{preview_url}">&#8203;</a>'
        full_text = f"{preview_text}\n\n{hidden_link}"

        lp = LinkPreviewOptions(
            is_disabled=False,
            prefer_large_media=True,
            prefer_small_media=False,
            show_above_text=False,  # –∫–∞–∫ –≤ –Ω–∞—à–µ–º –æ–±—ã—á–Ω–æ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–µ "–º–µ–¥–∏–∞ —Å–Ω–∏–∑—É" –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        )

        await m.answer(full_text, link_preview_options=lp, parse_mode="HTML")

    except Exception:
        # 4) fallback ‚Äî –æ—Ç–¥–∞—Ç—å –Ω–∞—Ç–∏–≤–Ω–æ (—Ñ–æ—Ç–æ/–≥–∏—Ñ/–≤–∏–¥–µ–æ) —Å —Ç–æ–π –∂–µ –ø–æ–¥–ø–∏—Å—å—é
        try:
            if kind == "photo":
                await m.answer_photo(fid, caption=preview_text)
            elif kind == "animation":
                await m.answer_animation(fid, caption=preview_text)
            elif kind == "video":
                await m.answer_video(fid, caption=preview_text)
            else:
                await m.answer(preview_text)
        except Exception:
            await m.answer(preview_text)

# ----------------- DB MODELS -----------------
class Base(DeclarativeBase): pass

class GiveawayStatus:
    DRAFT="draft"; ACTIVE="active"; FINISHED="finished"; CANCELLED="cancelled"

class User(Base):
    __tablename__ = "users"
    user_id: Mapped[int] = mapped_column(BigInteger, primary_key=True)
    username: Mapped[str|None] = mapped_column(String(64), nullable=True)
    tz: Mapped[str] = mapped_column(String(64), default=DEFAULT_TZ)
    created_at: Mapped[datetime] = mapped_column(DateTime(timezone=True), default=lambda: datetime.now(timezone.utc))

class OrganizerChannel(Base):
    __tablename__="organizer_channels"
    id: Mapped[int] = mapped_column(Integer, primary_key=True, autoincrement=True)
    owner_user_id: Mapped[int] = mapped_column(BigInteger, index=True)
    chat_id: Mapped[int] = mapped_column(BigInteger)
    username: Mapped[str|None] = mapped_column(String(128), nullable=True)
    title: Mapped[str] = mapped_column(String(255))
    is_private: Mapped[bool] = mapped_column(Boolean, default=False)
    bot_role: Mapped[str] = mapped_column(String(32), default="member")  # member|admin
    status: Mapped[str] = mapped_column(String(32), default="ok")
    added_at: Mapped[datetime] = mapped_column(DateTime(timezone=True), default=lambda: datetime.now(timezone.utc))

class Giveaway(Base):
    __tablename__="giveaways"
    id: Mapped[int] = mapped_column(Integer, primary_key=True, autoincrement=True)
    owner_user_id: Mapped[int] = mapped_column(BigInteger, index=True)
    internal_title: Mapped[str] = mapped_column(String(100))
    public_description: Mapped[str] = mapped_column(String(3000))
    photo_file_id: Mapped[str|None] = mapped_column(String(512), nullable=True)
    end_at_utc: Mapped[datetime] = mapped_column(DateTime(timezone=True))
    winners_count: Mapped[int] = mapped_column(Integer, default=1)
    commit_hash: Mapped[str|None] = mapped_column(String(128), nullable=True)
    secret: Mapped[str|None] = mapped_column(String(128), nullable=True)
    status: Mapped[str] = mapped_column(String(16), default=GiveawayStatus.DRAFT)
    tz: Mapped[str] = mapped_column(String(64), default=DEFAULT_TZ)
    cancelled_at: Mapped[datetime|None] = mapped_column(DateTime(timezone=True), nullable=True)
    cancelled_by: Mapped[int|None] = mapped_column(BigInteger, nullable=True)
    created_at: Mapped[datetime] = mapped_column(DateTime(timezone=True), default=lambda: datetime.now(timezone.utc))

class GiveawayChannel(Base):
    __tablename__="giveaway_channels"
    id: Mapped[int] = mapped_column(Integer, primary_key=True, autoincrement=True)
    giveaway_id: Mapped[int] = mapped_column(ForeignKey("giveaways.id"), index=True)
    channel_id: Mapped[int] = mapped_column(ForeignKey("organizer_channels.id"))
    chat_id: Mapped[int] = mapped_column(BigInteger)
    title: Mapped[str] = mapped_column(String(255))

class Entry(Base):
    __tablename__="entries"
    id: Mapped[int] = mapped_column(Integer, primary_key=True, autoincrement=True)
    giveaway_id: Mapped[int] = mapped_column(ForeignKey("giveaways.id"), index=True)
    user_id: Mapped[int] = mapped_column(BigInteger, index=True)
    ticket_code: Mapped[str] = mapped_column(String(6), index=True)
    prelim_ok: Mapped[bool] = mapped_column(Boolean, default=False)
    final_ok: Mapped[bool|None] = mapped_column(Boolean, nullable=True)
    prelim_checked_at: Mapped[datetime|None] = mapped_column(DateTime(timezone=True))
    final_checked_at: Mapped[datetime|None] = mapped_column(DateTime(timezone=True))

class Winner(Base):
    __tablename__="winners"
    id: Mapped[int] = mapped_column(Integer, primary_key=True, autoincrement=True)
    giveaway_id: Mapped[int] = mapped_column(ForeignKey("giveaways.id"), index=True)
    user_id: Mapped[int] = mapped_column(BigInteger)
    rank: Mapped[int] = mapped_column(Integer)
    hash_used: Mapped[str] = mapped_column(String(128))

# ---- DB INIT ----

# –ø—É—Ç—å –∫ bot.db —Å—Ç—Ä–æ–≥–æ —Ä—è–¥–æ–º —Å bot.py (–æ–¥–∏–Ω —Ñ–∞–π–ª –¥–ª—è –≤—Å–µ—Ö)
DB_PATH = Path(os.getenv("DB_PATH") or Path(__file__).with_name("bot.db")).resolve()
DB_URL  = f"sqlite+aiosqlite:///{DB_PATH.as_posix()}"

from sqlalchemy.ext.asyncio import create_async_engine, async_sessionmaker
engine = create_async_engine(DB_URL, echo=True, future=True)
Session = async_sessionmaker(engine, expire_on_commit=False)

async def mark_membership(chat_id: int, user_id: int) -> None:
    async with Session() as s:
        async with s.begin():
            await s.execute(
                _sqltext(
                    "INSERT OR IGNORE INTO channel_memberships(chat_id, user_id) "
                    "VALUES (:c, :u)"
                ),
                {"c": chat_id, "u": user_id},
            )

async def is_member_local(chat_id: int, user_id: int) -> bool:
    async with Session() as s:
        r = await s.execute(
            _sqltext(
                "SELECT 1 FROM channel_memberships WHERE chat_id=:c AND user_id=:u"
            ),
            {"c": chat_id, "u": user_id},
        )
        return r.first() is not None

# —Å–æ–∑–¥–∞—Ç—å –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ ORM-–º–æ–¥–µ–ª—è–º (–µ—Å–ª–∏ –∏—Ö –µ—â—ë –Ω–µ—Ç)
async def init_db():
    async with engine.begin() as conn:
        await conn.run_sync(Base.metadata.create_all)

# --- DB bootstrap: –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –Ω—É–∂–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã/—É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ ---

async def ensure_schema():
    """
    –°–æ–∑–¥–∞—ë–º, –µ—Å–ª–∏ –≤–¥—Ä—É–≥ –Ω–µ—Ç:
      - —Ç–∞–±–ª–∏—Ü—É organizer_channels —Å –Ω—É–∂–Ω—ã–º–∏ –ø–æ–ª—è–º–∏,
      - —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –Ω–∞ (owner_user_id, chat_id).
    """
    async with engine.begin() as conn:
        # 1) –¢–∞–±–ª–∏—Ü–∞ (–µ—Å–ª–∏ –Ω–µ—Ç) ‚Äî –ø–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å–æ –≤—Å–µ–º–∏ –∫–æ–ª–æ–Ω–∫–∞–º–∏.
        await conn.exec_driver_sql("""
        CREATE TABLE IF NOT EXISTS organizer_channels (
            id            INTEGER PRIMARY KEY AUTOINCREMENT,
            owner_user_id BIGINT   NOT NULL,
            chat_id       BIGINT   NOT NULL,
            username      TEXT,
            title         TEXT     NOT NULL,
            is_private    BOOLEAN  NOT NULL DEFAULT 0,
            bot_role      TEXT     NOT NULL DEFAULT 'member',
            status        TEXT     NOT NULL DEFAULT 'ok',
            added_at      TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        );
        """)
        # 2) –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –¥–ª—è upsert
        await conn.exec_driver_sql("""
        CREATE UNIQUE INDEX IF NOT EXISTS ux_org_channels_owner_chat
        ON organizer_channels(owner_user_id, chat_id);
        """)
        # 3) –ò–Ω–¥–µ–∫—Å –Ω–∞ owner_user_id –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –≤—ã–±–æ—Ä–æ–∫
        await conn.exec_driver_sql("""
        CREATE INDEX IF NOT EXISTS idx_owner ON organizer_channels(owner_user_id);
        """)
        # 4) –õ–æ–∫–∞–ª—å–Ω—ã–π –∫—ç—à —Ñ–∞–∫—Ç–æ–≤ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è (chat_id + user_id)
        await conn.exec_driver_sql("""
        CREATE TABLE IF NOT EXISTS channel_memberships (
            chat_id   BIGINT NOT NULL,
            user_id   BIGINT NOT NULL,
            joined_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            PRIMARY KEY (chat_id, user_id)
        );
        """)

@asynccontextmanager
async def session_scope():
    async with Session() as s:
        try:
            yield s
            await s.commit()
        except:
            await s.rollback()
            raise

# ----------------- HELPERS -----------------
ALPHABET = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"
def gen_ticket_code(): return "".join(random.choices(ALPHABET, k=6))
def utcnow(): return datetime.now(timezone.utc)

async def ensure_user(user_id:int, username:str|None):
    async with session_scope() as s:
        u = await s.get(User, user_id)
        if not u:
            u = User(user_id=user_id, username=username)
            s.add(u)

async def is_user_admin_of_chat(bot: Bot, chat_id: int, user_id: int) -> bool:
    """
    –ù–∞–¥—ë–∂–Ω–µ–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω—Å—Ç–≤–æ —á–µ—Ä–µ–∑ get_chat_administrators().
    –í –∫–∞–Ω–∞–ª–∞—Ö get_chat_member –º–æ–∂–µ—Ç –¥–∞–≤–∞—Ç—å –æ—à–∏–±–∫–∏/–ø—É—Å—Ç—ã–µ —Å—Ç–∞—Ç—É—Å—ã,
    –ø–æ—ç—Ç–æ–º—É –ø—Ä–æ–±—É–µ–º –æ–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞.
    """
    # 1) –ø—Ä–æ–±—É–µ–º —Å–ø–∏—Å–∫–æ–º –∞–¥–º–∏–Ω–æ–≤ (–æ—Å–Ω–æ–≤–Ω–æ–π –ø—É—Ç—å)
    try:
        admins = await bot.get_chat_administrators(chat_id)
        for a in admins:
            if a.user.id == user_id:
                return True
    except TelegramBadRequest:
        # —É–ø–∞–ª–∏ –Ω–∞ –ø—Ä–∞–≤–∞—Ö/–¥–æ—Å—Ç—É–ø–µ ‚Äì –ø—Ä–æ–¥–æ–ª–∂–∏–º –∑–∞–ø–∞—Å–Ω—ã–º –ø—É—Ç—ë–º
        pass
    except Exception:
        pass

    # 2) –∑–∞–ø–∞—Å–Ω–æ–π –ø—É—Ç—å ‚Äì —Ç–æ—á–µ—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞
    try:
        m = await bot.get_chat_member(chat_id, user_id)
        return m.status in {"administrator", "creator"}
    except Exception:
        return False

async def check_membership_on_all(bot, user_id:int, giveaway_id:int):
    async with session_scope() as s:
        res = await s.execute(text("SELECT title, chat_id FROM giveaway_channels WHERE giveaway_id=:gid"),{"gid":giveaway_id})
        rows = res.all()
    details=[]; all_ok=True
    for title, chat_id in rows:
        # 1) –ë—ã—Å—Ç—Ä—ã–π –ø—É—Ç—å: —É–∂–µ –∑–Ω–∞–µ–º, —á—Ç–æ –æ–Ω –≤—Å—Ç—É–ø–∏–ª (–æ–¥–æ–±—Ä–µ–Ω–Ω—ã–π join-request)
        ok = await is_member_local(int(chat_id), int(user_id))
        status = "local" if ok else "unknown"

        # 2) –ï—Å–ª–∏ –Ω–µ—Ç –ª–æ–∫–∞–ª—å–Ω–æ–π –æ—Ç–º–µ—Ç–∫–∏ ‚Äî –ø–æ–¥—Å—Ç—Ä–∞—Ö—É–µ–º—Å—è Bot API
        if not ok:
            try:
                m = await bot.get_chat_member(chat_id, user_id)
                status = (m.status or "").lower()
                ok = (
                    status in {"member", "administrator", "creator"} or
                    (status == "restricted" and getattr(m, "is_member", False))
                )
            except Exception as e:
                logging.warning(f"[CHK] chat={chat_id} user={user_id} err={e}")
        details.append((f"{title} (status={status})", ok))
        all_ok = all_ok and ok
    return all_ok, details

def commit_hash(secret:str, gid:int)->str:
    return hashlib.sha256((secret+str(gid)).encode()).hexdigest()

def deterministic_draw(secret:str, gid:int, user_ids:list[int], k:int):
    h = hashlib.sha256((secret+str(gid)).encode()).digest()
    pool = list(sorted(user_ids))
    winners=[]; rank=1
    while pool and len(winners)<k:
        idx = int.from_bytes(h,"big") % len(pool)
        uid = pool.pop(idx)
        winners.append((uid, rank, hashlib.sha256(h).hexdigest()))
        h = hashlib.sha256(h).digest()
        rank+=1
    return winners

#--- –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –° –º–µ–¥–∏–∞ ---
def kb_media_preview(media_on_top: bool) -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    kb.button(text="–ò–∑–º–µ–Ω–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ/gif/–≤–∏–¥–µ–æ", callback_data="preview:change")
    if media_on_top:
        kb.button(text="–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –º–µ–¥–∏–∞ —Å–Ω–∏–∑—É", callback_data="preview:move:down")
    else:
        kb.button(text="–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –º–µ–¥–∏–∞ —Å–≤–µ—Ä—Ö—É", callback_data="preview:move:up")
    kb.button(text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="preview:continue")
    kb.adjust(1)
    return kb.as_markup()

#--- –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ë–ï–ó –º–µ–¥–∏–∞ ---
def kb_preview_no_media() -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    kb.button(text="–î–æ–±–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ/gif/–≤–∏–¥–µ–æ", callback_data="preview:add_media")
    kb.button(text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="preview:continue")
    kb.adjust(1)
    return kb.as_markup()

def _preview_text(title: str, winners: int) -> str:
    return (
        f"{escape(title)}\n\n"
        f"–ß–∏—Å–ª–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: 0\n"
        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–∑–æ–≤: {max(1, int(winners))}\n"
        f"–î–∞—Ç–∞ —Ä–æ–∑—ã–≥—Ä—ã—à–∞: 00:00, 00.00.0000 (0 days)"
    )

async def _send_media(chat_id: int, kind: str|None, fid: str|None):
    if not kind or not fid:
        return None
    if kind == "photo":
        return await bot.send_photo(chat_id, fid)
    if kind == "animation":
        return await bot.send_animation(chat_id, fid)
    if kind == "video":
        return await bot.send_video(chat_id, fid)
    return None

async def save_shared_chat(
    *,
    owner_user_id: int,
    chat_id: int,
    title: str,
    chat_type: str,
    bot_role: str
) -> bool:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ –≤—Å—Ç–∞–≤–∫–∞ —Å–¥–µ–ª–∞–Ω–∞ –≤–ø–µ—Ä–≤—ã–µ; False, –µ—Å–ª–∏ —Ç–∞–∫–æ–π –∫–∞–Ω–∞–ª —É–∂–µ –±—ã–ª.
    """
    # is_private = True –¥–ª—è –≥—Ä—É–ø–ø/—Å—É–ø–µ—Ä–≥—Ä—É–ø–ø, False –¥–ª—è –∫–∞–Ω–∞–ª–æ–≤
    is_private = chat_type in (ChatType.GROUP, ChatType.SUPERGROUP)

    async with Session() as s:
        async with s.begin():
            # –ø—Ä–æ–±—É–µ–º –≤—Å—Ç–∞–≤–∏—Ç—å; –µ—Å–ª–∏ –¥—É–±–ª–∏–∫–∞—Ç ‚Äî –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä
            await s.execute(
                """
                INSERT OR IGNORE INTO organizer_channels
                    (owner_user_id, chat_id, title, is_private, bot_role)
                VALUES (?, ?, ?, ?, ?)
                """,
                (owner_user_id, chat_id, title, int(is_private), bot_role)
            )
        # –ø—Ä–æ–≤–µ—Ä–∏–º, –ø–æ—è–≤–∏–ª–∞—Å—å –ª–∏ –∑–∞–ø–∏—Å—å
        res = await s.execute(
            "SELECT 1 FROM organizer_channels WHERE owner_user_id=? AND chat_id=?",
            (owner_user_id, chat_id)
        )
        return res.scalar() is not None

# ----------------- FSM -----------------
from aiogram.fsm.state import StatesGroup, State

class CreateFlow(StatesGroup):
    TITLE = State()
    WINNERS = State()
    DESC = State()
    CONFIRM_DESC = State()   # –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è
    MEDIA_DECIDE = State()   # –Ω–æ–≤—ã–π —à–∞–≥: –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –î–∞/–ù–µ—Ç
    MEDIA_UPLOAD = State()   # –Ω–æ–≤—ã–π —à–∞–≥: –æ–∂–∏–¥–∞—Ç—å —Ñ–∞–π–ª (photo/animation/video)
    MEDIA_PREVIEW = State()
    PHOTO = State()          # –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –Ω–æ –ø—É—Å—Ç—å –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –µ—Å–ª–∏ –≥–¥–µ-—Ç–æ —Å—Å—ã–ª–∞–µ—à—å—Å—è
    ENDAT = State()

# ----------------- BOT -----------------
bot = Bot(BOT_TOKEN, parse_mode="HTML")
dp = Dispatcher()
scheduler = AsyncIOScheduler()

@dp.chat_join_request()
async def on_join_request(ev: ChatJoinRequest, bot: Bot):
    try:
        chat_id = ev.chat.id
        user_id = ev.from_user.id
        await bot.approve_chat_join_request(chat_id, user_id)
        await mark_membership(chat_id, user_id)
        logging.info(f"[JOIN] approved chat={chat_id} user={user_id}")
    except Exception as e:
        logging.exception(f"[JOIN][ERR] {e}")

# --- –¢—Ä–µ–±—É–µ–º—ã–µ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –∫–∞–Ω–∞–ª–æ–≤ –∏ –≥—Ä—É–ø–ø ---
CHAN_ADMIN_RIGHTS = ChatAdministratorRights(
    is_anonymous=False,
    can_manage_chat=True,
    can_post_messages=True,
    can_edit_messages=True,
    can_delete_messages=True,
    can_invite_users=True,
    can_restrict_members=True,
    can_promote_members=True,
    can_change_info=True,
    can_pin_messages=False,
    can_manage_topics=True,
    can_post_stories=False,
    can_edit_stories=False,
    can_delete_stories=False,
    can_manage_video_chats=True,
)

GROUP_ADMIN_RIGHTS = ChatAdministratorRights(
    is_anonymous=False,
    can_manage_chat=True,
    can_post_messages=True,
    can_edit_messages=True,
    can_delete_messages=True,
    can_invite_users=True,
    can_restrict_members=True,
    can_promote_members=True,
    can_change_info=True,
    can_pin_messages=True,
    can_manage_topics=True,
    can_post_stories=False,
    can_edit_stories=False,
    can_delete_stories=False,
    can_manage_video_chats=True,
)

async def set_bot_commands(bot: Bot):
    commands = [
        BotCommand(command="start", description="–ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        BotCommand(command="create", description="—Å–æ–∑–¥–∞—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à"),
        BotCommand(command="events", description="–º–æ–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∏"),
        BotCommand(command="subscriptions", description="–ø–æ–¥–ø–∏—Å–∫–∏"),
        # –º–æ–∂–Ω–æ –ø–æ–∑–∂–µ –¥–æ–±–∞–≤–∏—Ç—å: help, menu –∏ –¥—Ä.
    ]
    await bot.set_my_commands(commands)

def kb_main():
    kb = InlineKeyboardBuilder()
    kb.button(text="–°–æ–∑–¥–∞—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à", callback_data="create")
    kb.button(text="–ú–æ–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∏", callback_data="my_events")
    kb.button(text="–ú–æ–∏ –∫–∞–Ω–∞–ª—ã", callback_data="my_channels")
    return kb.as_markup()

# ===== Reply-–∫–Ω–æ–ø–∫–∏: –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≥–æ—Ç–æ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ =====

def reply_main_kb() -> ReplyKeyboardMarkup:
    btn_add_channel = KeyboardButton(
        text=BTN_ADD_CHANNEL,
        request_chat=KeyboardButtonRequestChat(
            request_id=1,
            chat_is_channel=True,
            bot_administrator_rights=CHAN_ADMIN_RIGHTS,
            user_administrator_rights=CHAN_ADMIN_RIGHTS,
        )
    )

    btn_add_group = KeyboardButton(
        text=BTN_ADD_GROUP,
        request_chat=KeyboardButtonRequestChat(
            request_id=2,
            chat_is_channel=False,
            bot_administrator_rights=GROUP_ADMIN_RIGHTS,
            user_administrator_rights=GROUP_ADMIN_RIGHTS,
        )
    )

    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text=BTN_EVENTS), KeyboardButton(text=BTN_CREATE)],
            [btn_add_channel, btn_add_group],
            [KeyboardButton(text=BTN_SUBSCRIPTIONS)],
        ],
        resize_keyboard=True,
        one_time_keyboard=False,
        input_field_placeholder="–°–æ–æ–±—â–µ–Ω–∏–µ",
    )

def chooser_reply_kb() -> ReplyKeyboardMarkup:
    btn_add_channel = KeyboardButton(
        text=BTN_ADD_CHANNEL,
        request_chat=KeyboardButtonRequestChat(
            request_id=101,  # –ª—é–±–æ–µ —á–∏—Å–ª–æ
            chat_is_channel=True,
            bot_administrator_rights=CHAN_ADMIN_RIGHTS,
            user_administrator_rights=CHAN_ADMIN_RIGHTS,
        )
    )
    btn_add_group = KeyboardButton(
        text=BTN_ADD_GROUP,
        request_chat=KeyboardButtonRequestChat(
            request_id=102,
            chat_is_channel=False,
            bot_administrator_rights=GROUP_ADMIN_RIGHTS,
            user_administrator_rights=GROUP_ADMIN_RIGHTS,
        )
    )
    # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è ¬´–æ–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è¬ª –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ç–æ–ª—å–∫–æ —Å —ç—Ç–∏–º–∏ –¥–≤—É–º—è –∫–Ω–æ–ø–∫–∞–º–∏
    return ReplyKeyboardMarkup(
        keyboard=[[btn_add_channel, btn_add_group]],
        resize_keyboard=True,
        one_time_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª/–≥—Ä—É–ø–ø—É –Ω–∏–∂–µ"
    )

# === –°–ò–°–¢–ï–ú–ù–û–ï –æ–∫–Ω–æ –≤—ã–±–æ—Ä–∞ –∫–∞–Ω–∞–ª–∞/–≥—Ä—É–ø–ø—ã (chat_shared) ===
@dp.message(F.chat_shared)
async def on_chat_shared(m: Message, state: FSMContext):
    shared = m.chat_shared
    chat_id = shared.chat_id

    try:
        chat = await bot.get_chat(chat_id)
        me = await bot.get_me()
        cm = await bot.get_chat_member(chat_id, me.id)
        role = "admin" if cm.status == "administrator" else ("member" if cm.status == "member" else "none")
    except Exception as e:
        await m.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —á–∞—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑. ({e})")
        return

    title = chat.title or getattr(chat, "first_name", None) or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
    username = getattr(chat, "username", None)
    is_private = 0 if username else 1  # –∫–∞–Ω–∞–ª—ã —Å @username —Å—á–∏—Ç–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–º–∏

    # 1) upsert (–≤—Å—Ç–∞–≤–∫–∞/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–µ–∑ –¥—É–±–ª–µ–π –ø–æ (owner_user_id, chat_id))
    async with Session() as s:
        async with s.begin():
            await s.execute(
                stext(
                    "INSERT OR REPLACE INTO organizer_channels("
                    "owner_user_id, chat_id, username, title, is_private, bot_role, status, added_at"
                    ") VALUES (:o, :cid, :u, :t, :p, :r, 'ok', :ts)"
                ),
                {
                    "o": m.from_user.id,
                    "cid": chat.id,
                    "u": username,
                    "t": title,
                    "p": int(is_private),
                    "r": role,
                    "ts": datetime.now(timezone.utc),
                },
            )

        # 2) —Å—Ä–∞–∑—É —á–∏—Ç–∞–µ–º —Ç—É –∂–µ –∑–∞–ø–∏—Å—å (—Ç–æ–π –∂–µ —Å–µ—Å—Å–∏–µ–π)
        res = await s.execute(
            stext(
                "SELECT id, owner_user_id, chat_id, title, status "
                "FROM organizer_channels "
                "WHERE owner_user_id=:o AND chat_id=:cid"
            ),
            {"o": m.from_user.id, "cid": chat.id},
        )
        row = res.first()

    logging.info("üì¶ saved channel row=%s", row)

    kind = "–∫–∞–Ω–∞–ª" if chat.type == "channel" else "–≥—Ä—É–ø–ø–∞"
    await m.answer(
        f"{kind.capitalize()} <b>{title}</b> –ø–æ–¥–∫–ª—é—á—ë–Ω –∫ –±–æ—Ç—É.",
        parse_mode="HTML",
        reply_markup=ReplyKeyboardRemove(),
    )

    # –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å –Ω–µ –Ω–∞—à–ª–∞—Å—å ‚Äî —Å—Ä–∞–∑—É –ø–æ–¥—Å–≤–µ—Ç–∏–º –ø—Ä–æ–±–ª–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –≤—ã–π–¥–µ–º
    if not row:
        return

    # –ï—Å–ª–∏ —Å–µ–π—á–∞—Å –∏–¥—ë—Ç –ø—Ä–∏–≤—è–∑–∫–∞ –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —Ä–æ–∑—ã–≥—Ä—ã—à—É ‚Äî –ø–µ—Ä–µ—Ä–∏—Å—É–µ–º —ç–∫—Ä–∞–Ω –ø—Ä–∏–≤—è–∑–∫–∏
    data = await state.get_data()
    event_id = data.get("chooser_event_id")
    if event_id:
        async with session_scope() as s:
            gw = await s.get(Giveaway, event_id)
            res = await s.execute(stext("SELECT id, title FROM organizer_channels WHERE owner_user_id=:u"),
                                  {"u": gw.owner_user_id})
            channels = [(r[0], r[1]) for r in res.all()]
            res = await s.execute(stext("SELECT channel_id FROM giveaway_channels WHERE giveaway_id=:g"),
                                  {"g": event_id})
            attached_ids = {r[0] for r in res.fetchall()}
        await m.answer(
            build_connect_channels_text(gw.internal_title),
            reply_markup=build_channels_menu_kb(event_id, channels, attached_ids)
        )
        await state.update_data(chooser_event_id=None)
    else:
        # –û–±—ã—á–Ω—ã–π –∫–µ–π—Å: –ø–æ–∫–∞–∑–∞—Ç—å ¬´–ú–æ–∏ –∫–∞–Ω–∞–ª—ã¬ª
        rows = await get_user_org_channels(m.from_user.id)
        label = "–í–∞—à–∏ –∫–∞–Ω–∞–ª—ã:\n\n" + ("" if rows else "–ü–æ–∫–∞ –ø—É—Å—Ç–æ.")
        await m.answer(label, reply_markup=kb_my_channels(rows))

def kb_event_actions(gid:int, status:str):
    kb = InlineKeyboardBuilder()
    if status==GiveawayStatus.DRAFT:
        kb.button(text="–ü–æ–¥–∫–ª—é—á–∏—Ç—å –∫–∞–Ω–∞–ª—ã", callback_data=f"ev:channels:{gid}")
        kb.button(text="–ó–∞–ø—É—Å—Ç–∏—Ç—å (Launch)", callback_data=f"ev:launch:{gid}")
        kb.button(text="–£–¥–∞–ª–∏—Ç—å", callback_data=f"ev:delete:{gid}")
    elif status==GiveawayStatus.ACTIVE:
        kb.button(text="–û—Ç–º–µ–Ω–∏—Ç—å (Cancel)", callback_data=f"ev:cancel:{gid}")
        kb.button(text="–°—Ç–∞—Ç—É—Å", callback_data=f"ev:status:{gid}")
    elif status in (GiveawayStatus.FINISHED, GiveawayStatus.CANCELLED):
        kb.button(text="–û—Ç—á—ë—Ç", callback_data=f"ev:status:{gid}")
    kb.button(text="–ù–∞–∑–∞–¥", callback_data="my_events")
    return kb.as_markup()

def kb_participate(gid:int, allow:bool, cancelled:bool=False):
    kb = InlineKeyboardBuilder()
    if cancelled:
        kb.button(text="‚ùå –†–æ–∑—ã–≥—Ä—ã—à –æ—Ç–º–µ–Ω—ë–Ω", callback_data="noop")
    else:
        kb.button(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data=f"u:check:{gid}")
        if allow:
            kb.button(text="–ü—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ", callback_data=f"u:join:{gid}")
    return kb.as_markup()

def kb_confirm_description() -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    kb.button(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç", callback_data="desc:edit")
    kb.button(text="‚û°Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="desc:continue")
    kb.adjust(1)
    return kb.as_markup()

@dp.message(Command("start"))
async def cmd_start(m: Message, state: FSMContext):
    await ensure_user(m.from_user.id, m.from_user.username)
    text = (
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ë–æ—Ç —Å —Ä–æ–∑—ã–≥—Ä—ã—à–∞–º–∏ <b>PrizeMe!</b>\n\n"
        "–ë–æ—Ç —Å–ø–æ—Å–æ–±–µ–Ω –∑–∞–ø—É—Å–∫–∞—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à–∏ —Å—Ä–µ–¥–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ–¥–Ω–æ–≥–æ "
        "–∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö Telegram-–∫–∞–Ω–∞–ª–æ–≤ –∏ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –≤—ã–±–∏—Ä–∞—Ç—å "
        "–ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –≤ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è.\n\n"
        "–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:\n"
        "<b>/create</b> ‚Äì —Å–æ–∑–¥–∞—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à\n"
        "<b>/events</b> ‚Äì –º–æ–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∏\n"
        "<b>/subscriptions</b> ‚Äì –ø–æ–¥–ø–∏—Å–∫–∏"
    )
    await m.answer(text, parse_mode="HTML", reply_markup=reply_main_kb())

# ===== –ú–µ–Ω—é "–ú–æ–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∏" =====
def kb_my_events_menu(count_involved:int, count_finished:int, my_draft:int, my_finished:int):
    kb = InlineKeyboardBuilder()
    kb.button(text=f"–í –∫–æ—Ç–æ—Ä—ã—Ö —É—á–∞—Å—Ç–≤—É—é ({count_involved})", callback_data="mev:involved")
    kb.button(text=f"–ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∏ ({count_finished})", callback_data="mev:finished")
    kb.button(text=f"–ú–æ–∏ –Ω–µ–∑–∞–ø—É—â–µ–Ω–Ω—ã–µ ({my_draft})", callback_data="mev:my_drafts")
    kb.button(text=f"–ú–æ–∏ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ ({my_finished})", callback_data="mev:my_finished")
    kb.button(text="–°–æ–∑–¥–∞—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à", callback_data="create")
    kb.button(text="–ú–æ–∏ –∫–∞–Ω–∞–ª—ã", callback_data="my_channels")
    kb.adjust(1)
    return kb.as_markup()

@dp.message(Command("dbg_dbpath"))
async def dbg_dbpath(m: types.Message):
    await m.answer(f"DB: <code>{DB_PATH.resolve()}</code>")

@dp.message(Command("dbg_channels"))
async def dbg_channels(m: types.Message):
    rows = await get_user_org_channels(m.from_user.id)
    if not rows:
        await m.answer("–í—Å–µ–≥–æ: 0")
    else:
        # rows = [(row_id, title)]
        # –≤—ã—Ç–∞—â–∏–º –µ—â—ë chat_id –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏
        async with Session() as s:
            chat_ids = []
            for row_id, _title in rows:
                r = await s.execute(stext("SELECT chat_id, title FROM organizer_channels WHERE id=:id"), {"id": row_id})
                rec = r.first()
                chat_ids.append(rec)
        lines = [f"{i+1}. {rec.title} (chat_id={rec.chat_id})" for i, rec in enumerate(chat_ids)]
        await m.answer("–í—Å–µ–≥–æ: " + str(len(rows)) + "\n" + "\n".join(lines))

@dp.message(Command("dbg_scan"))
async def dbg_scan(m: types.Message):
    # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –≤–∏–¥–∏–º –≤ organizer_channels, –∏ –ø–æ –∫–∞–∂–¥–æ–º—É —á–∞—Ç—É ‚Äî —Å—Ç–∞—Ç—É—Å—ã
    async with Session() as s:
        res = await s.execute(stext("""
            SELECT oc.id, oc.chat_id, oc.title
            FROM organizer_channels oc
            JOIN (
                SELECT chat_id, MAX(id) AS max_id
                FROM organizer_channels
                GROUP BY chat_id
            ) last ON last.max_id = oc.id
            ORDER BY oc.id DESC
        """))
        rows = res.all()

    me = await bot.get_me()
    lines = [f"–í—Å–µ–≥–æ –≤ –ë–î –ø–æ chat_id: {len(rows)}"]
    for row_id, chat_id, title in rows:
        try:
            bot_admin = await is_user_admin_of_chat(bot, chat_id, me.id)
        except Exception:
            bot_admin = False
        try:
            user_admin = await is_user_admin_of_chat(bot, chat_id, m.from_user.id)
        except Exception:
            user_admin = False
        mark = "‚úÖ" if (bot_admin and user_admin) else "‚ùå"
        lines.append(f"{mark} {title} (chat_id={chat_id}) bot_admin={bot_admin} user_admin={user_admin}")

    await m.answer("\n".join(lines))

@dp.message(Command("dbg_gw"))
async def dbg_gw(m: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã —Ç–µ–∫—É—â–µ–≥–æ (–ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ) –º–æ–µ–≥–æ —á–µ—Ä–Ω–æ–≤–∏–∫–∞/–∞–∫—Ç–∏–≤–∞."""
    uid = m.from_user.id
    async with session_scope() as s:
        # –±–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–æ–π —Ä–æ–∑—ã–≥—Ä—ã—à
        res = await s.execute(stext(
            "SELECT id, internal_title FROM giveaways WHERE owner_user_id=:u ORDER BY id DESC LIMIT 1"
        ), {"u": uid})
        row = res.first()
        if not row:
            await m.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π."); return
        gid, title = row
        res = await s.execute(stext(
            "SELECT gc.chat_id, gc.title FROM giveaway_channels gc WHERE gc.giveaway_id=:g"
        ), {"g": gid})
        rows = res.fetchall()
    if not rows:
        await m.answer(f"–†–æ–∑—ã–≥—Ä—ã—à ¬´{title}¬ª (id={gid}). –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç.")
    else:
        lines = [f"–†–æ–∑—ã–≥—Ä—ã—à ¬´{title}¬ª (id={gid}). –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ:"]
        lines += [f"‚Ä¢ {t} (chat_id={cid})" for cid, t in rows]
        await m.answer("\n".join(lines))

async def show_my_events_menu(m: Message):
    """–°–æ–±–∏—Ä–∞–µ–º —Å—á—ë—Ç—á–∏–∫–∏ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º 6 –∫–Ω–æ–ø–æ–∫-–º–µ–Ω—é."""
    uid = m.from_user.id
    async with session_scope() as s:
        # –≤ –∫–æ—Ç–æ—Ä—ã—Ö —É—á–∞—Å—Ç–≤—É—é ‚Äî —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω—ã–µ/–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ, –≥–¥–µ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å entries
        res = await s.execute(stext(
            "SELECT COUNT(DISTINCT g.id) "
            "FROM entries e JOIN giveaways g ON g.id=e.giveaway_id "
            "WHERE e.user_id=:u"
        ), {"u": uid})
        count_involved = res.scalar_one() or 0

        # –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –≤–æ–æ–±—â–µ (–ø–æ —Å–∏—Å—Ç–µ–º–µ)
        res = await s.execute(stext(
            "SELECT COUNT(*) FROM giveaways WHERE status='finished'"
        ))
        count_finished = res.scalar_one() or 0

        # –º–æ–∏ –Ω–µ–∑–∞–ø—É—â–µ–Ω–Ω—ã–µ (—á–µ—Ä–Ω–æ–≤–∏–∫–∏) –∏ –º–æ–∏ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ
        res = await s.execute(stext(
            "SELECT "
            "SUM(CASE WHEN status='draft' THEN 1 ELSE 0 END), "
            "SUM(CASE WHEN status='finished' THEN 1 ELSE 0 END) "
            "FROM giveaways WHERE owner_user_id=:u"
        ), {"u": uid})
        row = res.first()
        my_draft = int(row[0] or 0)
        my_finished = int(row[1] or 0)

    text = "–†–æ–∑—ã–≥—Ä—ã—à–∏:"
    await m.answer(text, reply_markup=kb_my_events_menu(count_involved, count_finished, my_draft, my_finished))

# ===== –ö–æ–º–∞–Ω–¥–∞ /menu —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å/–ø–æ–∫–∞–∑–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤–Ω–∏–∑—É =====
@dp.message(Command("menu"))
async def cmd_menu(m: Message):
    # –ø–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Å–∏—Å—Ç–µ–º–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
    await m.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=reply_main_kb())

@dp.message(Command("hide"))
async def hide_menu(m: Message):
    # –ü–æ–ª–Ω–æ—Å—Ç—å—é —É–±—Ä–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await m.answer("–ö–Ω–æ–ø–∫–∏ —Å–∫—Ä—ã—Ç—ã. –ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å ‚Äî –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /menu.", reply_markup=ReplyKeyboardRemove())

@dp.message(Command("create"))
async def create_giveaway_start(message: Message, state: FSMContext):
    await state.clear()
    await state.update_data(owner=message.from_user.id)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞:\n\n"
        "–ú–∞–∫—Å–∏–º—É–º ‚Äî <b>50 —Å–∏–º–≤–æ–ª–æ–≤</b>.\n\n"
        "–≠—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –≤ —Å–ø–∏—Å–∫–µ —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π "
        "–≤ –±–æ—Ç–µ. –ü–æ–¥–æ–π–¥–∏—Ç–µ –∫ –≤—ã–±–æ—Ä—É –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞–∫ –º–æ–∂–Ω–æ –±–æ–ª–µ–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ, "
        "—á—Ç–æ–±—ã —É—á–∞—Å—Ç–Ω–∏–∫–∏ –º–æ–≥–ª–∏ –ª–µ–≥–∫–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à —Ä–æ–∑—ã–≥—Ä—ã—à —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö "
        "–æ—Å—Ç–∞–ª—å–Ω—ã—Ö –≤ —Ä–∞–∑–¥–µ–ª–µ <b>¬´–ê–∫—Ç–∏–≤–Ω—ã–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∏¬ª</b>.\n\n"
        "<i>–ü—Ä–∏–º–µ—Ä –Ω–∞–∑–≤–∞–Ω–∏—è:</i> <b>MacBook Pro –æ—Ç –∫–∞–Ω–∞–ª–∞ PrizeMe</b>",
        parse_mode="HTML"
    )
    await state.set_state(CreateFlow.TITLE)   # <-- —Å—Ç–∞–≤–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–∏—Ç—É–ª–∞

# ===== Reply-–∫–Ω–æ–ø–∫–∏: –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≥–æ—Ç–æ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ =====

# "–ú–æ–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∏" -> –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–∞—à cmd_events
@dp.message(F.text == BTN_EVENTS)
async def on_btn_events(m: Message, state: FSMContext):
    await show_my_events_menu(m)

# "–ù–æ–≤—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à" -> –≤–∞—à create_giveaway_start
@dp.message(F.text == BTN_CREATE)
async def on_btn_create(m: Message, state: FSMContext):
    await create_giveaway_start(m, state)

# "–ü–æ–¥–ø–∏—Å–∫–∏" -> –≤–∞—à cmd_subs
@dp.message(F.text == BTN_SUBSCRIPTIONS)
async def on_btn_subs(m: Message, state: FSMContext):
    await cmd_subs(m)

@dp.message(CreateFlow.TITLE)
async def handle_giveaway_name(m: Message, state: FSMContext):
    name = (m.text or "").strip()
    if not name:
        await m.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞:")
        return
    if len(name) > 50:
        await m.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 50 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    await state.update_data(title=name)

    # ‚ûú –ù–æ–≤—ã–π —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥: —Å–ø—Ä–æ—Å–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π
    await state.set_state(CreateFlow.WINNERS)
    await m.answer(
        "–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –≤ —ç—Ç–æ–º —Ä–æ–∑—ã–≥—Ä—ã—à–µ –æ—Ç 1 –¥–æ 50 "
        "(–≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ, –Ω–µ —É–∫–∞–∑—ã–≤–∞—è –¥—Ä—É–≥–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤):"
    )

@dp.message(CreateFlow.WINNERS)
async def handle_winners_count(m: Message, state: FSMContext):
    raw = (m.text or "").strip()
    if not raw.isdigit():
        await m.answer("–ù—É–∂–Ω–æ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 50. –í–≤–µ–¥–∏—Ç–µ –µ—â—ë —Ä–∞–∑:")
        return

    winners = int(raw)
    if not (1 <= winners <= 50):
        await m.answer("–ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 50. –í–≤–µ–¥–∏—Ç–µ –µ—â—ë —Ä–∞–∑:")
        return

    await state.update_data(winners_count=winners)

    # ‚ûú –¥–∞–ª—å—à–µ –∏–¥—ë–º –∫ –æ–ø–∏—Å–∞–Ω–∏—é (–∫–∞–∫ –∏ —Ä–∞–Ω—å—à–µ)
    await state.set_state(CreateFlow.DESC)
    await m.answer(DESCRIPTION_PROMPT, parse_mode="HTML")

# --- –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–ª–∞–ª –æ–ø–∏—Å–∞–Ω–∏–µ ---
@dp.message(CreateFlow.DESC, F.text)
async def step_desc(m: Message, state: FSMContext):
    text = (m.text or "").strip()
    if len(text) > 2500:
        await m.answer("‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ. –£–∫–æ—Ä–æ—Ç–∏ –¥–æ 2500 —Å–∏–º–≤–æ–ª–æ–≤ –∏ –ø—Ä–∏—à–ª–∏ –µ—â—ë —Ä–∞–∑.")
        return

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
    await state.update_data(desc=text)

    # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä + –∫–Ω–æ–ø–∫–∏
    preview = f"<b>–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –æ–ø–∏—Å–∞–Ω–∏—è:</b>\n\n{escape(text)}"
    await m.answer(preview, parse_mode="HTML", reply_markup=kb_confirm_description())

    # –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    await state.set_state(CreateFlow.CONFIRM_DESC)

# –µ—Å–ª–∏ –ø—Ä–∏—Å–ª–∞–ª–∏ –Ω–µ —Ç–µ–∫—Å—Ç
@dp.message(CreateFlow.DESC)
async def step_desc_wrong(m: Message):
    await m.answer("–ü—Ä–∏—à–ª–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ç–µ–∫—Å—Ç (–¥–æ 2500 —Å–∏–º–≤–æ–ª–æ–≤).")

# --- –∫–Ω–æ–ø–∫–∞ ¬´–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç¬ª ---
@dp.callback_query(CreateFlow.CONFIRM_DESC, F.data == "desc:edit")
async def desc_edit(cq: CallbackQuery, state: FSMContext):
    try:
        await cq.message.edit_reply_markup()  # —Å–∫—Ä–æ–µ–º —Å—Ç–∞—Ä—ã–µ –∫–Ω–æ–ø–∫–∏
    except Exception:
        pass
    await state.set_state(CreateFlow.DESC)
    await cq.message.answer(DESCRIPTION_PROMPT, parse_mode="HTML")
    await cq.answer()

# --- –∫–Ω–æ–ø–∫–∞ ¬´–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å¬ª ---
@dp.callback_query(CreateFlow.CONFIRM_DESC, F.data == "desc:continue")
async def desc_continue(cq: CallbackQuery, state: FSMContext):
    try:
        await cq.message.edit_reply_markup()
    except Exception:
        pass
    # –°—Ä–∞–∑—É –ø—Ä–æ—Å–∏–º –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è (–ø–µ—Ä–µ–Ω–æ—Å —à–∞–≥–∞ —Ä–∞–Ω—å—à–µ –º–µ–¥–∏–∞)
    await state.set_state(CreateFlow.ENDAT)
    await cq.message.answer(format_endtime_prompt(), parse_mode="HTML")
    await cq.answer()

@dp.callback_query(CreateFlow.MEDIA_DECIDE, F.data == "media:yes")
async def media_yes(cq: CallbackQuery, state: FSMContext):
    try:
        await cq.message.edit_reply_markup()
    except Exception:
        pass
    await state.set_state(CreateFlow.MEDIA_UPLOAD)
    await state.update_data(media_top=False)   # <-- –º–µ–¥–∏–∞ –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ ¬´–≤–Ω–∏–∑—É¬ª
    await cq.message.answer(MEDIA_INSTRUCTION, parse_mode="HTML", reply_markup=kb_skip_media())
    await cq.answer()

@dp.callback_query(CreateFlow.MEDIA_DECIDE, F.data == "media:no")
async def media_no(cq: CallbackQuery, state: FSMContext):
    # –ø—Ä—è—á–µ–º –∫–Ω–æ–ø–∫–∏ ¬´–î–∞/–ù–µ—Ç¬ª
    try:
        await cq.message.edit_reply_markup()
    except Exception:
        pass

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä—É –ë–ï–ó –º–µ–¥–∏–∞ (–Ω–∏—á–µ–≥–æ –ø–æ–∫–∞ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î)
    await state.set_state(CreateFlow.MEDIA_PREVIEW)
    await state.update_data(media_url=None, media_top=False)

    await render_text_preview_message(cq.message, state)
    await cq.answer()

MAX_VIDEO_BYTES = 5 * 1024 * 1024  # 5 –ú–ë


# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—Å—ë —Ä–∞–≤–Ω–æ –º–æ–∂–µ—Ç –ø—Ä–∏—Å–ª–∞—Ç—å —Ç–µ–∫—Å—Ç ¬´–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª
@dp.message(CreateFlow.MEDIA_UPLOAD, F.text.casefold() == "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
async def media_skip_by_text(m: Message, state: FSMContext):
    await state.set_state(CreateFlow.ENDAT)
    await m.answer(format_endtime_prompt(), parse_mode="HTML")

@dp.message(CreateFlow.MEDIA_UPLOAD, F.photo)
async def got_photo(m: Message, state: FSMContext):
    logging.info("HANDLER photo: state=MEDIA_UPLOAD, sizes=%d", len(m.photo))
    fid = m.photo[-1].file_id
    await state.update_data(photo=pack_media("photo", fid))
    # –ø—Ä–æ–±—É–µ–º ¬´—Ä–∞–º–∫—É¬ª, –∏–Ω–∞—á–µ ‚Äî fallback
    await _ensure_link_preview_or_fallback(m, state, "photo", fid, "image.jpg")

@dp.message(CreateFlow.MEDIA_UPLOAD, F.animation)
async def got_animation(m: Message, state: FSMContext):
    logging.info("HANDLER animation: state=MEDIA_UPLOAD")
    anim = m.animation
    if anim.file_size and anim.file_size > MAX_VIDEO_BYTES:
        await m.answer("‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π —Ñ–∞–π–ª (–¥–æ 5 –ú–ë).", reply_markup=kb_skip_media())
        return
    await state.update_data(photo=pack_media("animation", anim.file_id))
    await _ensure_link_preview_or_fallback(m, state, "animation", anim.file_id, "animation.mp4")

@dp.message(CreateFlow.MEDIA_UPLOAD, F.video)
async def got_video(m: Message, state: FSMContext):
    logging.info("HANDLER video: state=MEDIA_UPLOAD")
    v = m.video
    if v.mime_type and v.mime_type != "video/mp4":
        await m.answer("‚ö†Ô∏è –í–∏–¥–µ–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å MP4.", reply_markup=kb_skip_media())
        return
    if v.file_size and v.file_size > MAX_VIDEO_BYTES:
        await m.answer("‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π —Ñ–∞–π–ª (–¥–æ 5 –ú–ë).", reply_markup=kb_skip_media())
        return
    await state.update_data(photo=pack_media("video", v.file_id))
    await _ensure_link_preview_or_fallback(m, state, "video", v.file_id, "video.mp4")

@dp.message(CreateFlow.ENDAT, F.text)
async def step_endat(m: Message, state: FSMContext):
    """
    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤—ë–ª –≤—Ä–µ–º—è. –í–∞–ª–∏–¥–∏—Ä—É–µ–º, —Å–æ—Ö—Ä–∞–Ω—è–µ–º,
    —Å—á–∏—Ç–∞–µ–º "N –¥–Ω–µ–π" –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–æ–ø—Ä–æ—Å—É –ø—Ä–æ –º–µ–¥–∏–∞.
    """
    txt = (m.text or "").strip()
    logging.info("[ENDAT] got=%r", txt)
    try:
        # –æ–∂–∏–¥–∞–µ–º "HH:MM DD.MM.YYYY" –ø–æ –ú–°–ö (–∫–∞–∫ –ø—Ä–æ—Å–∏–ª–∏)
        dt_msk = datetime.strptime(txt, "%H:%M %d.%m.%Y")
        # –≤ –ë–î —Ö—Ä–∞–Ω–∏–º UTC
        dt_utc = dt_msk.replace(tzinfo=MSK_TZ).astimezone(timezone.utc)

        # –¥–µ–¥–ª–∞–π–Ω –Ω–µ —Ä–∞–Ω—å—à–µ —á–µ–º —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç
        if dt_utc <= datetime.now(timezone.utc) + timedelta(minutes=5):
            await m.answer("–î–µ–¥–ª–∞–π–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∏–Ω–∏–º—É–º —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç. –í–≤–µ–¥–∏—Ç–µ –µ—â—ë —Ä–∞–∑:")
            return

        # —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –æ—Å—Ç–∞–ª–æ—Å—å (–ø–æ –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–º –¥–∞—Ç–∞–º –ú–°–ö)
        now_msk = datetime.now(MSK_TZ).date()
        days_left = (dt_msk.date() - now_msk).days
        if days_left < 0:
            days_left = 0

        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º
        await state.update_data(
            end_at_utc=dt_utc,
            end_at_msk_str=dt_msk.strftime("%H:%M %d.%m.%Y"),
            days_left=days_left
        )

        # —è–≤–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        confirm_text = (
            f"üóì –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: <b>{dt_msk.strftime('%H:%M %d.%m.%Y')}</b>\n"
            f"–û—Å—Ç–∞–ª–æ—Å—å: <b>{days_left}</b> –¥–Ω."
        )
        await m.answer(confirm_text, parse_mode="HTML")

        # –∑–∞–¥–∞—ë–º –≤–æ–ø—Ä–æ—Å –ø—Ä–æ –º–µ–¥–∏–∞ (–∫–Ω–æ–ø–∫–∏ –î–∞/–ù–µ—Ç)
        await state.set_state(CreateFlow.MEDIA_DECIDE)
        await m.answer(MEDIA_QUESTION, reply_markup=kb_yes_no(), parse_mode="HTML")
        logging.info("[ENDAT] saved and asked MEDIA_DECIDE (days_left=%s)", days_left)

    except ValueError:
        await m.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: 13:58 06.10.2025")
    except Exception as e:
        logging.exception("[ENDAT] unexpected error: %s", e)
        await m.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

# ===== –†–∞–∑–¥–µ–ª "–ú–æ–∏ –∫–∞–Ω–∞–ª—ã" =====

def kb_my_channels(rows: list[tuple[int, str]]) -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()

    # —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤/–≥—Ä—É–ø–ø —Å—Ç–æ–ª–±–∏–∫–æ–º
    for row_id, title in rows:
        kb.button(text=title, callback_data=f"mych:info:{row_id}")
    if rows:
        kb.adjust(1)

    # –Ω–∏–∂–Ω—è—è –ª–∏–Ω–∏—è: –¥–≤–µ –∫–Ω–æ–ø–∫–∏ —Ä—è–¥–æ–º
    kb.row(
        InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª",  callback_data="mych:add_channel"),
        InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É", callback_data="mych:add_group"),
    )
    return kb.as_markup()

@dp.callback_query(F.data == "my_channels")
async def show_my_channels(cq: types.CallbackQuery):
    uid = cq.from_user.id
    rows = await get_user_org_channels(uid)
    text = "–í–∞—à–∏ –∫–∞–Ω–∞–ª—ã / –≥—Ä—É–ø–ø—ã:\n\n" + ("" if rows else "–ü–æ–∫–∞ –ø—É—Å—Ç–æ.")
    await cq.message.answer(text, reply_markup=kb_my_channels(rows))
    await cq.answer()

# –•–µ–ª–ø–µ—Ä –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤
# –í–µ—Ä–Ω—É—Ç—å —Å–ø–∏—Å–æ–∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—Å–∫–∏—Ö –∫–∞–Ω–∞–ª–æ–≤/–≥—Ä—É–ø–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è [(id, title)]
async def get_user_org_channels(user_id: int) -> list[tuple[int, str]]:
    """
    –í–†–ï–ú–ï–ù–ù–´–ô –£–ü–†–û–©–Å–ù–ù–´–ô –•–ï–õ–ü–ï–†.
    –ë–µ—Ä—ë–º –ø–æ –æ–¥–Ω–æ–π –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–ø–∏—Å–∏ –Ω–∞ –∫–∞–∂–¥—ã–π chat_id —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'ok'
    –∏ –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º (row_id, title) ‚Äî –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–æ–∫ –∞–¥–º–∏–Ω—Å—Ç–≤.
    –ó–∞–¥–∞—á–∞: —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ —Å–ø–∏—Å–æ–∫ –≤–æ–æ–±—â–µ —Ä–∏—Å—É–µ—Ç—Å—è –≤ –±–æ—Ç–µ.
    """
    async with Session() as s:
        res = await s.execute(
            stext(
                """
                SELECT oc.id, oc.title
                FROM organizer_channels oc
                JOIN (
                    SELECT chat_id, MAX(id) AS max_id
                    FROM organizer_channels
                    WHERE status='ok'
                    GROUP BY chat_id
                ) last ON last.max_id = oc.id
                ORDER BY oc.id DESC
                """
            )
        )
        rows = res.all()
    # rows -> [(id, title)]
    return [(r[0], r[1]) for r in rows]

# –ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É –∫–∞–Ω–∞–ª–∞
@dp.callback_query(F.data.startswith("mych:info:"))
async def cb_my_channel_info(cq: CallbackQuery):
    _, _, sid = cq.data.split(":")
    oc_id = int(sid)
    async with session_scope() as s:
        res = await s.execute(
            stext("SELECT title, chat_id, added_at FROM organizer_channels WHERE id=:id"),
            {"id": oc_id}
        )
        row = res.first()
    if not row:
        await cq.answer("–ö–∞–Ω–∞–ª/–≥—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", show_alert=True); return

    title, chat_id, added_at = row
    kind = "–ö–∞–Ω–∞–ª" if str(chat_id).startswith("-100") else "–ì—Ä—É–ø–ø–∞"

    # –ü—Ä–∏–≤–æ–¥–∏–º –¥–∞—Ç—É –∫ –ú–°–ö (–∞–∫–∫—É—Ä–∞—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã SQLite)
    dt_msk = None
    if isinstance(added_at, datetime):
        try:
            dt_msk = (added_at.replace(tzinfo=timezone.utc)
                      if added_at.tzinfo is None else added_at).astimezone(MSK_TZ)
        except Exception:
            dt_msk = added_at
    else:
        try:
            parsed = datetime.strptime(str(added_at), "%Y-%m-%d %H:%M:%S")
            dt_msk = parsed.replace(tzinfo=timezone.utc).astimezone(MSK_TZ)
        except Exception:
            dt_msk = None

    dt_text = dt_msk.strftime("%H:%M, %d.%m.%Y") if isinstance(dt_msk, datetime) else str(added_at)

    text = (
        f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {title}\n"
        f"<b>–¢–∏–ø:</b> {kind}\n"
        f"<b>ID:</b> {chat_id}\n"
        f"<b>–î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:</b> {dt_text}\n\n"
        "–£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª ‚Äî –∫–∞–Ω–∞–ª –±—É–¥–µ—Ç —É–¥–∞–ª—ë–Ω —Ç–æ–ª—å–∫–æ –∏–∑ —Å–ø–∏—Å–∫–∞ –≤–∞—à–∏—Ö –∫–∞–Ω–∞–ª–æ–≤ –≤ –±–æ—Ç–µ, "
        "–æ–¥–Ω–∞–∫–æ –≤–æ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–∞—Ö, –∫ –∫–æ—Ç–æ—Ä—ã–º –∫–∞–Ω–∞–ª –±—ã–ª –ø—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω, –æ–Ω –æ—Å—Ç–∞–Ω–µ—Ç—Å—è."
    )

    kb = InlineKeyboardBuilder()
    delete_text = "–£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª" if kind == "–ö–∞–Ω–∞–ª" else "–£–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø—É"
    kb.button(text=delete_text, callback_data=f"mych:del:{oc_id}")
    kb.button(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="mych:dismiss")
    kb.adjust(2)

    await cq.message.answer(text, reply_markup=kb.as_markup(), parse_mode="HTML")
    await cq.answer()

# ---- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" ----
@dp.callback_query(F.data == "mych:dismiss")
async def cb_my_channel_dismiss(cq: CallbackQuery):
    try:
        await cq.message.delete()
    except Exception:
        try:
            await cq.message.edit_reply_markup()
        except Exception:
            pass
    await cq.answer()

# –£–¥–∞–ª–µ–Ω–∏–µ
@dp.callback_query(F.data.startswith("mych:del:"))
async def cb_my_channel_delete(cq: CallbackQuery):
    _, _, sid = cq.data.split(":")
    oc_id = int(sid)

    async with session_scope() as s:
        res = await s.execute(
            stext("SELECT title, chat_id FROM organizer_channels WHERE id=:id"),
            {"id": oc_id}
        )
        row = res.first()
        if not row:
            await cq.answer("–ö–∞–Ω–∞–ª/–≥—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", show_alert=True)
            return

        title, chat_id = row
        # –ú—è–≥–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ
        await s.execute(
            stext("UPDATE organizer_channels SET status='deleted' WHERE id=:id"),
            {"id": oc_id}
        )

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø (–∫–∞–Ω–∞–ª –∏–ª–∏ –≥—Ä—É–ø–ø–∞)
    kind = "–∫–∞–Ω–∞–ª" if str(chat_id).startswith("-100") else "–≥—Ä—É–ø–ø–∞"

    # –°–æ–æ–±—â–∞–µ–º –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ –∏ –¥–∞—ë–º –≤—ã–±–æ—Ä
    text = f"{kind.capitalize()} <b>{title}</b> –±—ã–ª —É–¥–∞–ª—ë–Ω."
    kb = InlineKeyboardBuilder()
    kb.button(text="–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", callback_data=f"mych:restore:{oc_id}:{kind}")
    kb.button(text="–û—Ç–º–µ–Ω–∞", callback_data="mych:cancel_after_del")
    kb.adjust(2)

    await cq.message.answer(text, reply_markup=kb.as_markup(), parse_mode="HTML")
    await cq.answer()

# –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
@dp.callback_query(F.data.startswith("mych:restore:"))
async def cb_my_channel_restore(cq: CallbackQuery):
    try:
        _, _, sid, kind = cq.data.split(":")
        oc_id = int(sid)
    except Exception:
        await cq.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.", show_alert=True)
        return

    async with session_scope() as s:
        await s.execute(
            stext("UPDATE organizer_channels SET status='ok' WHERE id=:id"),
            {"id": oc_id}
        )

    text = f"{kind.capitalize()} –±—ã–ª –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω."
    kb = InlineKeyboardBuilder()
    # –ø–æ–¥–±–µ—Ä—ë–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –Ω–∞–¥–ø–∏—Å—å –¥–ª—è –ø–æ–≤—Ç–æ—Ä–∞ —É–¥–∞–ª–µ–Ω–∏—è
    delete_text = "–£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª" if kind == "–∫–∞–Ω–∞–ª" else "–£–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø—É"
    kb.button(text=delete_text, callback_data=f"mych:del:{oc_id}")
    kb.button(text="–û—Ç–º–µ–Ω–∞", callback_data="mych:cancel_after_del")
    kb.adjust(2)

    await cq.message.answer(text, reply_markup=kb.as_markup(), parse_mode="HTML")
    await cq.answer()

# –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è
@dp.callback_query(F.data == "mych:cancel_after_del")
async def cb_my_channel_cancel_after_del(cq: CallbackQuery):
    # –£–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    try:
        await cq.message.delete()
    except Exception:
        pass
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤/–≥—Ä—É–ø–ø
    rows = await get_user_org_channels(cq.from_user.id)
    text = "–í–∞—à–∏ –∫–∞–Ω–∞–ª—ã / –≥—Ä—É–ø–ø—ã:\n\n" + ("" if rows else "–ü–æ–∫–∞ –ø—É—Å—Ç–æ.")
    await cq.message.answer(text, reply_markup=kb_my_channels(rows))
    await cq.answer()

# –û—Ç–º–µ–Ω–∞ ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º, —á—Ç–æ–±—ã ¬´–∫–∞—Ä—Ç–æ—á–∫–∞¬ª —Å—Ö–ª–æ–ø–Ω—É–ª–∞—Å—å –¥–∏–∞–ª–æ–≥–æ–º
@dp.callback_query(F.data == "mych:cancel")
async def cb_my_channel_cancel(cq: CallbackQuery):
    await cq.answer("–û—Ç–º–µ–Ω–µ–Ω–æ")

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö "–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª/–≥—Ä—É–ø–ø—É" –≤ —Ä–∞–∑–¥–µ–ª–µ "–ú–æ–∏ –∫–∞–Ω–∞–ª—ã"

@dp.callback_query(F.data == "mych:add_channel")
async def cb_mych_add_channel(cq: CallbackQuery, state: FSMContext):
    # 1) –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ-–±–ª–æ–∫ + –∫–Ω–æ–ø–∫—É ¬´–û—Ç–º–µ–Ω–∞¬ª
    await cq.message.answer(ADD_CHAT_HELP_HTML, parse_mode="HTML", reply_markup=kb_add_cancel())
    # 2) –í—ã—Å—Ç–∞–≤–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω–æ–µ –æ–∫–Ω–æ –≤—ã–±–æ—Ä–∞ (–∫–Ω–æ–ø–∫–∏ –ø–æ–¥ —Å—Ç—Ä–æ–∫–æ–π –ø–æ–∏—Å–∫–∞)
    INVISIBLE = "\u2060"
    await cq.message.answer(INVISIBLE, reply_markup=chooser_reply_kb())
    await cq.answer()

@dp.callback_query(F.data == "mych:add_group")
async def cb_mych_add_group(cq: CallbackQuery, state: FSMContext):
    await cq.message.answer(ADD_CHAT_HELP_HTML, parse_mode="HTML", reply_markup=kb_add_cancel())
    INVISIBLE = "\u2060"
    await cq.message.answer(INVISIBLE, reply_markup=chooser_reply_kb())
    await cq.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ "–û—Ç–º–µ–Ω–∞" –¥–ª—è –∏–Ω—Ñ–æ-–±–ª–æ–∫–∞

@dp.callback_query(F.data == "add:cancel")
async def cb_add_cancel(cq: CallbackQuery):
    # 1) –£–¥–∞–ª—è–µ–º –¢–û–õ–¨–ö–û –∏–Ω—Ñ–æ-—Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º
    try:
        await cq.message.delete()
    except Exception:
        pass

    # 2) –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ã—á–Ω—É—é reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É ¬´–≤–Ω–∏–∑—É¬ª (–±–µ–∑ –Ω–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –≤ —á–∞—Ç–µ)
    INVISIBLE = "\u2060"
    try:
        await cq.message.answer(INVISIBLE, reply_markup=reply_main_kb())
    except Exception:
        pass

    # –ù–∏—á–µ–≥–æ –Ω–µ –ø—Ä–∏—Å—ã–ª–∞–µ–º –∑–∞–Ω–æ–≤–æ —Å–æ ¬´–°–ø–∏—Å–∫–æ–º –∫–∞–Ω–∞–ª–æ–≤¬ª ‚Äî –æ–Ω —É–∂–µ –≤—ã—à–µ –≤ —á–∞—Ç–µ.
    await cq.answer()

# –ö–ª–∏–∫ –ø–æ inline "–°–æ–∑–¥–∞—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à" –≤ –Ω–æ–≤–æ–º –º–µ–Ω—é

@dp.callback_query(F.data == "create")
async def cb_create_inline(cq: CallbackQuery, state: FSMContext):
    await create_giveaway_start(cq.message, state)
    await cq.answer()

# -----------------

@dp.message(Command("events"))
async def cmd_events(m: Message):
    async with session_scope() as s:
        res = await s.execute(
            text("SELECT id, internal_title, status FROM giveaways "
                 "WHERE owner_user_id=:u ORDER BY id DESC"),
            {"u": m.from_user.id}
        )
        row = res.first()

    if not row:
        await m.answer(
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π. –í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à –∏ –æ–Ω –ø–æ—è–≤–∏—Ç—Å—è –∑–¥–µ—Å—å.",
            reply_markup=reply_main_kb()
        )
        return  # <- –í–ù–£–¢–†–ò if

    # —Å—é–¥–∞ –ø–æ–ø–∞–¥—ë–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ row –µ—Å—Ç—å
    await show_event_card(m.chat.id, row[0])

async def show_event_card(chat_id:int, giveaway_id:int):
    async with session_scope() as s:
        gw = await s.get(Giveaway, giveaway_id)

    cap = (f"<b>{gw.internal_title}</b>\n\n{gw.public_description}\n\n"
           f"–°—Ç–∞—Ç—É—Å: {gw.status}\n–ü–æ–±–µ–¥–∏—Ç–µ–ª–µ–π: {gw.winners_count}\n"
           f"–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {(gw.end_at_utc+timedelta(hours=3)).strftime('%H:%M %d.%m.%Y MSK')}")

    kind, fid = unpack_media(gw.photo_file_id)

    if kind == "photo" and fid:
        await bot.send_photo(chat_id, fid, caption=cap, reply_markup=kb_event_actions(giveaway_id, gw.status))
    elif kind == "animation" and fid:
        await bot.send_animation(chat_id, fid, caption=cap, reply_markup=kb_event_actions(giveaway_id, gw.status))
    elif kind == "video" and fid:
        await bot.send_video(chat_id, fid, caption=cap, reply_markup=kb_event_actions(giveaway_id, gw.status))
    else:
        await bot.send_message(chat_id, cap, reply_markup=kb_event_actions(giveaway_id, gw.status))

@dp.message(Command("subscriptions"))
async def cmd_subs(m:Message):
    await m.answer("–ß—Ç–æ–±—ã –ø–æ–¥–∫–ª—é—á–∏—Ç—å –∫–∞–Ω–∞–ª, –¥–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª (–≤ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º ‚Äî –∞–¥–º–∏–Ω–æ–º), "
                   "–∑–∞—Ç–µ–º –ø–µ—Ä–µ—à–ª–∏—Ç–µ —Å—é–¥–∞ –ª—é–±–æ–π –ø–æ—Å—Ç –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ @username –∫–∞–Ω–∞–ª–∞.")


from aiogram.utils.keyboard import InlineKeyboardBuilder

@dp.callback_query(F.data.startswith("ev:"))
async def event_cb(cq:CallbackQuery):
    _, action, sid = cq.data.split(":")
    gid = int(sid)
    if action=="channels":
        async with session_scope() as s:
            gw = await s.get(Giveaway, gid)
            res = await s.execute(stext("SELECT id, title, chat_id FROM organizer_channels WHERE owner_user_id=:u"),{"u":gw.owner_user_id})
            channels = res.all()
            if not channels:
                await cq.message.answer("–ù–µ—Ç –∫–∞–Ω–∞–ª–æ–≤. –°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ —á–µ—Ä–µ–∑ –ø–µ—Ä–µ—Å—ã–ª–∫—É –ø–æ—Å—Ç–∞ –∏–ª–∏ @username."); return
            await s.execute(stext("DELETE FROM giveaway_channels WHERE giveaway_id=:gid"),{"gid":gid})
            for cid, title, chat_id in channels:
                await s.execute(stext("INSERT INTO giveaway_channels(giveaway_id,channel_id,chat_id,title) VALUES(:g,:c,:chat,:t)"),
                                {"g":gid,"c":cid,"chat":chat_id,"t":title})
        await cq.message.answer("–ö–∞–Ω–∞–ª—ã –ø—Ä–∏–≤—è–∑–∞–Ω—ã. –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å.")
        await show_event_card(cq.message.chat.id, gid)

    elif action=="launch":
        gw = await _launch_and_publish(gid, cq.message)
        if not gw:
            await cq.answer("–†–æ–∑—ã–≥—Ä—ã—à –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
            return
        await cq.message.answer("–†–æ–∑—ã–≥—Ä—ã—à –∑–∞–ø—É—â–µ–Ω.")
        await show_event_card(cq.message.chat.id, gid)

    elif action=="delete":
        async with session_scope() as s:
            gw = await s.get(Giveaway, gid)
            if gw.status != GiveawayStatus.DRAFT:
                await cq.answer("–£–¥–∞–ª—è—Ç—å –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ —á–µ—Ä–Ω–æ–≤–∏–∫.", show_alert=True); return
            await s.execute(stext("DELETE FROM giveaways WHERE id=:gid"),{"gid":gid})
            await s.execute(stext("DELETE FROM giveaway_channels WHERE giveaway_id=:gid"),{"gid":gid})
        await cq.message.answer("–ß–µ—Ä–Ω–æ–≤–∏–∫ —É–¥–∞–ª—ë–Ω.")

    elif action=="status":
        await show_stats(cq.message.chat.id, gid)

    elif action=="cancel":
        await cancel_giveaway(gid, cq.from_user.id, reason=None)
        await cq.message.answer("–†–æ–∑—ã–≥—Ä—ã—à –æ—Ç–º–µ–Ω—ë–Ω.")
        await show_event_card(cq.message.chat.id, gid)

# ===== –ö–∞—Ä—Ç–æ—á–∫–∞-–ø—Ä–µ–≤—å—é –º–µ–¥–∏–∞ =====

@dp.callback_query(CreateFlow.MEDIA_PREVIEW, F.data == "preview:move:up")
async def preview_move_up(cq: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    if not data.get("media_url"):
        await cq.answer("–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å —Ä–∞–º–∫–æ–π.", show_alert=True)
        return
    await state.update_data(media_top=True)
    await render_link_preview_message(cq.message, state, reedit=True)
    await cq.answer()

@dp.callback_query(CreateFlow.MEDIA_PREVIEW, F.data == "preview:move:down")
async def preview_move_down(cq: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    if not data.get("media_url"):
        await cq.answer("–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å —Ä–∞–º–∫–æ–π.", show_alert=True)
        return
    await state.update_data(media_top=False)
    await render_link_preview_message(cq.message, state, reedit=True)
    await cq.answer()

@dp.callback_query(CreateFlow.MEDIA_PREVIEW, F.data == "preview:change")
async def preview_change_media(cq: CallbackQuery, state: FSMContext):
    await state.set_state(CreateFlow.MEDIA_UPLOAD)
    await cq.message.answer(MEDIA_INSTRUCTION, parse_mode="HTML", reply_markup=kb_skip_media())
    await cq.answer()

#--- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ë–ï–ó –º–µ–¥–∏–∞ ---
@dp.callback_query(CreateFlow.MEDIA_PREVIEW, F.data == "preview:add_media")
async def preview_add_media(cq: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ ¬´–î–æ–±–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ/gif/–≤–∏–¥–µ–æ¬ª
    –∏–∑ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –±–µ–∑ –º–µ–¥–∏–∞.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —à–∞–≥ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞.
    """
    # –ü–µ—Ä–µ–≤–æ–¥–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ –Ω–∞ —à–∞–≥ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–¥–∏–∞
    await state.set_state(CreateFlow.MEDIA_UPLOAD)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –∑–∞–≥—Ä—É–∑–∫–µ
    await cq.message.answer(
        MEDIA_INSTRUCTION,
        parse_mode="HTML",
        reply_markup=kb_skip_media()  # –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª / ¬´–û—Ç–º–µ–Ω–∞¬ª
    )

    await cq.answer()

#--- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –° –º–µ–ª–∏–∞ ---
@dp.callback_query(CreateFlow.MEDIA_PREVIEW, F.data == "preview:continue")
async def preview_continue(cq: CallbackQuery, state: FSMContext):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–µ—Ä–Ω–æ–≤–∏–∫ –∏ —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
    —Å –∫–Ω–æ–ø–∫–æ–π ¬´–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª/–≥—Ä—É–ø–ø—É¬ª, –∫–∞–∫ –≤ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–µ.
    –¢–∞–∫–∂–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º cq.answer(), —á—Ç–æ–±—ã –ø–æ–≥–∞—Å–∏—Ç—å ¬´–≤–µ—Ä—Ç—É—à–∫—É¬ª.
    """
    # –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π —Å–ø—Ä—è—á–µ–º —Å—Ç–∞—Ä—ã–µ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–æ–º
    try:
        await cq.message.edit_reply_markup()
    except Exception:
        pass

    data = await state.get_data()

    owner_id = data.get("owner")
    title    = (data.get("title") or "").strip()
    desc     = (data.get("desc")  or "").strip()
    winners  = int(data.get("winners_count") or 1)
    end_at   = data.get("end_at_utc")
    photo_id = data.get("photo")  # pack_media(..) | None

    if not (owner_id and title and end_at):
        await cq.message.answer("–ü–æ—Ö–æ–∂–µ, —à–∞–≥–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é. –ù–∞–±–µ—Ä–∏—Ç–µ /create –∏ –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        await state.clear()
        await cq.answer()
        return

    # 1) —Å–æ–∑–¥–∞—ë–º —á–µ—Ä–Ω–æ–≤–∏–∫ –∏ –ø–æ–ª—É—á–∞–µ–º –µ–≥–æ id
    async with session_scope() as s:
        gw = Giveaway(
            owner_user_id=owner_id,
            internal_title=title,
            public_description=desc,
            photo_file_id=photo_id,
            end_at_utc=end_at,
            winners_count=winners,
            status=GiveawayStatus.DRAFT
        )
        s.add(gw)
        await s.flush()          # —á—Ç–æ–±—ã —Å—Ä–∞–∑—É –ø–æ—è–≤–∏–ª—Å—è gw.id
        new_id = gw.id

    # 2) —á–∏—Å—Ç–∏–º FSM
    await state.clear()

    # 3) –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —ç–∫—Ä–∞–Ω-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ + –∫–Ω–æ–ø–∫—É ¬´–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª/–≥—Ä—É–ø–ø—É¬ª
    await cq.message.answer(
        CONNECT_INVITE_TEXT,
        reply_markup=build_connect_invite_kb(new_id)
    )

    # 4) –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≥–∞—Å–∏–º ¬´–≤–µ—Ä—Ç—É—à–∫—É¬ª –Ω–∞ –∫–Ω–æ–ø–∫–µ
    await cq.answer()

# ===== –≠–∫—Ä–∞–Ω –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤ (–ø–æ –∫–Ω–æ–ø–∫–µ "–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª/–≥—Ä—É–ø–ø—É") =====

@dp.callback_query(F.data.startswith("raffle:connect_channels:"))
async def cb_connect_channels(cq: CallbackQuery):
    # data: raffle:connect_channels:<event_id>
    _, _, sid = cq.data.split(":")
    event_id = int(sid)

    # –¥–æ—Å—Ç–∞—ë–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–æ–∑—ã–≥—Ä—ã—à–µ, –≤—Å–µ –∫–∞–Ω–∞–ª—ã –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∏ —É–∂–µ –ø—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω–Ω—ã–µ –∫ —ç—Ç–æ–º—É —Ä–æ–∑—ã–≥—Ä—ã—à—É
    async with session_scope() as s:
        gw = await s.get(Giveaway, event_id)
        if not gw:
            await cq.answer("–†–æ–∑—ã–≥—Ä—ã—à –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
            return

        # –≤—Å–µ –∫–∞–Ω–∞–ª—ã/–≥—Ä—É–ø–ø—ã, –ø–æ–¥–∫–ª—é—á—ë–Ω–Ω—ã–µ –∫ –±–æ—Ç—É —É –≤–ª–∞–¥–µ–ª—å—Ü–∞
        res = await s.execute(
            stext("SELECT id, title FROM organizer_channels WHERE owner_user_id=:u AND status='ok'"),
            {"u": gw.owner_user_id}
        )
        channels = [(r[0], r[1]) for r in res.fetchall()]

        # –Ω–∞–±–æ—Ä id –∫–∞–Ω–∞–ª–æ–≤, —É–∂–µ –ø—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω–Ω—ã—Ö –∫ —ç—Ç–æ–º—É —Ä–æ–∑—ã–≥—Ä—ã—à—É
        res = await s.execute(
            stext("SELECT channel_id FROM giveaway_channels WHERE giveaway_id=:g"),
            {"g": event_id}
        )
        attached_ids = {r[0] for r in res.fetchall()}

        # —Å–ø–∏—Å–æ–∫ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –±–ª–æ–∫–∞ (—Å username ‚Üí –¥–µ–ª–∞–µ–º —Å—Å—ã–ª–∫—É)
        res = await s.execute(
            stext("""
                SELECT gc.title, oc.username, gc.chat_id
                FROM giveaway_channels gc
                LEFT JOIN organizer_channels oc ON oc.id = gc.channel_id
                WHERE gc.giveaway_id = :g
                ORDER BY gc.id
            """),
            {"g": event_id}
        )
        attached_list = [(r[0], r[1], r[2]) for r in res.fetchall()]

    text_block = build_connect_channels_text(gw.internal_title, attached_list)
    kb = build_channels_menu_kb(event_id, channels, attached_ids)
    
    try:
        await cq.message.edit_text(text_block, reply_markup=kb, parse_mode="HTML")
    except Exception:
        await cq.message.answer(text_block, reply_markup=kb, parse_mode="HTML")
    await cq.answer()

@dp.callback_query(F.data.startswith("raffle:attach:"))
async def cb_attach_channel(cq: CallbackQuery):
    # data: raffle:attach:<event_id>:<organizer_channel_id>
    try:
        _, _, sid, scid = cq.data.split(":")
        event_id = int(sid)
        org_id = int(scid)
    except Exception:
        await cq.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.", show_alert=True)
        return

    # –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ: –µ—Å–ª–∏ —É–∂–µ –ø—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω ‚Äî —Å–Ω–∏–º–∞–µ–º; –∏–Ω–∞—á–µ –ø—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º
    async with session_scope() as s:
        gw = await s.get(Giveaway, event_id)
        if not gw:
            await cq.answer("–†–æ–∑—ã–≥—Ä—ã—à –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
            return

        # –±–µ—Ä—ë–º –¥–∞–Ω–Ω—ã–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –∏–∑ organizer_channels
        rec = await s.execute(
            stext("SELECT id, chat_id, title FROM organizer_channels WHERE id=:id AND status='ok'"),
            {"id": org_id}
        )
        row = rec.first()
        if not row:
            await cq.answer("–ö–∞–Ω–∞–ª/–≥—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", show_alert=True)
            return

        oc_id, chat_id, title = row

        # –ø—Ä–æ–≤–µ—Ä–∏–º ‚Äî —É–∂–µ –ø—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω?
        exists = await s.execute(
            stext("SELECT id FROM giveaway_channels WHERE giveaway_id=:g AND channel_id=:c"),
            {"g": event_id, "c": oc_id}
        )
        link = exists.first()

        if link:
            # —É–±—Ä–∞—Ç—å –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏–µ
            await s.execute(
                stext("DELETE FROM giveaway_channels WHERE giveaway_id=:g AND channel_id=:c"),
                {"g": event_id, "c": oc_id}
            )
        else:
            # –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏–µ
            await s.execute(
                stext("INSERT INTO giveaway_channels(giveaway_id, channel_id, chat_id, title) "
                      "VALUES(:g, :c, :chat, :t)"),
                {"g": event_id, "c": oc_id, "chat": chat_id, "t": title}
            )

        # –ø–µ—Ä–µ—Å–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∏
        res = await s.execute(
            stext("SELECT id, title FROM organizer_channels WHERE owner_user_id=:u AND status='ok'"),
            {"u": gw.owner_user_id}
        )
        channels = [(r[0], r[1]) for r in res.fetchall()]

        res = await s.execute(
            stext("SELECT channel_id FROM giveaway_channels WHERE giveaway_id=:g"),
            {"g": event_id}
        )
        attached_ids = {r[0] for r in res.fetchall()}

        res = await s.execute(
            stext("""
                SELECT gc.title, oc.username, gc.chat_id
                FROM giveaway_channels gc
                LEFT JOIN organizer_channels oc ON oc.id = gc.channel_id
                WHERE gc.giveaway_id = :g
                ORDER BY gc.id
            """),
            {"g": event_id}
        )
        attached_list = [(r[0], r[1], r[2]) for r in res.fetchall()]

    # —Ç–µ–∫—Å—Ç–æ–≤—ã–π –±–ª–æ–∫ + –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å ¬´–≥–∞–ª–æ—á–∫–∞–º–∏¬ª
    new_text = build_connect_channels_text(gw.internal_title, attached_list)
    new_kb = build_channels_menu_kb(event_id, channels, attached_ids)

    # –ø—Ä–æ–±—É–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–µ—Å–ª–∏ –º–æ–∂–Ω–æ), –∏–Ω–∞—á–µ —à–ª—ë–º –Ω–æ–≤–æ–µ
    try:
        await cq.message.edit_text(new_text, reply_markup=new_kb, parse_mode="HTML")
    except Exception:
        await cq.message.answer(new_text, reply_markup=new_kb, parse_mode="HTML")

    await cq.answer("–ì–æ—Ç–æ–≤–æ")

@dp.callback_query(F.data.startswith("raffle:add_channel:"))
async def cb_add_channel(cq: CallbackQuery, state: FSMContext):
    _, _, sid = cq.data.split(":")
    await state.update_data(chooser_event_id=int(sid))

    await cq.message.answer(ADD_CHAT_HELP_HTML, parse_mode="HTML", reply_markup=kb_add_cancel())
    INVISIBLE = "\u2060"
    await cq.message.answer(INVISIBLE, reply_markup=chooser_reply_kb())
    await cq.answer()

@dp.callback_query(F.data.startswith("raffle:add_group:"))
async def cb_add_group(cq: CallbackQuery, state: FSMContext):
    _, _, sid = cq.data.split(":")
    await state.update_data(chooser_event_id=int(sid))

    await cq.message.answer(ADD_CHAT_HELP_HTML, parse_mode="HTML", reply_markup=kb_add_cancel())
    INVISIBLE = "\u2060"
    await cq.message.answer(INVISIBLE, reply_markup=chooser_reply_kb())
    await cq.answer()

@dp.callback_query(F.data.startswith("raffle:start:"))
async def cb_start_raffle(cq: CallbackQuery):
    """
    –ù–∏—á–µ–≥–æ –ø–æ–∫–∞ –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ–º ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–≤–∞ –±–ª–æ–∫–∞:
      1) –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä (—Ç–æ—á—å-–≤-—Ç–æ—á—å –∫–∞–∫ –ø—Ä–∏ –æ–±—ã—á–Ω–æ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–µ, —Å link-preview –∏–ª–∏ –±–µ–∑ –º–µ–¥–∏–∞);
      2) —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏ ¬´–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à¬ª / ¬´–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞¬ª.
    """
    _, _, sid = cq.data.split(":")
    gid = int(sid)

    # –¥–æ—Å—Ç–∞—ë–º —Ä–æ–∑—ã–≥—Ä—ã—à
    async with session_scope() as s:
        gw = await s.get(Giveaway, gid)
        if not gw:
            await cq.answer("–†–æ–∑—ã–≥—Ä—ã—à –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
            return

    # 1) –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Ç–µ–º –∂–µ —Å–ø–æ—Å–æ–±–æ–º, —á—Ç–æ –∏ —Ä–∞–Ω–µ–µ
    await _send_launch_preview_message(cq.message, gw)

    # 2) —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –±–ª–æ–∫
    await cq.message.answer(
        build_final_check_text(),
        reply_markup=kb_launch_confirm(gid),
        parse_mode="HTML"
    )

    await cq.answer()

#--- –•–µ–ª–ø–µ—Ä ---
async def _launch_and_publish(gid: int, message: types.Message):
    """
    –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–±–æ—á–∏–π –∑–∞–ø—É—Å–∫:
      - —Å—Ç–∞–≤–∏–º —Å—Ç–∞—Ç—É—Å ACTIVE,
      - –ø–ª–∞–Ω–∏—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ,
      - –ø—É–±–ª–∏–∫—É–µ–º –ø–æ—Å—Ç –ë–ï–ó –ö–ù–û–ü–û–ö –≤ –ø—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–∞—Ö/–≥—Ä—É–ø–ø–∞—Ö.
    """
    # 1) —á–∏—Ç–∞–µ–º —Ä–æ–∑—ã–≥—Ä—ã—à –∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º
    async with session_scope() as s:
        gw = await s.get(Giveaway, gid)
        if not gw:
            await message.answer("–†–æ–∑—ã–≥—Ä—ã—à –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            logging.error("GW %s not found, abort publish", gid)
            return None
        if getattr(gw, "status", None) != GiveawayStatus.ACTIVE:
            gw.status = GiveawayStatus.ACTIVE
            s.add(gw)
            logging.info("GW %s status -> ACTIVE", gid)

    # 2) –ø–ª–∞–Ω–∏—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
    try:
        run_dt = gw.end_at_utc  # UTC
        scheduler.add_job(
            func=finalize_and_draw_job,
            trigger=DateTrigger(run_date=run_dt),
            args=[gid],
            id=f"final_{gid}",
            replace_existing=True,
        )
        logging.info("Scheduled finalize job id=final_%s at %s (UTC)", gid, run_dt)
    except Exception as e:
        logging.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ %s: %s", gid, e)

    # 3) –±–µ—Ä—ë–º –ø—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω–Ω—ã–µ —á–∞—Ç—ã
    async with session_scope() as s:
        res = await s.execute(
            stext("SELECT chat_id FROM giveaway_channels WHERE giveaway_id=:g"),
            {"g": gid}
        )
        chat_ids = [row[0] for row in res.fetchall()]

    logging.info("GW %s: attached chats = %s", gid, chat_ids)

    # 4) –µ—Å–ª–∏ –ø—É—Å—Ç–æ ‚Äî —Å–æ–æ–±—â–∞–µ–º –∏ –≤—ã—Ö–æ–¥–∏–º
    if not chat_ids:
        await message.answer(
            "–ö —ç—Ç–æ–º—É —Ä–æ–∑—ã–≥—Ä—ã—à—É –ø–æ–∫–∞ –Ω–µ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞/–≥—Ä—É–ø–ø—ã.\n"
            "–ù–∞–∂–º–∏ ¬´–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª/–≥—Ä—É–ø–ø—É¬ª, –æ—Ç–º–µ—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω (–¥–æ–ª–∂–Ω–∞ –ø–æ—è–≤–∏—Ç—å—Å—è ¬´‚úÖ¬ª), –∏ –ø–æ–≤—Ç–æ—Ä–∏ –∑–∞–ø—É—Å–∫."
        )
        return None

    # 5) —Å–æ–±–∏—Ä–∞–µ–º –¢–û–õ–¨–ö–û —Ç–µ–∫—Å—Ç (–±–µ–∑ –∫–Ω–æ–ø–æ–∫)
    end_at_msk_dt = gw.end_at_utc.astimezone(MSK_TZ)
    end_at_msk_str = end_at_msk_dt.strftime("%H:%M %d.%m.%Y")
    days_left = max(0, (end_at_msk_dt.date() - datetime.now(MSK_TZ).date()).days)

    # –í–ê–ñ–ù–û: _compose_preview_text –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã: (title, prizes)
    preview_text = _compose_preview_text(
        "",
        gw.winners_count,
        desc_html=(gw.public_description or ""),
        end_at_msk=end_at_msk_str,
        days_left=days_left,
    )

    # 6) –ø—É–±–ª–∏–∫—É–µ–º –≤ –∫–∞–∂–¥–æ–º —á–∞—Ç–µ ‚Äî –° –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π ¬´–£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å¬ª –∏ –ø–æ–ø—ã—Ç–∫–æ–π link-preview
    kind, file_id = unpack_media(gw.photo_file_id)
    for chat_id in chat_ids:
        try:
            # --- –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å ¬´—Ñ–∏–æ–ª–µ—Ç–æ–≤—É—é —Ä–∞–º–∫—É¬ª –∫–∞–∫ –≤ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–µ ---
            if file_id:
                # –ø–æ–¥–±–∏—Ä–∞–µ–º ¬´–∏–º—è¬ª (–≤–∞–∂–Ω–æ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ Content-Type)
                if kind == "photo":
                    suggested = "image.jpg"
                elif kind == "animation":
                    suggested = "animation.mp4"
                elif kind == "video":
                    suggested = "video.mp4"
                else:
                    suggested = "file.bin"

                # –≤—ã–≥—Ä—É–∂–∞–µ–º –∏–∑ TG –≤ S3 –∏ —Å–æ–±–∏—Ä–∞–µ–º –Ω–∞—à preview_url
                key, _s3_url = await file_id_to_public_url_via_s3(bot, file_id, suggested)
                preview_url = _make_preview_url(key, gw.internal_title or "", gw.public_description or "")

                hidden_link = f'<a href="{preview_url}">&#8203;</a>'
                full_text = f"{preview_text}\n\n{hidden_link}"

                lp = LinkPreviewOptions(
                    is_disabled=False,
                    prefer_large_media=True,
                    prefer_small_media=False,
                    show_above_text=False,  # –º–µ–¥–∏–∞ —Å–Ω–∏–∑—É, –∫–∞–∫ –≤ –Ω–∞—à–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω–æ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–µ
                )

                await bot.send_message(
                    chat_id,
                    full_text,
                    link_preview_options=lp,
                    parse_mode="HTML",
                    reply_markup=kb_public_participate(gid, for_channel=True),
                )
            else:
                # –º–µ–¥–∏–∞ –Ω–µ—Ç ‚Äî –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç + –∫–Ω–æ–ø–∫–∞
                await bot.send_message(
                    chat_id,
                    preview_text,
                    reply_markup=kb_public_participate(gid, for_channel=True),
                )

        except Exception as e:
            logging.warning("Link-preview –Ω–µ –≤—ã—à–µ–ª –≤ —á–∞—Ç–µ %s (%s), –ø—Ä–æ–±—É—é fallback-–º–µ–¥–∏–∞...", chat_id, e)
            # --- Fallback: –Ω–∞—Ç–∏–≤–Ω–æ–µ –º–µ–¥–∏–∞ —Å —Ç–æ–π –∂–µ –ø–æ–¥–ø–∏—Å—å—é + –∫–Ω–æ–ø–∫–∞ ---
            try:
                if kind == "photo" and file_id:
                    await bot.send_photo(chat_id, file_id, caption=preview_text, reply_markup=kb_public_participate(gid, for_channel=True))
                elif kind == "animation" and file_id:
                    await bot.send_animation(chat_id, file_id, caption=preview_text, reply_markup=kb_public_participate(gid, for_channel=True))
                elif kind == "video" and file_id:
                    await bot.send_video(chat_id, file_id, caption=preview_text, reply_markup=kb_public_participate(gid, for_channel=True))
                else:
                    await bot.send_message(
                        chat_id,
                        preview_text,
                        reply_markup=kb_public_participate(gid, for_channel=True),
                    )
            except Exception as e2:
                logging.warning("–ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ—Å—Ç–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å –≤ —á–∞—Ç–µ %s: %s", chat_id, e2)

    return gw

#--- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ ---
@dp.callback_query(F.data.startswith("launch:do:"))
async def cb_launch_do(cq: CallbackQuery):
    await cq.answer()
    try:
        await cq.message.edit_reply_markup()
    except Exception:
        pass

    try:
        gid = int(cq.data.split(":")[2])
    except Exception:
        await cq.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à –¥–ª—è –∑–∞–ø—É—Å–∫–∞.")
        return

    gw = await _launch_and_publish(gid, cq.message)
    if not gw:
        return

    from html import escape as _escape
    title_html = _escape(gw.internal_title or "")
    await cq.message.answer(f"‚úÖ –†–æ–∑—ã–≥—Ä—ã—à <b>{title_html}</b> –∑–∞–ø—É—â–µ–Ω!")
    await cq.message.answer(
    "–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª, –≥–¥–µ –∫–æ–º–∞–Ω–¥–∞ –ø—É–±–ª–∏–∫—É–µ—Ç –≤–∞–∂–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –æ –±–æ—Ç–µ –∏ –∞–Ω–æ–Ω—Å—ã –Ω–æ–≤–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞:\n"
    "https://t.me/prizeme_official_news"
)

#--- –ß—Ç–æ=-—Ç–æ –¥—Ä—É–≥–æ–µ (—É–∑–Ω–∞—Ç—å –ø–æ—Ç–æ–º) ---

@dp.callback_query(F.data.startswith("raffle:settings_disabled:"))
async def cb_settings_disabled(cq: CallbackQuery):
    await cq.answer("–†–∞–∑–¥–µ–ª ¬´–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞¬ª —Å–∫–æ—Ä–æ –ø–æ—è–≤–∏—Ç—Å—è ‚úÖ", show_alert=True)


@dp.callback_query(F.data.startswith("raffle:noop:"))
async def cb_noop(cq: CallbackQuery):
    # –ü—Ä–æ—Å—Ç–æ –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∫–Ω–æ–ø–æ–∫-¬´–∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤¬ª –ø–æ–¥–∫–ª—é—á—ë–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
    await cq.answer("–≠—Ç–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –∫–Ω–æ–ø–∫–∞.")

async def show_stats(chat_id:int, gid:int):
    async with session_scope() as s:
        res = await s.execute(stext("SELECT COUNT(*) FROM entries WHERE giveaway_id=:gid"),{"gid":gid})
        total = res.scalar_one()
        res = await s.execute(stext("SELECT COUNT(*) FROM entries WHERE giveaway_id=:gid AND final_ok=1"),{"gid":gid})
        ok_final = res.scalar_one() or 0
        gw = await s.get(Giveaway, gid)
    text_stat = (f"<b>–°—Ç–∞—Ç—É—Å:</b> {gw.status}\n"
                 f"<b>–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–≤—Å–µ–≥–æ –±–∏–ª–µ—Ç–æ–≤):</b> {total}\n"
                 f"<b>–í –ø—É–ª–µ —Ñ–∏–Ω–∞–ª–∞:</b> {ok_final}\n"
                 f"<b>commit:</b> <code>{gw.commit_hash or '-'}</code>\n")
    await bot.send_message(chat_id, text_stat)

@dp.callback_query(F.data.startswith("u:check:"))
async def user_check(cq:CallbackQuery):
    gid = int(cq.data.split(":")[2])
    ok, details = await check_membership_on_all(bot, cq.from_user.id, gid)
    lines = [("‚úÖ " if okk else "‚ùå ")+t for t,okk in details]
    await cq.message.answer("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏:\n"+"\n".join(lines),
                            reply_markup=kb_participate(gid, allow=ok))

@dp.callback_query(F.data.startswith("u:join:"))
async def user_join(cq:CallbackQuery):
    gid = int(cq.data.split(":")[2])
    async with session_scope() as s:
        gw = await s.get(Giveaway, gid)
        if gw.status != GiveawayStatus.ACTIVE:
            await cq.answer("–†–æ–∑—ã–≥—Ä—ã—à –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω.", show_alert=True); return
    ok, details = await check_membership_on_all(bot, cq.from_user.id, gid)
    if not ok:
        await cq.answer("–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", show_alert=True); return
    async with session_scope() as s:
        res = await s.execute(stext("SELECT ticket_code FROM entries WHERE giveaway_id=:gid AND user_id=:u"),
                              {"gid":gid, "u":cq.from_user.id})
        row = res.first()
        if row: code = row[0]
        else:
            for _ in range(5):
                code = gen_ticket_code()
                try:
                    await s.execute(stext(
                        "INSERT INTO entries(giveaway_id,user_id,ticket_code,prelim_ok,prelim_checked_at) "
                        "VALUES (:gid,:u,:code,1,:ts)"
                    ),{"gid":gid,"u":cq.from_user.id,"code":code,"ts":datetime.now(timezone.utc)})
                    break
                except Exception:
                    continue
    await cq.message.answer(f"–í–∞—à –±–∏–ª–µ—Ç –Ω–∞ —Ä–æ–∑—ã–≥—Ä—ã—à: <b>{code}</b>")

async def finalize_and_draw_job(gid: int):
    """
    –§–∏–Ω–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–æ–∑—ã–≥—Ä—ã—à–∞: –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫, –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    """
    logging.info(f"üéØ Starting finalization for giveaway {gid}")
    
    try:
        # 1) –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞
        async with session_scope() as s:
            gw = await s.get(Giveaway, gid)
            if not gw or gw.status != GiveawayStatus.ACTIVE:
                logging.warning(f"Giveaway {gid} not found or not active")
                return
            
            # 2) –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å prelim_ok=1
            res = await s.execute(stext(
                "SELECT user_id, id, ticket_code FROM entries WHERE giveaway_id=:gid AND prelim_ok=1"
            ), {"gid": gid})
            entries = res.all()
        
        logging.info(f"üìä Found {len(entries)} preliminary entries for giveaway {gid}")
        
        # 3) –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫
        eligible = []
        eligible_entries = []
        
        for uid, entry_id, ticket_code in entries:
            ok, details = await check_membership_on_all(bot, uid, gid)
            async with session_scope() as s:
                await s.execute(stext(
                    "UPDATE entries SET final_ok=:ok, final_checked_at=:ts WHERE id=:eid"
                ), {"ok": 1 if ok else 0, "ts": datetime.now(timezone.utc), "eid": entry_id})
            
            if ok:
                eligible.append(uid)
                eligible_entries.append((uid, ticket_code))
                logging.info(f"‚úÖ User {uid} eligible with ticket {ticket_code}")
            else:
                logging.info(f"‚ùå User {uid} not eligible")
        
        logging.info(f"üéØ Eligible users: {len(eligible)}")
        
        # 4) –î–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤—ã–±–æ—Ä –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π
        winners = []
        if eligible and gw.winners_count > 0:
            winners = deterministic_draw(gw.secret, gid, eligible, min(gw.winners_count, len(eligible)))
        
        # 5) –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –≤ –±–∞–∑—É
        async with session_scope() as s:
            rank = 1
            for uid, r, h in winners:
                await s.execute(stext(
                    "INSERT INTO winners(giveaway_id, user_id, rank, hash_used) VALUES(:g, :u, :r, :h)"
                ), {"g": gid, "u": uid, "r": rank, "h": h})
                rank += 1
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ä–æ–∑—ã–≥—Ä—ã—à–∞
            gw.status = GiveawayStatus.FINISHED
            s.add(gw)
        
        logging.info(f"üèÜ Saved {len(winners)} winners for giveaway {gid}")
        
        # 6) –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞
        await notify_organizer(gid, winners, len(eligible))
        
        # 7) –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        await notify_participants(gid, winners, eligible_entries)
        
        logging.info(f"‚úÖ Giveaway {gid} finalized successfully")
        
    except Exception as e:
        logging.error(f"‚ùå Error finalizing giveaway {gid}: {e}")
        # –ü—ã—Ç–∞–µ–º—Å—è —É–≤–µ–¥–æ–º–∏—Ç—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞ –æ–± –æ—à–∏–±–∫–µ
        try:
            async with session_scope() as s:
                gw = await s.get(Giveaway, gid)
                if gw:
                    await bot.send_message(
                        gw.owner_user_id,
                        f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ \"{gw.internal_title}\". "
                        f"–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
                    )
        except Exception as notify_error:
            logging.error(f"Failed to notify organizer about error: {notify_error}")

async def notify_organizer(gid: int, winners: list, eligible_count: int):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–∞"""
    try:
        async with session_scope() as s:
            gw = await s.get(Giveaway, gid)
            if not gw:
                return
            
            # –ü–æ–ª—É—á–∞–µ–º username –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π
            winner_usernames = []
            for winner in winners:
                uid = winner[0]  # (uid, rank, hash)
                try:
                    user = await bot.get_chat(uid)
                    username = f"@{user.username}" if user.username else f"ID: {uid}"
                    winner_usernames.append(f"{username}")
                except Exception as e:
                    winner_usernames.append(f"ID: {uid}")
                    logging.warning(f"Could not get username for {uid}: {e}")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            if winner_usernames:
                winners_text = "\n".join([f"{i+1}. {name}" for i, name in enumerate(winner_usernames)])
                message = (
                    f"üéâ –†–æ–∑—ã–≥—Ä—ã—à \"{gw.internal_title}\" –∑–∞–≤–µ—Ä—à–∏–ª—Å—è!\n\n"
                    f"üìä –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ —Ñ–∏–Ω–∞–ª–µ: {eligible_count}\n"
                    f"üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª–µ–π: {len(winners)}\n\n"
                    f"–°–ø–∏—Å–æ–∫ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π:\n{winners_text}\n\n"
                    f"–°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–±–µ–¥–∏—Ç–µ–ª—è–º–∏ –¥–ª—è –≤—Ä—É—á–µ–Ω–∏—è –ø—Ä–∏–∑–æ–≤."
                )
            else:
                message = (
                    f"üéâ –†–æ–∑—ã–≥—Ä—ã—à \"{gw.internal_title}\" –∑–∞–≤–µ—Ä—à–∏–ª—Å—è!\n\n"
                    f"üìä –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ —Ñ–∏–Ω–∞–ª–µ: {eligible_count}\n"
                    f"üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª–µ–π: {len(winners)}\n\n"
                    "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π."
                )
            
            await bot.send_message(gw.owner_user_id, message)
            logging.info(f"üì® Notified organizer about giveaway {gid}")
            
    except Exception as e:
        logging.error(f"‚ùå Error notifying organizer for giveaway {gid}: {e}")

async def notify_participants(gid: int, winners: list, eligible_entries: list):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–∞"""
    try:
        async with session_scope() as s:
            gw = await s.get(Giveaway, gid)
            if not gw:
                return
            
            winner_ids = [winner[0] for winner in winners]  # winner[0] = user_id
            
            # –ü–æ–ª—É—á–∞–µ–º username –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –¥–ª—è —Å–ø–∏—Å–∫–∞
            winner_usernames = []
            for winner_id in winner_ids:
                try:
                    user = await bot.get_chat(winner_id)
                    username = f"@{user.username}" if user.username else f"–ø–æ–±–µ–¥–∏—Ç–µ–ª—å (ID: {winner_id})"
                    winner_usernames.append(username)
                except Exception:
                    winner_usernames.append(f"–ø–æ–±–µ–¥–∏—Ç–µ–ª—å (ID: {winner_id})")
            
            winners_list_text = ", ".join(winner_usernames) if winner_usernames else "–ø–æ–±–µ–¥–∏—Ç–µ–ª–∏ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã"
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            for user_id, ticket_code in eligible_entries:
                try:
                    if user_id in winner_ids:
                        # –ü–æ–±–µ–¥–∏—Ç–µ–ª—å
                        message = (
                            f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —Å—Ç–∞–ª–∏ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–º –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ \"{gw.internal_title}\".\n\n"
                            f"–í–∞—à –±–∏–ª–µ—Ç <b>{ticket_code}</b> –æ–∫–∞–∑–∞–ª—Å—è –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º.\n\n"
                            f"–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è –≤—Ä—É—á–µ–Ω–∏—è –ø—Ä–∏–∑–∞."
                        )
                    else:
                        # –£—á–∞—Å—Ç–Ω–∏–∫ (–Ω–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—å)
                        message = (
                            f"üèÅ –ó–∞–≤–µ—Ä—à–∏–ª—Å—è —Ä–æ–∑—ã–≥—Ä—ã—à \"{gw.internal_title}\".\n\n"
                            f"–í–∞—à –±–∏–ª–µ—Ç: <b>{ticket_code}</b>\n\n"
                            f"–ú—ã —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º –æ–ø—Ä–µ–¥–µ–ª–∏–ª–∏ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –∏, –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é, "
                            f"–í–∞—à –±–∏–ª–µ—Ç –Ω–µ –±—ã–ª –≤—ã–±—Ä–∞–Ω.\n\n"
                            f"–ü–æ–±–µ–¥–∏—Ç–µ–ª–∏: {winners_list_text}\n\n"
                            f"–£—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ –¥—Ä—É–≥–∏—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–∞—Ö!"
                        )
                    
                    await bot.send_message(user_id, message, parse_mode="HTML")
                    logging.info(f"üì® Notified user {user_id} about giveaway results")
                    
                    # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç—ã Telegram
                    await asyncio.sleep(0.1)
                    
                except Exception as e:
                    logging.warning(f"Could not notify user {user_id}: {e}")
                    continue
                    
        logging.info(f"üì® Notified all participants of giveaway {gid}")
        
    except Exception as e:
        logging.error(f"‚ùå Error notifying participants for giveaway {gid}: {e}")

async def cancel_giveaway(gid:int, by_user_id:int, reason:str|None):
    async with session_scope() as s:
        gw = await s.get(Giveaway, gid)
        if not gw or gw.status!=GiveawayStatus.ACTIVE: return
        gw.status = GiveawayStatus.CANCELLED
        gw.cancelled_at = datetime.now(timezone.utc)
        gw.cancelled_by = by_user_id
    try:
        scheduler.remove_job(f"final_{gid}")
    except Exception:
        pass

#--- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —á–ª–µ–Ω–æ–≤ –∫–∞–Ω–∞–ª–∞ / –≥—Ä—É–ø–ø—ã ---
@dp.my_chat_member()
async def on_my_chat_member(event: ChatMemberUpdated):
    """
    –°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç, –∫–æ–≥–¥–∞ –±–æ—Ç–∞ –¥–æ–±–∞–≤–∏–ª–∏ –∏–ª–∏ —É–¥–∞–ª–∏–ª–∏ –∏–∑ —á–∞—Ç–∞/–∫–∞–Ω–∞–ª–∞.
    –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–∑—É, —á—Ç–æ–±—ã –±–æ—Ç –∑–Ω–∞–ª, –≥–¥–µ –æ–Ω –∞–¥–º–∏–Ω.
    """
    chat = event.chat
    bot_id = event.new_chat_member.user.id
    if bot_id != (await bot.get_me()).id:
        return  # —Å–æ–±—ã—Ç–∏–µ –Ω–µ –¥–ª—è –Ω–∞—Å

    # –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å
    status = event.new_chat_member.status
    user = event.from_user
    title = chat.title or getattr(chat, "full_name", None) or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
    username = getattr(chat, "username", None)
    is_private = 0 if username else 1

    async with Session() as s:
        async with s.begin():
            if status in ("administrator", "member"):
                # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º
                await s.execute(
                    stext("INSERT OR REPLACE INTO organizer_channels("
                            "owner_user_id, chat_id, username, title, is_private, bot_role, status, added_at"
                            ") VALUES (:o, :cid, :u, :t, :p, :r, 'ok', :ts)"),
                    {
                        "o": user.id if user else 0,
                        "cid": chat.id,
                        "u": username,
                        "t": title,
                        "p": int(is_private),
                        "r": status,
                        "ts": datetime.now(timezone.utc),
                    }
                )
            else:
                # –µ—Å–ª–∏ –±–æ—Ç–∞ —É–¥–∞–ª–∏–ª–∏ –∏–∑ —á–∞—Ç–∞
                await s.execute(
                    stext("UPDATE organizer_channels SET status='gone' WHERE chat_id=:cid"),
                    {"cid": chat.id},
                )

    logging.info(f"üîÅ my_chat_member: {chat.title} ({chat.id}) -> {status}")

# ---------------- ENTRYPOINT ----------------
async def main():
    import logging
    logging.basicConfig(level=logging.INFO, format="%(asctime)s [%(levelname)s] %(message)s")

    # 1) –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
    await init_db()
    await ensure_schema()
    logging.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    logging.info(f"DB file in use: {DB_PATH.resolve()}")

    # 2) –∑–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    scheduler.start()
    logging.info("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω")

    # 3) –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram
    me = await bot.get_me()
    # –∑–∞–ø–æ–º–Ω–∏–º username –¥–ª—è deeplink-–∫–Ω–æ–ø–æ–∫ –≤ –∫–∞–Ω–∞–ª–∞—Ö
    global BOT_USERNAME
    BOT_USERNAME = me.username
    logging.info(f"ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∫–∞–∫ @{me.username} (ID: {me.id})")

    # 4) –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
    await set_bot_commands(bot)
    logging.info("‚úÖ –ö–æ–º–∞–Ω–¥—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")

    # 5) –°–Ω–∏–º–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–π —Å—Ç–∞—Ä—ã–π –≤–µ–±—Ö—É–∫
    await bot.delete_webhook(drop_pending_updates=True)
    logging.info("üîÅ Webhook —É–¥–∞–ª—ë–Ω, –≤–∫–ª—é—á–∞—é polling...")

    # 6) –°—Ç–∞—Ä—Ç—É–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π HTTP –¥–ª—è preview_service
    asyncio.create_task(run_internal_server())

    # 7) –ó–∞–ø—É—Å–∫–∞–µ–º polling
    await dp.start_polling(bot, allowed_updates=dp.resolve_used_update_types())

# --- –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π HTTP –¥–ª—è preview_service ---

async def _internal_get_giveaway_info(gid: str, user_id: int):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –º–∏–Ω–∏-–∞–ø–∞:
      - —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ —Å —Ñ–ª–∞–≥–æ–º –ø–æ–¥–ø–∏—Å–∫–∏ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      - –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è (UTC) –∏ —É–∂–µ –≤—ã–¥–∞–Ω–Ω—ã–π –±–∏–ª–µ—Ç (–µ—Å–ª–∏ –µ—Å—Ç—å)
    –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –ø–æ–¥ —Ñ—Ä–æ–Ω—Ç:
      {
        "ok": true,
        "ends_at": "2025-11-11T19:20:00Z",
        "channels": [
            {"title": "...", "username": "mychannel", "link": "https://t.me/mychannel", "is_member": true}
        ],
        "ticket": "ABC123" | null
      }
    """
    # –ø—Ä–∏–≤–æ–¥–∏–º gid –∫ int
    try:
        giveaway_id = int(gid)
    except Exception:
        return {"ok": False, "error": "bad_gid"}

    # —á–∏—Ç–∞–µ–º —Ä–æ–∑—ã–≥—Ä—ã—à –∏ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
    async with session_scope() as s:
        gw = await s.get(Giveaway, giveaway_id)
        if not gw:
            return {"ok": False, "error": "not_found"}

        res = await s.execute(stext("""
            SELECT gc.chat_id, gc.title, oc.username
            FROM giveaway_channels gc
            LEFT JOIN organizer_channels oc ON oc.id = gc.channel_id
            WHERE gc.giveaway_id = :g
            ORDER BY gc.id
        """), {"g": giveaway_id})
        rows = res.fetchall()

        # –µ—Å—Ç—å –ª–∏ —É–∂–µ –±–∏–ª–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        res = await s.execute(
            stext("SELECT ticket_code FROM entries WHERE giveaway_id=:g AND user_id=:u"),
            {"g": giveaway_id, "u": user_id}
        )
        row_ticket = res.first()
        ticket = row_ticket[0] if row_ticket else None

    # –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫–∞–∂–¥–æ–º –∫–∞–Ω–∞–ª–µ
    channels = []
    all_ok = True
    for chat_id, title, username in rows:
        try:
            m = await bot.get_chat_member(chat_id, user_id)
            is_member = m.status in {"member", "administrator", "creator"}
        except Exception:
            is_member = False
        all_ok = all_ok and is_member
        link = f"https://t.me/{username}" if username else None
        channels.append({
            "title": title,
            "username": username,
            "link": link,
            "is_member": is_member,
        })

    return {
        "ok": True,
        "ends_at": gw.end_at_utc.astimezone(timezone.utc).strftime("%Y-%m-%dT%H:%M:%SZ"),
        "channels": channels,
        "ticket": ticket
    }

async def _internal_claim_ticket(gid: str, user_id: int):
    """
    –í—ã–¥–∞—ë—Ç –±–∏–ª–µ—Ç, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã —Ä–æ–∑—ã–≥—Ä—ã—à–∞.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç {ok, ticket} –∏–ª–∏ {ok:false, need=[—Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –±–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏]}.
    """
    try:
        giveaway_id = int(gid)
    except Exception:
        return {"ok": False, "error": "bad_gid"}

    # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–æ–∑—ã–≥—Ä—ã—à –∞–∫—Ç–∏–≤–µ–Ω
    async with session_scope() as s:
        gw = await s.get(Giveaway, giveaway_id)
        if not gw or gw.status != GiveawayStatus.ACTIVE:
            return {"ok": False, "error": "not_active"}

    # –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã (–∏—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ –≥–æ—Ç–æ–≤—ã–π —Ö–µ–ª–ø–µ—Ä)
    all_ok, details = await check_membership_on_all(bot, user_id, giveaway_id)
    if not all_ok:
        # –≤–µ—Ä–Ω—ë–º —Å–ø–∏—Å–æ–∫ —Ç–µ—Ö, –≥–¥–µ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏
        need = [title for (title, ok) in details if not ok]
        return {"ok": False, "need": need}

    # –µ—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –æ–∫ ‚Äî –≤—ã–¥–∞—ë–º (–∏–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π) –±–∏–ª–µ—Ç
    async with session_scope() as s:
        # –µ—Å—Ç—å —É–∂–µ –±–∏–ª–µ—Ç?
        res = await s.execute(
            stext("SELECT ticket_code FROM entries WHERE giveaway_id=:g AND user_id=:u"),
            {"g": giveaway_id, "u": user_id}
        )
        row = res.first()
        if row:
            ticket = row[0]
        else:
            # –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
            for _ in range(5):
                ticket = gen_ticket_code()
                try:
                    await s.execute(stext(
                        "INSERT INTO entries(giveaway_id,user_id,ticket_code,prelim_ok,prelim_checked_at) "
                        "VALUES (:g,:u,:code,1,:ts)"
                    ), {
                        "g": giveaway_id,
                        "u": user_id,
                        "code": ticket,
                        "ts": datetime.now(timezone.utc)
                    })
                    break
                except Exception:
                    # –∫–æ–ª–ª–∏–∑–∏—è –∫–æ–¥–∞ ‚Äî –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â—ë —Ä–∞–∑
                    continue

    return {"ok": True, "ticket": ticket}

def make_internal_app():
    app = web.Application()

    async def giveaway_info(request: web.Request):
        data = await request.json()
        gid = str(data.get("gid") or "")
        user_id = int(data.get("user_id") or 0)
        if not (gid and user_id):
            return web.json_response({"ok": False}, status=400)
        info = await _internal_get_giveaway_info(gid, user_id)
        return web.json_response(info)

    async def claim_ticket(request: web.Request):
        data = await request.json()
        gid = str(data.get("gid") or "")
        user_id = int(data.get("user_id") or 0)
        if not (gid and user_id):
            return web.json_response({"ok": False}, status=400)
        result = await _internal_claim_ticket(gid, user_id)
        return web.json_response(result)

    app.router.add_post("/api/giveaway_info", giveaway_info)
    app.router.add_post("/api/claim_ticket", claim_ticket)
    return app


async def run_internal_server():
    runner = web.AppRunner(make_internal_app())
    await runner.setup()
    site = web.TCPSite(runner, "127.0.0.1", 8088)   # ‚Üê –ª–æ–∫–∞–ª—å–Ω—ã–π –ø–æ—Ä—Ç
    await site.start()
    print("üì° Internal API running on http://127.0.0.1:8088")

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())