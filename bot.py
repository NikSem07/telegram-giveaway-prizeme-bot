import logging
logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s: %(message)s")

import uuid
import mimetypes
import boto3
import asyncio, os, hashlib, random, string
from datetime import datetime, timezone, timedelta
from contextlib import asynccontextmanager
from pathlib import Path
from aiogram.enums import ChatType

from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command, StateFilter
from aiogram.types import (Message, CallbackQuery, InlineKeyboardMarkup,
                           InlineKeyboardButton, InputMediaPhoto)
from aiogram.types import BotCommand
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, KeyboardButtonRequestChat, ChatAdministratorRights
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.utils.keyboard import InlineKeyboardBuilder

from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.date import DateTrigger

from sqlalchemy import (text, String, Integer, BigInteger,
                        Boolean, DateTime, ForeignKey)
from sqlalchemy.ext.asyncio import (create_async_engine, async_sessionmaker)
from sqlalchemy.orm import DeclarativeBase, Mapped, mapped_column

from io import BytesIO
import aiohttp
from aiohttp import ClientSession, ClientTimeout, FormData
from aiogram.types import LinkPreviewOptions

from html import escape
from zoneinfo import ZoneInfo
from dotenv import load_dotenv
load_dotenv()
MEDIA_BASE_URL = os.getenv("MEDIA_BASE_URL", "https://media.prizeme.ru")

import mimetypes
from urllib.parse import urlencode

DESCRIPTION_PROMPT = (
    "<b>–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞:</b>\n\n"
    "–ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–µ –±–æ–ª–µ–µ 2500 —Å–∏–º–≤–æ–ª–æ–≤.\n\n"
    "<i>–ü–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—à–∏—Ç–µ —É—Å–ª–æ–≤–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –¥–ª—è –≤–∞—à–∏—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤.\n"
    "–ü–æ—Å–ª–µ –Ω–∞—á–∞–ª–∞ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –≤–≤–µ–¥—ë–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω\n"
    "–Ω–∞ –≤—Å–µ—Ö —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –Ω–∏–º –∫–∞–Ω–∞–ª–∞—Ö.</i>")

MEDIA_QUESTION = "–•–æ—Ç–∏—Ç–µ –ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ / gif / –≤–∏–¥–µ–æ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ä–æ–∑—ã–≥—Ä—ã—à–∞?"

MEDIA_INSTRUCTION = (
    "<b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ / <i>gif</i> / –≤–∏–¥–µ–æ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ä–æ–∑—ã–≥—Ä—ã—à–∞.</b>\n\n"
    "<i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –¥–æ—Å—Ç–∞–≤–∫—É. –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ \"–Ω–µ—Å–∂–∞—Ç—ã–º\" —Å–ø–æ—Å–æ–±–æ–º (–ù–ï –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç).</i>\n\n"
    "<b>–í–Ω–∏–º–∞–Ω–∏–µ!</b> –í–∏–¥–µ–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ MP4, –∞ –µ–≥–æ —Ä–∞–∑–º–µ—Ä –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 5 –ú–ë."
)

BTN_EVENTS = "–ú–æ–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∏"
BTN_CREATE = "–°–æ–∑–¥–∞—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à"
BTN_ADD_CHANNEL = "–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª"
BTN_ADD_GROUP = "–î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É"
BTN_SUBSCRIPTIONS = "–ü–æ–¥–ø–∏—Å–∫–∏"

# === callbacks for draft flow ===
CB_PREVIEW_CONTINUE = "preview:continue"
CB_TO_CHANNELS_MENU = "draft:to_channels"
CB_OPEN_CHANNELS    = "channels:open"
CB_CHANNEL_ADD      = "channels:add"          # —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —É —Ç–µ–±—è? –æ—Å—Ç–∞–≤—å —Å–≤–æ–π
CB_CHANNEL_START    = "raffle:start"          # –∑–∞–≥–ª—É—à–∫–∞ –Ω–∞ –±—É–¥—É—â–µ–µ
CB_CHANNEL_SETTINGS = "raffle:settings"       # –ø–æ–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞

MSK_TZ = ZoneInfo("Europe/Moscow")

logger_media = logging.getLogger("media")
logger_media.setLevel(logging.DEBUG)

BOT_TOKEN = os.getenv("BOT_TOKEN")
DEFAULT_TZ = os.getenv("TZ", "Europe/Moscow")
S3_ENDPOINT = os.getenv("S3_ENDPOINT")
S3_BUCKET   = os.getenv("S3_BUCKET")
S3_KEY      = os.getenv("S3_ACCESS_KEY")
S3_SECRET   = os.getenv("S3_SECRET_KEY")
S3_REGION   = os.getenv("S3_REGION", "ru-1")

# –¢–µ–∫—Å—Ç—ã —ç–∫—Ä–∞–Ω–æ–≤
CONNECT_INVITE_TEXT = (
    "‚≠êÔ∏è –í–∞—à —Ä–æ–∑—ã–≥—Ä—ã—à —Å–æ–∑–¥–∞–Ω, –æ—Å—Ç–∞–ª–æ—Å—å —Ç–æ–ª—å–∫–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å!\n\n"
    "–ü–æ–¥–∫–ª—é—á–∏—Ç–µ –º–∏–Ω–∏–º—É–º 1 –∫–∞–Ω–∞–ª/–≥—Ä—É–ø–ø—É, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à.\n\n"
    "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ."
)

if not all([S3_ENDPOINT, S3_BUCKET, S3_KEY, S3_SECRET]):
    logging.warning("S3 env not fully set ‚Äî uploads will fail.")


# –¢–µ–∫—Å—Ç—ã —ç–∫—Ä–∞–Ω–æ–≤_2

def build_connect_invite_kb(event_id: int) -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    # NB: –≤ callback –ø–µ—Ä–µ–¥–∞—ë–º id —Ä–æ–∑—ã–≥—Ä—ã—à–∞, —á—Ç–æ–±—ã –ø–æ—Ç–æ–º –ø–æ–Ω–∏–º–∞—Ç—å, –∫ –∫–∞–∫–æ–º—É —Å–æ–±—ã—Ç–∏—é –ø–æ–¥–∫–ª—é—á–∞–µ–º –∫–∞–Ω–∞–ª—ã
    kb.button(text="–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª/–≥—Ä—É–ø–ø—É", callback_data=f"raffle:connect_channels:{event_id}")
    return kb.as_markup()

# –≠–∫—Ä–∞–Ω —Å —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ –∫–∞–Ω–∞–ª–∞–º–∏ –∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏
def build_connect_channels_text(event_title: str | None = None) -> str:
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞–∫ –≤ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–µ
    title = f"üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –∫ —Ä–æ–∑—ã–≥—Ä—ã—à—É \"{event_title}\"" if event_title else "üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –∫ —Ä–æ–∑—ã–≥—Ä—ã—à—É"
    body = (
        f"{title}\n\n"
        "–ü–æ–¥–∫–ª—é—á–∏—Ç—å –∫–∞–Ω–∞–ª –∫ —Ä–æ–∑—ã–≥—Ä—ã—à—É —Å–º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π –æ–±–ª–∞–¥–∞–µ—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º —É—Ä–æ–≤–Ω–µ–º –ø—Ä–∞–≤ –≤ –ø—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω–Ω–æ–º –∫–∞–Ω–∞–ª–µ.\n\n"
        "–ü–æ–¥–∫–ª—é—á—ë–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã:\n"
    )
    return body

def build_channels_menu_kb(
    event_id: int,
    channels: list[tuple[int, str]],
    attached_ids: set[int] | None = None
) -> InlineKeyboardMarkup:
    """
    channels: —Å–ø–∏—Å–æ–∫ (organizer_channel_id, title)
    attached_ids: ids organizer_channels, —É–∂–µ –ø—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω–Ω—ã—Ö –∫ —Ç–µ–∫—É—â–µ–º—É —Ä–æ–∑—ã–≥—Ä—ã—à—É
    """
    attached_ids = attached_ids or set()
    kb = InlineKeyboardBuilder()

    # –ö–Ω–æ–ø–∫–∏ –≤—Å–µ—Ö —Ä–∞–Ω–µ–µ –ø–æ–¥–∫–ª—é—á—ë–Ω–Ω—ã—Ö –∫ –±–æ—Ç—É –∫–∞–Ω–∞–ª–æ–≤/–≥—Ä—É–ø–ø (–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–º —Å–ø–∏—Å–∫–æ–º)
    for ch_id, title in channels:
        mark = "‚úÖ " if ch_id in attached_ids else ""
        kb.button(
            text=f"{mark}{title}",
            callback_data=f"raffle:attach:{event_id}:{ch_id}"
        )
    if channels:
        kb.adjust(1)

    # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ ‚Äî –¥–≤–µ –∫–Ω–æ–ø–∫–∏ —Ä—è–¥–æ–º: "–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª" –∏ "–î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É"
    kb.row(
        InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª", callback_data=f"raffle:add_channel:{event_id}"),
        InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É", callback_data=f"raffle:add_group:{event_id}")
    )

    # –û—Ç–¥–µ–ª—å–Ω—ã–º–∏ —Å—Ç—Ä–æ–∫–∞–º–∏, –≤ –∑–∞–¥–∞–Ω–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
    kb.row(InlineKeyboardButton(text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞", callback_data=f"raffle:settings_disabled:{event_id}"))
    kb.row(InlineKeyboardButton(text="–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à", callback_data=f"raffle:start:{event_id}"))

    return kb.as_markup()

# --- [END] CONNECT CHANNELS UI helpers ---

# –°–ª–µ–¥—É—é—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏

def format_endtime_prompt() -> str:
    now_msk = datetime.now(MSK_TZ)
    example = now_msk.strftime("%H:%M %d.%m.%Y")
    current = example  # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –∏ –∫–∞–∫ –ø—Ä–∏–º–µ—Ä, –∏ –∫–∞–∫ "—Ç–µ–∫—É—â–µ–µ"

    return (
        "‚è∞ <b>–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ (–ß–ß:–ú–ú –î–î.–ú–ú.–ì–ì–ì–ì)</b>\n\n"
        f"<b>–ù–∞–ø—Ä–∏–º–µ—Ä:</b> <code>{example}</code>\n\n"
        "‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b> –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —á–∞—Å–æ–≤—ã–º –ø–æ—è—Å–æ–º MSK (GMT+3).\n"
        f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –±–æ—Ç–µ: <code>{current}</code>"
    )

def kb_yes_no() -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    kb.button(text="–î–∞",  callback_data="media:yes")
    kb.button(text="–ù–µ—Ç", callback_data="media:no")
    kb.adjust(2)
    return kb.as_markup()

def kb_skip_media() -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    kb.button(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="media:skip")
    kb.adjust(1)
    return kb.as_markup()

def _s3_client():
    return boto3.client(
        "s3",
        region_name=S3_REGION,
        endpoint_url=S3_ENDPOINT,
        aws_access_key_id=S3_KEY,
        aws_secret_access_key=S3_SECRET,
    )

def _make_s3_key(filename: str) -> str:
    """–∫–ª—é—á –≤ –±–∞–∫–µ—Ç–µ: yyyy/mm/dd/<uuid>.<ext>"""
    now = datetime.utcnow()
    ext = (os.path.splitext(filename)[1] or "").lower() or ".bin"
    return f"{now:%Y/%m/%d}/{uuid.uuid4().hex}{ext}"

async def upload_bytes_to_s3(data: bytes, filename: str) -> tuple[str, str]:
    """
    –ö–ª–∞–¥—ë–º –±–∞–π—Ç—ã –≤ S3.
    –í–æ–∑–≤—Ä–∞—â–∞–µ–º (key, public_url), –≥–¥–µ key = yyyy/mm/dd/uuid.ext
    """
    logging.info(f"üì§ UPLOAD_TO_S3 filename={filename}, bytes={len(data)}")
    key = _make_s3_key(filename)
    content_type = mimetypes.guess_type(filename)[0] or "application/octet-stream"

    def _put():
        _s3_client().put_object(
            Bucket=S3_BUCKET,
            Key=key,
            Body=data,
            ContentType=content_type,
        )
    await asyncio.to_thread(_put)
    logging.info(f"‚úÖ S3_PUT_OK key={key}")

    public_url = f"{S3_ENDPOINT.rstrip('/')}/{S3_BUCKET}/{key}"
    return key, public_url


async def file_id_to_public_url_via_s3(bot: Bot, file_id: str, suggested_name: str) -> tuple[str, str]:
    tg_file = await bot.get_file(file_id)
    buf = BytesIO()
    await bot.download(tg_file, destination=buf)

    filename = os.path.basename(tg_file.file_path or "") or suggested_name
    if not os.path.splitext(filename)[1]:
        filename = suggested_name

    return await upload_bytes_to_s3(buf.getvalue(), filename)  # (key, s3_url)

def _make_preview_url(key: str, title: str, desc: str) -> str:
    # –ë–µ–∑ –∫–∞–∫–∏—Ö-–ª–∏–±–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ ‚Äî —Ç–æ–ª—å–∫–æ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –Ω–∞ –Ω–∞—à–µ–º –¥–æ–º–µ–Ω–µ
    base = MEDIA_BASE_URL.rstrip("/")
    return f"{base}/uploads/{key}"

# –•—Ä–∞–Ω–∏–º —Ç–∏–ø –≤–º–µ—Å—Ç–µ —Å file_id –≤ –æ–¥–Ω–æ–º –ø–æ–ª–µ –ë–î
def pack_media(kind: str, file_id: str) -> str:
    return f"{kind}:{file_id}"

def unpack_media(value: str | None) -> tuple[str|None, str|None]:
    if not value:
        return None, None
    if ":" in value:
        k, fid = value.split(":", 1)
        return k, fid
    # –æ–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: —Å—Ç–∞—Ä–æ–µ –ø–æ–ª–µ —Ç–æ–ª—å–∫–æ —Å photo id
    return "photo", value


async def _fallback_preview_with_native_media(m: Message, state: FSMContext, kind: str, fid: str) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—ã—á–Ω–æ–µ –º–µ–¥–∏–∞ —Å –ø–æ–¥–ø–∏—Å—å—é –∏ —Ç–æ–π –∂–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π (–±–µ–∑ –ª–∏–Ω–∫-–ø—Ä–µ–≤—å—é)."""
    data = await state.get_data()
    title = (data.get("title") or "").strip() or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
    prizes = int(data.get("winners_count") or 0)

    caption = _compose_preview_text(title, prizes)
    # –ü–æ—Ä—è–¥–æ–∫ ¬´—Å–≤–µ—Ä—Ö—É/—Å–Ω–∏–∑—É¬ª –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ —Ç—É—Ç –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω ‚Äî —ç—Ç–æ fallback.
    if kind == "photo":
        msg = await m.answer_photo(fid, caption=caption, reply_markup=kb_media_preview(media_on_top=False))
    elif kind == "animation":
        msg = await m.answer_animation(fid, caption=caption, reply_markup=kb_media_preview(media_on_top=False))
    else:
        msg = await m.answer_video(fid, caption=caption, reply_markup=kb_media_preview(media_on_top=False))

    await state.update_data(
        media_preview_msg_id=msg.message_id,
        media_top=False,
        media_url=None,      # –≤–∞–∂–Ω—ã–π –º–∞—Ä–∫–µ—Ä: —Ä–∞–±–æ—Ç–∞–µ–º –≤ fallback-—Ä–µ–∂–∏–º–µ
    )
    await state.set_state(CreateFlow.MEDIA_PREVIEW)

async def _ensure_link_preview_or_fallback(
    m: Message,
    state: FSMContext,
    kind: str,
    fid: str,
    filename: str
):
    logger_media.info("ensure_link_preview_or_fallback: kind=%s fid=%s", kind, fid)

    async def _do_once() -> tuple[str, str, str]:
        # 1) –∫–∞—á–∞–µ–º –∏–∑ TG –∏ –∫–ª–∞–¥–µ–º –≤ S3
        key, s3_url = await file_id_to_public_url_via_s3(m.bot, fid, filename)
        # 2) —Å–æ–±–∏—Ä–∞–µ–º —Å—Å—ã–ª–∫—É-–ø—Ä–æ–∫–ª–∞–¥–∫—É –Ω–∞ –Ω–∞—à –¥–æ–º–µ–Ω (uploads)
        data = await state.get_data()
        title = (data.get("title") or "").strip()
        desc  = (data.get("desc")  or "").strip()
        preview_url = _make_preview_url(key, title, desc)
        return key, s3_url, preview_url

    try:
        try:
            key, s3_url, preview_url = await _do_once()
        except Exception as e1:
            logger_media.warning("First try failed (%s), retrying once...", repr(e1))
            key, s3_url, preview_url = await _do_once()

        logger_media.info("‚úÖ S3 uploaded: key=%s s3_url=%s preview=%s", key, s3_url, preview_url)

        # 3) –∫–ª–∞–¥—ë–º –≤ state –ò–ú–ï–ù–ù–û preview_url (–∞ –Ω–µ s3_url!)
        await state.update_data(media_url=preview_url)

        # 4) —Ä–∏—Å—É–µ–º –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ª–∏–Ω–∫-–ø—Ä–µ–≤—å—é (—Ñ–∏–æ–ª–µ—Ç–æ–≤–∞—è —Ä–∞–º–∫–∞)
        await render_link_preview_message(m, state)
        await state.set_state(CreateFlow.MEDIA_PREVIEW)

    except Exception:
        logger_media.exception("Link-preview failed after retry; go fallback")
        await _fallback_preview_with_native_media(m, state, kind, fid)

def _compose_preview_text(
    title: str,
    prizes: int,
    *,
    desc_html: str | None = None,
    end_at_msk: str | None = None,
    days_left: int | None = None
) -> str:
    """
    –¢–µ–∫—Å—Ç ¬´—Å–µ—Ä–æ–≥–æ –±–ª–æ–∫–∞¬ª –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞.
    - title –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—ã—á–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º (–±–µ–∑ <b>), —á—Ç–æ–±—ã –Ω–µ –Ω–∞–≤—è–∑—ã–≤–∞—Ç—å –∂–∏—Ä–Ω—ã–π.
    - desc_html –≤—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è).
    - –¥–∞—Ç–∞ –±–µ—Ä—ë—Ç—Å—è –∏–∑ –≤–≤–µ–¥—ë–Ω–Ω–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º + "(N –¥–Ω–µ–π)" –ø–æ-—Ä—É—Å—Å–∫–∏.
    """
    lines = []
    if title:
        # –±–µ–∑ <b> ‚Äî –Ω–µ –Ω–∞–≤—è–∑—ã–≤–∞–µ–º –∂–∏—Ä–Ω—ã–π
        lines.append(escape(title))
        lines.append("")

    if desc_html:
        # –í–ê–ñ–ù–û: —ç—Ç–æ —É–∂–µ ¬´HTML¬ª, –Ω–µ –æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤ <b>, –Ω–µ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ.
        # –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –∂—ë—Å—Ç–∫–æ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å —Ç–µ–≥–∏ ‚Äî —Å–¥–µ–ª–∞–π –ª—ë–≥–∫—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é –≤—ã—à–µ.
        lines.append(desc_html)
        lines.append("")

    lines.append("–ß–∏—Å–ª–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: 0")
    lines.append(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–∑–æ–≤: {max(0, prizes)}")

    if end_at_msk:
        tail = f" ({days_left} –¥–Ω–µ–π)" if isinstance(days_left, int) and days_left >= 0 else ""
        lines.append(f"–î–∞—Ç–∞ —Ä–æ–∑—ã–≥—Ä—ã—à–∞: {end_at_msk}{tail}")
    else:
        lines.append("–î–∞—Ç–∞ —Ä–æ–∑—ã–≥—Ä—ã—à–∞: 00:00, 00.00.0000 (0 –¥–Ω–µ–π)")

    return "\n".join(lines)

async def render_link_preview_message(
    m: Message,
    state: FSMContext,
    *,
    reedit: bool = False
) -> None:
    """
    –†–µ–Ω–¥–µ—Ä–∏—Ç –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å link preview:
    - ¬´–Ω–µ–≤–∏–¥–∏–º–∞—è¬ª —Å—Å—ã–ª–∫–∞ <a href="...">&#8203;</a> –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ä–∞–º–∫—É –æ—Ç Telegram;
    - —Å–≤–µ—Ä—Ö—É —Ç–µ–∫—Å—Ç: –Ω–∞–∑–≤–∞–Ω–∏–µ (–æ–±—ã—á–Ω—ã–º), –æ–ø–∏—Å–∞–Ω–∏–µ (–∫–∞–∫ –≤–≤—ë–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å),
      —É—á–∞—Å—Ç–Ω–∏–∫–∏/–ø—Ä–∏–∑—ã/–¥–∞—Ç–∞ (—Å —Ä—É—Å—Å–∫–∏–º "N –¥–Ω–µ–π").
    """
    data = await state.get_data()
    media     = data.get("media_url")
    media_top = bool(data.get("media_top") or False)

    # title   = (data.get("title") or "").strip()
    prizes  = int(data.get("winners_count") or 0)

    # –æ–ø–∏—Å–∞–Ω–∏–µ: —Ö—Ä–∞–Ω–∏–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –∏ –µ–≥–æ HTML-–≤–µ—Ä—Å–∏—é
    # text ‚Äî —ç—Ç–æ ¬´–∫–∞–∫ –ø—Ä–∏—Å–ª–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å¬ª; –º—ã —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–ª–∏ —Ç–æ–ª—å–∫–æ –≤ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–µ –æ–ø–∏—Å–∞–Ω–∏—è.
    desc_raw  = (data.get("desc") or "").strip()
    # –†–∞–∑—Ä–µ—à–∞–µ–º –±–∞–∑–æ–≤—É—é —Ä–∞–∑–º–µ—Ç–∫—É, –ø–æ—ç—Ç–æ–º—É –ù–ï —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∑–¥–µ—Å—å (—Å–º–æ—Ç—Ä–∏ –ø—É–Ω–∫—Ç –≤ –¥–æ–∫—Å—Ç—Ä–∏–Ω–≥–µ –≤—ã—à–µ).
    desc_html = desc_raw

    # –¥–∞—Ç–∞ (—Å—Ç—Ä–æ–∫–∞ –¥–ª—è —á–µ–ª–æ–≤–µ–∫–∞) –∏ –¥–Ω–∏
    end_at_msk = data.get("end_at_msk_str")  # "HH:MM DD.MM.YYYY"
    days_left  = data.get("days_left")       # int

    txt = _compose_preview_text(
        "", prizes,
        desc_html=desc_html if desc_html else None,
        end_at_msk=end_at_msk,
        days_left=days_left
    )

    if not media:
        await m.answer(txt)
        return

    hidden_link = f'<a href="{media}">&#8203;</a>'
    full = f"{hidden_link}\n\n{txt}" if media_top else f"{txt}\n\n{hidden_link}"

    lp = LinkPreviewOptions(
        is_disabled=False,
        prefer_large_media=True,
        prefer_small_media=False,
        show_above_text=media_top,
    )

    old_id = data.get("media_preview_msg_id")
    if reedit and old_id:
        try:
            await m.bot.edit_message_text(
                chat_id=m.chat.id,
                message_id=old_id,
                text=full,
                link_preview_options=lp,
                reply_markup=kb_media_preview(media_top),
                parse_mode="HTML",
            )
            return
        except Exception:
            pass

    prev_id = data.get("media_preview_msg_id")
    if prev_id and not reedit:
        try:
            await m.bot.delete_message(chat_id=m.chat.id, message_id=prev_id)
        except Exception:
            pass

    msg = await m.answer(
        full,
        link_preview_options=lp,
        reply_markup=kb_media_preview(media_top),
        parse_mode="HTML",
    )
    await state.update_data(media_preview_msg_id=msg.message_id)

# ----------------- DB MODELS -----------------
class Base(DeclarativeBase): pass

class GiveawayStatus:
    DRAFT="draft"; ACTIVE="active"; FINISHED="finished"; CANCELLED="cancelled"

class User(Base):
    __tablename__ = "users"
    user_id: Mapped[int] = mapped_column(BigInteger, primary_key=True)
    username: Mapped[str|None] = mapped_column(String(64), nullable=True)
    tz: Mapped[str] = mapped_column(String(64), default=DEFAULT_TZ)
    created_at: Mapped[datetime] = mapped_column(DateTime(timezone=True), default=lambda: datetime.now(timezone.utc))

class OrganizerChannel(Base):
    __tablename__="organizer_channels"
    id: Mapped[int] = mapped_column(Integer, primary_key=True, autoincrement=True)
    owner_user_id: Mapped[int] = mapped_column(BigInteger, index=True)
    chat_id: Mapped[int] = mapped_column(BigInteger)
    username: Mapped[str|None] = mapped_column(String(128), nullable=True)
    title: Mapped[str] = mapped_column(String(255))
    is_private: Mapped[bool] = mapped_column(Boolean, default=False)
    bot_role: Mapped[str] = mapped_column(String(32), default="member")  # member|admin
    status: Mapped[str] = mapped_column(String(32), default="ok")
    added_at: Mapped[datetime] = mapped_column(DateTime(timezone=True), default=lambda: datetime.now(timezone.utc))

class Giveaway(Base):
    __tablename__="giveaways"
    id: Mapped[int] = mapped_column(Integer, primary_key=True, autoincrement=True)
    owner_user_id: Mapped[int] = mapped_column(BigInteger, index=True)
    internal_title: Mapped[str] = mapped_column(String(100))
    public_description: Mapped[str] = mapped_column(String(3000))
    photo_file_id: Mapped[str|None] = mapped_column(String(512), nullable=True)
    end_at_utc: Mapped[datetime] = mapped_column(DateTime(timezone=True))
    winners_count: Mapped[int] = mapped_column(Integer, default=1)
    commit_hash: Mapped[str|None] = mapped_column(String(128), nullable=True)
    secret: Mapped[str|None] = mapped_column(String(128), nullable=True)   # —Ö—Ä–∞–Ω–∏—Ç—Å—è –¥–æ —Ä–∞—Å–∫—Ä—ã—Ç–∏—è
    status: Mapped[str] = mapped_column(String(16), default=GiveawayStatus.DRAFT)
    tz: Mapped[str] = mapped_column(String(64), default=DEFAULT_TZ)
    cancelled_at: Mapped[datetime|None] = mapped_column(DateTime(timezone=True), nullable=True)
    cancelled_by: Mapped[int|None] = mapped_column(BigInteger, nullable=True)

class GiveawayChannel(Base):
    __tablename__="giveaway_channels"
    id: Mapped[int] = mapped_column(Integer, primary_key=True, autoincrement=True)
    giveaway_id: Mapped[int] = mapped_column(ForeignKey("giveaways.id"), index=True)
    channel_id: Mapped[int] = mapped_column(ForeignKey("organizer_channels.id"))
    chat_id: Mapped[int] = mapped_column(BigInteger)
    title: Mapped[str] = mapped_column(String(255))

class Entry(Base):
    __tablename__="entries"
    id: Mapped[int] = mapped_column(Integer, primary_key=True, autoincrement=True)
    giveaway_id: Mapped[int] = mapped_column(ForeignKey("giveaways.id"), index=True)
    user_id: Mapped[int] = mapped_column(BigInteger, index=True)
    ticket_code: Mapped[str] = mapped_column(String(6), index=True)
    prelim_ok: Mapped[bool] = mapped_column(Boolean, default=False)
    final_ok: Mapped[bool|None] = mapped_column(Boolean, nullable=True)
    prelim_checked_at: Mapped[datetime|None] = mapped_column(DateTime(timezone=True))
    final_checked_at: Mapped[datetime|None] = mapped_column(DateTime(timezone=True))

class Winner(Base):
    __tablename__="winners"
    id: Mapped[int] = mapped_column(Integer, primary_key=True, autoincrement=True)
    giveaway_id: Mapped[int] = mapped_column(ForeignKey("giveaways.id"), index=True)
    user_id: Mapped[int] = mapped_column(BigInteger)
    rank: Mapped[int] = mapped_column(Integer)
    hash_used: Mapped[str] = mapped_column(String(128))

# ---- DB INIT ----

# –ø—É—Ç—å –∫ bot.db —Å—Ç—Ä–æ–≥–æ —Ä—è–¥–æ–º —Å bot.py (–æ–¥–∏–Ω —Ñ–∞–π–ª –¥–ª—è –≤—Å–µ—Ö)
DB_PATH = Path(__file__).with_name("bot.db")
DB_URL = f"sqlite+aiosqlite:///{DB_PATH.as_posix()}"

from sqlalchemy.ext.asyncio import create_async_engine, async_sessionmaker
engine = create_async_engine(DB_URL, echo=True, future=True)
Session = async_sessionmaker(engine, expire_on_commit=False)
# —Å–æ–∑–¥–∞—Ç—å –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ ORM-–º–æ–¥–µ–ª—è–º (–µ—Å–ª–∏ –∏—Ö –µ—â—ë –Ω–µ—Ç)
async def init_db():
    async with engine.begin() as conn:
        await conn.run_sync(Base.metadata.create_all)

# –∞–≤—Ç–æ-—Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∫–∞–Ω–∞–ª–æ–≤, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
async def ensure_channels_table():
    create_sql = """
    CREATE TABLE IF NOT EXISTS organizer_channels (
        id           INTEGER PRIMARY KEY AUTOINCREMENT,
        owner_user_id INTEGER NOT NULL,
        chat_id       BIGINT   NOT NULL,
        title         TEXT     NOT NULL,
        is_private    BOOLEAN  NOT NULL,
        bot_role      TEXT     NOT NULL,
        added_at      TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        CONSTRAINT ux_owner_chat UNIQUE (owner_user_id, chat_id)
    );
    CREATE INDEX IF NOT EXISTS idx_owner ON organizer_channels(owner_user_id);
    """
    async with engine.begin() as conn:
        for stmt in create_sql.split(";"):
            s = stmt.strip()
            if s:
                await conn.exec_driver_sql(s + ";")

# --- DB bootstrap: –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –Ω—É–∂–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã/—É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ ---
from sqlalchemy import text as stext

async def ensure_schema():
    """
    –î–æ–±–∏–≤–∞–µ–º—Å—è –æ–¥–∏–Ω–∞–∫–æ–≤–æ–π —Å—Ö–µ–º—ã –∏ upsert-–∫–ª—é—á–∞:
    - —Ç–∞–±–ª–∏—Ü–∞ organizer_channels —É–∂–µ —Å–æ–∑–¥–∞—ë—Ç—Å—è —á–µ—Ä–µ–∑ ORM,
      –Ω–æ –≤ SQLite create_all() –ù–ï –¥–æ–±–∞–≤–ª—è–µ—Ç/–Ω–µ –º–µ–Ω—è–µ—Ç –∏–Ω–¥–µ–∫—Å—ã –≤ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Ç–∞–±–ª–∏—Ü–µ.
    - –ø–æ—ç—Ç–æ–º—É —Ä—É–∫–∞–º–∏ —Å–æ–∑–¥–∞—ë–º/–æ–±–Ω–æ–≤–ª—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –¥–ª—è –ø–∞—Ä—ã (owner_user_id, chat_id),
      —á—Ç–æ–±—ã INSERT OR IGNORE —Ä–∞–±–æ—Ç–∞–ª –∫–∞–∫ –æ–∂–∏–¥–∞–µ—Ç—Å—è –∏ –Ω–µ –ø–ª–æ–¥–∏–ª –¥—É–±–ª–∏–∫–∞—Ç—ã.
    """
    async with engine.begin() as conn:
        # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π ‚Äî —Ç–∞–±–ª–∏—Ü–∞ (–µ—Å–ª–∏ –≤–¥—Ä—É–≥ –∫—Ç–æ-—Ç–æ —É–¥–∞–ª–∏–ª)
        await conn.run_sync(Base.metadata.create_all)
        # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –¥–ª—è upsert
        await conn.execute(stext("""
            CREATE UNIQUE INDEX IF NOT EXISTS ux_org_channels_owner_chat
            ON organizer_channels(owner_user_id, chat_id);
        """))

@asynccontextmanager
async def session_scope():
    async with Session() as s:
        try:
            yield s
            await s.commit()
        except:
            await s.rollback()
            raise

# ----------------- HELPERS -----------------
ALPHABET = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"
def gen_ticket_code(): return "".join(random.choices(ALPHABET, k=6))
def utcnow(): return datetime.now(timezone.utc)

async def ensure_user(user_id:int, username:str|None):
    async with session_scope() as s:
        u = await s.get(User, user_id)
        if not u:
            u = User(user_id=user_id, username=username)
            s.add(u)

async def check_membership_on_all(bot, user_id:int, giveaway_id:int):
    async with session_scope() as s:
        res = await s.execute(text("SELECT title, chat_id FROM giveaway_channels WHERE giveaway_id=:gid"),{"gid":giveaway_id})
        rows = res.all()
    details=[]; all_ok=True
    for title, chat_id in rows:
        try:
            m = await bot.get_chat_member(chat_id, user_id)
            ok = m.status in {"member","administrator","creator"}
        except Exception:
            ok = False
        details.append((title, ok))
        all_ok = all_ok and ok
    return all_ok, details

def commit_hash(secret:str, gid:int)->str:
    return hashlib.sha256((secret+str(gid)).encode()).hexdigest()

def deterministic_draw(secret:str, gid:int, user_ids:list[int], k:int):
    import hashlib
    h = hashlib.sha256((secret+str(gid)).encode()).digest()
    pool = list(sorted(user_ids))
    winners=[]; rank=1
    while pool and len(winners)<k:
        idx = int.from_bytes(h,"big") % len(pool)
        uid = pool.pop(idx)
        winners.append((uid, rank, hashlib.sha256(h).hexdigest()))
        h = hashlib.sha256(h).digest()
        rank+=1
    return winners

def kb_media_preview(media_on_top: bool) -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    kb.button(text="–ò–∑–º–µ–Ω–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ/gif/–≤–∏–¥–µ–æ", callback_data="preview:change")
    if media_on_top:
        kb.button(text="–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –º–µ–¥–∏–∞ —Å–Ω–∏–∑—É", callback_data="preview:move:down")
    else:
        kb.button(text="–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –º–µ–¥–∏–∞ —Å–≤–µ—Ä—Ö—É", callback_data="preview:move:up")
    kb.button(text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="preview:continue")
    kb.adjust(1)
    return kb.as_markup()

def _preview_text(title: str, winners: int) -> str:
    return (
        f"{escape(title)}\n\n"
        f"–ß–∏—Å–ª–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: 0\n"
        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–∑–æ–≤: {max(1, int(winners))}\n"
        f"–î–∞—Ç–∞ —Ä–æ–∑—ã–≥—Ä—ã—à–∞: 00:00, 00.00.0000 (0 days)"
    )

async def _send_media(chat_id: int, kind: str|None, fid: str|None):
    if not kind or not fid:
        return None
    if kind == "photo":
        return await bot.send_photo(chat_id, fid)
    if kind == "animation":
        return await bot.send_animation(chat_id, fid)
    if kind == "video":
        return await bot.send_video(chat_id, fid)
    return None

async def save_shared_chat(
    *,
    owner_user_id: int,
    chat_id: int,
    title: str,
    chat_type: str,
    bot_role: str
) -> bool:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ –≤—Å—Ç–∞–≤–∫–∞ —Å–¥–µ–ª–∞–Ω–∞ –≤–ø–µ—Ä–≤—ã–µ; False, –µ—Å–ª–∏ —Ç–∞–∫–æ–π –∫–∞–Ω–∞–ª —É–∂–µ –±—ã–ª.
    """
    # is_private = True –¥–ª—è –≥—Ä—É–ø–ø/—Å—É–ø–µ—Ä–≥—Ä—É–ø–ø, False –¥–ª—è –∫–∞–Ω–∞–ª–æ–≤
    is_private = chat_type in (ChatType.GROUP, ChatType.SUPERGROUP)

    async with Session() as s:
        async with s.begin():
            # –ø—Ä–æ–±—É–µ–º –≤—Å—Ç–∞–≤–∏—Ç—å; –µ—Å–ª–∏ –¥—É–±–ª–∏–∫–∞—Ç ‚Äî –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä
            await s.execute(
                """
                INSERT OR IGNORE INTO organizer_channels
                    (owner_user_id, chat_id, title, is_private, bot_role)
                VALUES (?, ?, ?, ?, ?)
                """,
                (owner_user_id, chat_id, title, int(is_private), bot_role)
            )
        # –ø—Ä–æ–≤–µ—Ä–∏–º, –ø–æ—è–≤–∏–ª–∞—Å—å –ª–∏ –∑–∞–ø–∏—Å—å
        res = await s.execute(
            "SELECT 1 FROM organizer_channels WHERE owner_user_id=? AND chat_id=?",
            (owner_user_id, chat_id)
        )
        return res.scalar() is not None

# ----------------- FSM -----------------
from aiogram.fsm.state import StatesGroup, State

class CreateFlow(StatesGroup):
    TITLE = State()
    WINNERS = State()
    DESC = State()
    CONFIRM_DESC = State()   # –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è
    MEDIA_DECIDE = State()   # –Ω–æ–≤—ã–π —à–∞–≥: –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –î–∞/–ù–µ—Ç
    MEDIA_UPLOAD = State()   # –Ω–æ–≤—ã–π —à–∞–≥: –æ–∂–∏–¥–∞—Ç—å —Ñ–∞–π–ª (photo/animation/video)
    MEDIA_PREVIEW = State()
    PHOTO = State()          # –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –Ω–æ –ø—É—Å—Ç—å –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –µ—Å–ª–∏ –≥–¥–µ-—Ç–æ —Å—Å—ã–ª–∞–µ—à—å—Å—è
    ENDAT = State()

# ----------------- BOT -----------------
from aiogram import Bot, Dispatcher, F
bot = Bot(BOT_TOKEN, parse_mode="HTML")
dp = Dispatcher()
scheduler = AsyncIOScheduler()

# --- –¢—Ä–µ–±—É–µ–º—ã–µ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –∫–∞–Ω–∞–ª–æ–≤ –∏ –≥—Ä—É–ø–ø ---
CHAN_ADMIN_RIGHTS = ChatAdministratorRights(
    is_anonymous=False,
    can_manage_chat=True,
    can_post_messages=True,
    can_edit_messages=True,
    can_delete_messages=False,
    can_invite_users=True,
    can_restrict_members=False,
    can_promote_members=True,
    can_change_info=True,
    can_pin_messages=False,
    can_manage_topics=False,
    can_post_stories=False,
    can_edit_stories=False,
    can_delete_stories=False,
    can_manage_video_chats=False,
)

GROUP_ADMIN_RIGHTS = ChatAdministratorRights(
    is_anonymous=False,
    can_manage_chat=True,
    can_post_messages=False,
    can_edit_messages=False,
    can_delete_messages=True,
    can_invite_users=True,
    can_restrict_members=True,
    can_promote_members=False,
    can_change_info=True,
    can_pin_messages=True,
    can_manage_topics=True,
    can_post_stories=False,
    can_edit_stories=False,
    can_delete_stories=False,
    can_manage_video_chats=True,
)

async def set_bot_commands(bot: Bot):
    commands = [
        BotCommand(command="start", description="–ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        BotCommand(command="create", description="—Å–æ–∑–¥–∞—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à"),
        BotCommand(command="events", description="–º–æ–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∏"),
        BotCommand(command="subscriptions", description="–ø–æ–¥–ø–∏—Å–∫–∏"),
        # –º–æ–∂–Ω–æ –ø–æ–∑–∂–µ –¥–æ–±–∞–≤–∏—Ç—å: help, menu –∏ –¥—Ä.
    ]
    await bot.set_my_commands(commands)

def kb_main():
    kb = InlineKeyboardBuilder()
    kb.button(text="–°–æ–∑–¥–∞—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à", callback_data="create")
    kb.button(text="–ú–æ–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∏", callback_data="my_events")
    kb.button(text="–ú–æ–∏ –∫–∞–Ω–∞–ª—ã", callback_data="my_channels")
    return kb.as_markup()

# ===== Reply-–∫–Ω–æ–ø–∫–∏: –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≥–æ—Ç–æ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ =====

def reply_main_kb() -> ReplyKeyboardMarkup:
    btn_add_channel = KeyboardButton(
        text=BTN_ADD_CHANNEL,
        request_chat=KeyboardButtonRequestChat(
            request_id=1,
            chat_is_channel=True,
            bot_administrator_rights=CHAN_ADMIN_RIGHTS,
            user_administrator_rights=CHAN_ADMIN_RIGHTS,
        )
    )

    btn_add_group = KeyboardButton(
        text=BTN_ADD_GROUP,
        request_chat=KeyboardButtonRequestChat(
            request_id=2,
            chat_is_channel=False,
            bot_administrator_rights=GROUP_ADMIN_RIGHTS,
            user_administrator_rights=GROUP_ADMIN_RIGHTS,
        )
    )

    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text=BTN_EVENTS), KeyboardButton(text=BTN_CREATE)],
            [btn_add_channel, btn_add_group],
            [KeyboardButton(text=BTN_SUBSCRIPTIONS)],
        ],
        resize_keyboard=True,
        one_time_keyboard=False,
        input_field_placeholder="–°–æ–æ–±—â–µ–Ω–∏–µ",
    )

def chooser_reply_kb() -> ReplyKeyboardMarkup:
    btn_add_channel = KeyboardButton(
        text=BTN_ADD_CHANNEL,
        request_chat=KeyboardButtonRequestChat(
            request_id=101,  # –ª—é–±–æ–µ —á–∏—Å–ª–æ
            chat_is_channel=True,
            bot_administrator_rights=CHAN_ADMIN_RIGHTS,
            user_administrator_rights=CHAN_ADMIN_RIGHTS,
        )
    )
    btn_add_group = KeyboardButton(
        text=BTN_ADD_GROUP,
        request_chat=KeyboardButtonRequestChat(
            request_id=102,
            chat_is_channel=False,
            bot_administrator_rights=GROUP_ADMIN_RIGHTS,
            user_administrator_rights=GROUP_ADMIN_RIGHTS,
        )
    )
    # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è ¬´–æ–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è¬ª –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ç–æ–ª—å–∫–æ —Å —ç—Ç–∏–º–∏ –¥–≤—É–º—è –∫–Ω–æ–ø–∫–∞–º–∏
    return ReplyKeyboardMarkup(
        keyboard=[[btn_add_channel, btn_add_group]],
        resize_keyboard=True,
        one_time_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª/–≥—Ä—É–ø–ø—É –Ω–∏–∂–µ"
    )

# === –°–ò–°–¢–ï–ú–ù–û–ï –æ–∫–Ω–æ –≤—ã–±–æ—Ä–∞ –∫–∞–Ω–∞–ª–∞/–≥—Ä—É–ø–ø—ã (chat_shared) ===
@dp.message(F.chat_shared)
async def on_chat_shared(m: Message, state: FSMContext):
    shared = m.chat_shared
    chat_id = shared.chat_id

    try:
        chat = await bot.get_chat(chat_id)
        me = await bot.get_me()
        cm = await bot.get_chat_member(chat_id, me.id)
        role = "administrator" if cm.status == "administrator" else (
            "member" if cm.status == "member" else "none"
        )
    except Exception as e:
        await m.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —á–∞—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑. ({e})")
        return

    # 1) –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–Ω–∞–ª/–≥—Ä—É–ø–ø—É —É –≤–ª–∞–¥–µ–ª—å—Ü–∞
    from sqlalchemy import text as stext
    async with session_scope() as s:
        await s.execute(
            stext(
                "INSERT OR IGNORE INTO organizer_channels("
                "owner_user_id, chat_id, title, is_private, bot_role"
                ") VALUES (:o, :cid, :t, :p, :r)"
            ),
            {
                "o": m.from_user.id,
                "cid": chat.id,
                "t": chat.title or (getattr(chat, 'first_name', None) or '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'),
                "p": 0 if getattr(chat, "username", None) else 1,
                "r": "admin" if role == "administrator" else "member",
            }
        )
        # –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–≤—Ç–æ—Ä–Ω—ã–π SELECT ‚Äî —É–≤–∏–¥–∏–º, —á—Ç–æ —Ä–µ–∞–ª—å–Ω–æ –ª–µ–∂–∏—Ç –≤ –ë–î
        check = await s.execute(
            stext("SELECT id, owner_user_id, chat_id, title FROM organizer_channels "
                  "WHERE owner_user_id=:o AND chat_id=:cid"),
            {"o": m.from_user.id, "cid": chat.id}
        )
        row = check.first()
        logging.info("üì¶ saved channel? %s", row)

    kind = "–∫–∞–Ω–∞–ª" if chat.type == "channel" else "–≥—Ä—É–ø–ø–∞"

    # 2) –°–æ–æ–±—â–∞–µ–º –æ–± —É—Å–ø–µ—Ö–µ –∏ —É–±–∏—Ä–∞–µ–º —Ä–∞–∑–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await m.answer(
        f"{kind.capitalize()} <b>{chat.title}</b> –ø–æ–¥–∫–ª—é—á—ë–Ω –∫ –±–æ—Ç—É.",
        parse_mode="HTML",
        reply_markup=ReplyKeyboardRemove()
    )

    # 3) –ï—Å–ª–∏ –≤—ã–±–∏—Ä–∞–ª–∏ –∏–∑ —ç–∫—Ä–∞–Ω–∞ –ø—Ä–∏–≤—è–∑–∫–∏ –∫ —Ä–æ–∑—ã–≥—Ä—ã—à—É ‚Äî –ø–µ—Ä–µ—Ä–∏—Å—É–µ–º —ç—Ç–æ—Ç —ç–∫—Ä–∞–Ω
    data = await state.get_data()
    event_id = data.get("chooser_event_id")

    if event_id:
        async with session_scope() as s:
            gw = await s.get(Giveaway, event_id)
            res = await s.execute(
                stext("SELECT id, title FROM organizer_channels WHERE owner_user_id=:u"),
                {"u": gw.owner_user_id}
            )
            rows = res.all()
            channels = [(r[0], r[1]) for r in rows]

            res = await s.execute(
                stext("SELECT channel_id FROM giveaway_channels WHERE giveaway_id=:g"),
                {"g": event_id}
            )
            attached_ids = {r[0] for r in res.fetchall()}

        text_block = build_connect_channels_text(gw.internal_title)
        kb = build_channels_menu_kb(event_id, channels, attached_ids)
        await m.answer(text_block, reply_markup=kb)

        # –æ—á–∏—Å—Ç–∏–º –º–∞—Ä–∫–µ—Ä –≤—ã–±–æ—Ä–∞, —á—Ç–æ–±—ã –Ω–µ –º–µ—à–∞–ª –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑
        await state.update_data(chooser_event_id=None)
    else:
        # –û–±—ã—á–Ω—ã–π –∫–µ–π—Å: –ø–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ ¬´–í–∞—à–∏ –∫–∞–Ω–∞–ª—ã¬ª
        rows = await get_user_org_channels(m.from_user.id)
        await m.answer("–í–∞—à–∏ –∫–∞–Ω–∞–ª—ã:", reply_markup=kb_my_channels_menu(rows))

def kb_event_actions(gid:int, status:str):
    kb = InlineKeyboardBuilder()
    if status==GiveawayStatus.DRAFT:
        kb.button(text="–ü–æ–¥–∫–ª—é—á–∏—Ç—å –∫–∞–Ω–∞–ª—ã", callback_data=f"ev:channels:{gid}")
        kb.button(text="–ó–∞–ø—É—Å—Ç–∏—Ç—å (Launch)", callback_data=f"ev:launch:{gid}")
        kb.button(text="–£–¥–∞–ª–∏—Ç—å", callback_data=f"ev:delete:{gid}")
    elif status==GiveawayStatus.ACTIVE:
        kb.button(text="–û—Ç–º–µ–Ω–∏—Ç—å (Cancel)", callback_data=f"ev:cancel:{gid}")
        kb.button(text="–°—Ç–∞—Ç—É—Å", callback_data=f"ev:status:{gid}")
    elif status in (GiveawayStatus.FINISHED, GiveawayStatus.CANCELLED):
        kb.button(text="–û—Ç—á—ë—Ç", callback_data=f"ev:status:{gid}")
    kb.button(text="–ù–∞–∑–∞–¥", callback_data="my_events")
    return kb.as_markup()

def kb_participate(gid:int, allow:bool, cancelled:bool=False):
    kb = InlineKeyboardBuilder()
    if cancelled:
        kb.button(text="‚ùå –†–æ–∑—ã–≥—Ä—ã—à –æ—Ç–º–µ–Ω—ë–Ω", callback_data="noop")
    else:
        kb.button(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data=f"u:check:{gid}")
        if allow:
            kb.button(text="–ü—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ", callback_data=f"u:join:{gid}")
    return kb.as_markup()

def kb_confirm_description() -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    kb.button(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç", callback_data="desc:edit")
    kb.button(text="‚û°Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="desc:continue")
    kb.adjust(1)
    return kb.as_markup()

@dp.message(Command("start"))
async def cmd_start(m: Message, state: FSMContext):
    await ensure_user(m.from_user.id, m.from_user.username)
    text = (
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ë–æ—Ç —Å —Ä–æ–∑—ã–≥—Ä—ã—à–∞–º–∏ <b>PrizeMe!</b>\n\n"
        "–ë–æ—Ç —Å–ø–æ—Å–æ–±–µ–Ω –∑–∞–ø—É—Å–∫–∞—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à–∏ —Å—Ä–µ–¥–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ–¥–Ω–æ–≥–æ "
        "–∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö Telegram-–∫–∞–Ω–∞–ª–æ–≤ –∏ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –≤—ã–±–∏—Ä–∞—Ç—å "
        "–ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –≤ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è.\n\n"
        "–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:\n"
        "<b>/create</b> ‚Äì —Å–æ–∑–¥–∞—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à\n"
        "<b>/events</b> ‚Äì –º–æ–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∏\n"
        "<b>/subscriptions</b> ‚Äì –ø–æ–¥–ø–∏—Å–∫–∏"
    )
    await m.answer(text, parse_mode="HTML", reply_markup=reply_main_kb())

# ===== –ú–µ–Ω—é "–ú–æ–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∏" =====
def kb_my_events_menu(count_involved:int, count_finished:int, my_draft:int, my_finished:int):
    kb = InlineKeyboardBuilder()
    kb.button(text=f"–í –∫–æ—Ç–æ—Ä—ã—Ö —É—á–∞—Å—Ç–≤—É—é ({count_involved})", callback_data="mev:involved")
    kb.button(text=f"–ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∏ ({count_finished})", callback_data="mev:finished")
    kb.button(text=f"–ú–æ–∏ –Ω–µ–∑–∞–ø—É—â–µ–Ω–Ω—ã–µ ({my_draft})", callback_data="mev:my_drafts")
    kb.button(text=f"–ú–æ–∏ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ ({my_finished})", callback_data="mev:my_finished")
    kb.button(text="–°–æ–∑–¥–∞—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à", callback_data="create")
    kb.button(text="–ú–æ–∏ –∫–∞–Ω–∞–ª—ã", callback_data="my_channels")
    kb.adjust(1)
    return kb.as_markup()

@dp.message(Command("dbg_dbpath"))
async def dbg_dbpath(m: types.Message):
    await m.answer(f"DB: <code>{DB_PATH.resolve()}</code>")

@dp.message(Command("dbg_channels"))
async def dbg_channels(m: types.Message):
    async with Session() as s:
        res = await s.execute(
            "SELECT id, owner_user_id, chat_id, title, bot_role, datetime(added_at,'localtime') "
            "FROM organizer_channels WHERE owner_user_id=? ORDER BY id DESC LIMIT 10",
            (m.from_user.id,)
        )
        rows = res.all()
    if not rows:
        await m.answer("–í—Å–µ–≥–æ: 0")
    else:
        lines = [f"{r.id}: {r.title} ({r.chat_id}) ‚Äî {r.bot_role} ‚Äî {r[5]}" for r in rows]
        await m.answer("–í—Å–µ–≥–æ: " + str(len(rows)) + "\n" + "\n".join(lines))

async def show_my_events_menu(m: Message):
    """–°–æ–±–∏—Ä–∞–µ–º —Å—á—ë—Ç—á–∏–∫–∏ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º 6 –∫–Ω–æ–ø–æ–∫-–º–µ–Ω—é."""
    from sqlalchemy import text as stext
    uid = m.from_user.id
    async with session_scope() as s:
        # –≤ –∫–æ—Ç–æ—Ä—ã—Ö —É—á–∞—Å—Ç–≤—É—é ‚Äî —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω—ã–µ/–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ, –≥–¥–µ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å entries
        res = await s.execute(stext(
            "SELECT COUNT(DISTINCT g.id) "
            "FROM entries e JOIN giveaways g ON g.id=e.giveaway_id "
            "WHERE e.user_id=:u"
        ), {"u": uid})
        count_involved = res.scalar_one() or 0

        # –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –≤–æ–æ–±—â–µ (–ø–æ —Å–∏—Å—Ç–µ–º–µ)
        res = await s.execute(stext(
            "SELECT COUNT(*) FROM giveaways WHERE status='finished'"
        ))
        count_finished = res.scalar_one() or 0

        # –º–æ–∏ –Ω–µ–∑–∞–ø—É—â–µ–Ω–Ω—ã–µ (—á–µ—Ä–Ω–æ–≤–∏–∫–∏) –∏ –º–æ–∏ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ
        res = await s.execute(stext(
            "SELECT "
            "SUM(CASE WHEN status='draft' THEN 1 ELSE 0 END), "
            "SUM(CASE WHEN status='finished' THEN 1 ELSE 0 END) "
            "FROM giveaways WHERE owner_user_id=:u"
        ), {"u": uid})
        row = res.first()
        my_draft = int(row[0] or 0)
        my_finished = int(row[1] or 0)

    text = "–†–æ–∑—ã–≥—Ä—ã—à–∏:"
    await m.answer(text, reply_markup=kb_my_events_menu(count_involved, count_finished, my_draft, my_finished))

# ===== –ö–æ–º–∞–Ω–¥–∞ /menu —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å/–ø–æ–∫–∞–∑–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤–Ω–∏–∑—É =====
@dp.message(Command("menu"))
async def cmd_menu(m: Message):
    # –ø–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Å–∏—Å—Ç–µ–º–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
    await m.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=reply_main_kb())

@dp.message(Command("dbg_channels"))
async def dbg_channels(m: Message):
    from sqlalchemy import text as stext
    async with session_scope() as s:
        cnt = (await s.execute(stext("SELECT COUNT(*) FROM organizer_channels WHERE owner_user_id=:u"),
                               {"u": m.from_user.id})).scalar_one()
        rows = await s.execute(stext(
            "SELECT id, chat_id, title, datetime(added_at) "
            "FROM organizer_channels WHERE owner_user_id=:u ORDER BY added_at DESC"),
            {"u": m.from_user.id})
        data = rows.all()
    lines = [f"–í—Å–µ–≥–æ: {cnt}"]
    for r in data:
        lines.append(f"‚Ä¢ id={r[0]} chat_id={r[1]} title={r[2]}")
    await m.answer("\n".join(lines) if lines else "–ü—É—Å—Ç–æ")

@dp.message(Command("hide"))
async def hide_menu(m: Message):
    # –ü–æ–ª–Ω–æ—Å—Ç—å—é —É–±—Ä–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await m.answer("–ö–Ω–æ–ø–∫–∏ —Å–∫—Ä—ã—Ç—ã. –ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å ‚Äî –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /menu.", reply_markup=ReplyKeyboardRemove())

@dp.message(Command("create"))
async def create_giveaway_start(message: Message, state: FSMContext):
    await state.clear()
    await state.update_data(owner=message.from_user.id)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞:\n\n"
        "–ú–∞–∫—Å–∏–º—É–º ‚Äî <b>50 —Å–∏–º–≤–æ–ª–æ–≤</b>.\n\n"
        "–≠—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –≤ —Å–ø–∏—Å–∫–µ —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π "
        "–≤ –±–æ—Ç–µ. –ü–æ–¥–æ–π–¥–∏—Ç–µ –∫ –≤—ã–±–æ—Ä—É –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞–∫ –º–æ–∂–Ω–æ –±–æ–ª–µ–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ, "
        "—á—Ç–æ–±—ã —É—á–∞—Å—Ç–Ω–∏–∫–∏ –º–æ–≥–ª–∏ –ª–µ–≥–∫–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à —Ä–æ–∑—ã–≥—Ä—ã—à —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö "
        "–æ—Å—Ç–∞–ª—å–Ω—ã—Ö –≤ —Ä–∞–∑–¥–µ–ª–µ <b>¬´–ê–∫—Ç–∏–≤–Ω—ã–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∏¬ª</b>.\n\n"
        "<i>–ü—Ä–∏–º–µ—Ä –Ω–∞–∑–≤–∞–Ω–∏—è:</i> <b>MacBook Pro –æ—Ç –∫–∞–Ω–∞–ª–∞ PrizeMe</b>",
        parse_mode="HTML"
    )
    await state.set_state(CreateFlow.TITLE)   # <-- —Å—Ç–∞–≤–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–∏—Ç—É–ª–∞

# ===== Reply-–∫–Ω–æ–ø–∫–∏: –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≥–æ—Ç–æ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ =====

# "–ú–æ–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∏" -> –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–∞—à cmd_events
@dp.message(F.text == BTN_EVENTS)
async def on_btn_events(m: Message, state: FSMContext):
    await show_my_events_menu(m)

# "–ù–æ–≤—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à" -> –≤–∞—à create_giveaway_start
@dp.message(F.text == BTN_CREATE)
async def on_btn_create(m: Message, state: FSMContext):
    await create_giveaway_start(m, state)

# "–ü–æ–¥–ø–∏—Å–∫–∏" -> –≤–∞—à cmd_subs
@dp.message(F.text == BTN_SUBSCRIPTIONS)
async def on_btn_subs(m: Message, state: FSMContext):
    await cmd_subs(m)

@dp.message(CreateFlow.TITLE)
async def handle_giveaway_name(m: Message, state: FSMContext):
    name = (m.text or "").strip()
    if not name:
        await m.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞:")
        return
    if len(name) > 50:
        await m.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 50 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    await state.update_data(title=name)

    # ‚ûú –ù–æ–≤—ã–π —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥: —Å–ø—Ä–æ—Å–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π
    await state.set_state(CreateFlow.WINNERS)
    await m.answer(
        "–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –≤ —ç—Ç–æ–º —Ä–æ–∑—ã–≥—Ä—ã—à–µ –æ—Ç 1 –¥–æ 50 "
        "(–≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ, –Ω–µ —É–∫–∞–∑—ã–≤–∞—è –¥—Ä—É–≥–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤):"
    )

@dp.message(CreateFlow.WINNERS)
async def handle_winners_count(m: Message, state: FSMContext):
    raw = (m.text or "").strip()
    if not raw.isdigit():
        await m.answer("–ù—É–∂–Ω–æ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 50. –í–≤–µ–¥–∏—Ç–µ –µ—â—ë —Ä–∞–∑:")
        return

    winners = int(raw)
    if not (1 <= winners <= 50):
        await m.answer("–ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 50. –í–≤–µ–¥–∏—Ç–µ –µ—â—ë —Ä–∞–∑:")
        return

    await state.update_data(winners_count=winners)

    # ‚ûú –¥–∞–ª—å—à–µ –∏–¥—ë–º –∫ –æ–ø–∏—Å–∞–Ω–∏—é (–∫–∞–∫ –∏ —Ä–∞–Ω—å—à–µ)
    await state.set_state(CreateFlow.DESC)
    await m.answer(DESCRIPTION_PROMPT, parse_mode="HTML")

# --- –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–ª–∞–ª –æ–ø–∏—Å–∞–Ω–∏–µ ---
@dp.message(CreateFlow.DESC, F.text)
async def step_desc(m: Message, state: FSMContext):
    text = (m.text or "").strip()
    if len(text) > 2500:
        await m.answer("‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ. –£–∫–æ—Ä–æ—Ç–∏ –¥–æ 2500 —Å–∏–º–≤–æ–ª–æ–≤ –∏ –ø—Ä–∏—à–ª–∏ –µ—â—ë —Ä–∞–∑.")
        return

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
    await state.update_data(desc=text)

    # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä + –∫–Ω–æ–ø–∫–∏
    preview = f"<b>–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –æ–ø–∏—Å–∞–Ω–∏—è:</b>\n\n{escape(text)}"
    await m.answer(preview, parse_mode="HTML", reply_markup=kb_confirm_description())

    # –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    await state.set_state(CreateFlow.CONFIRM_DESC)

# –µ—Å–ª–∏ –ø—Ä–∏—Å–ª–∞–ª–∏ –Ω–µ —Ç–µ–∫—Å—Ç
@dp.message(CreateFlow.DESC)
async def step_desc_wrong(m: Message):
    await m.answer("–ü—Ä–∏—à–ª–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ç–µ–∫—Å—Ç (–¥–æ 2500 —Å–∏–º–≤–æ–ª–æ–≤).")

# --- –∫–Ω–æ–ø–∫–∞ ¬´–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç¬ª ---
@dp.callback_query(CreateFlow.CONFIRM_DESC, F.data == "desc:edit")
async def desc_edit(cq: CallbackQuery, state: FSMContext):
    try:
        await cq.message.edit_reply_markup()  # —Å–∫—Ä–æ–µ–º —Å—Ç–∞—Ä—ã–µ –∫–Ω–æ–ø–∫–∏
    except Exception:
        pass
    await state.set_state(CreateFlow.DESC)
    await cq.message.answer(DESCRIPTION_PROMPT, parse_mode="HTML")
    await cq.answer()

# --- –∫–Ω–æ–ø–∫–∞ ¬´–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å¬ª ---
@dp.callback_query(CreateFlow.CONFIRM_DESC, F.data == "desc:continue")
async def desc_continue(cq: CallbackQuery, state: FSMContext):
    try:
        await cq.message.edit_reply_markup()
    except Exception:
        pass
    # –°—Ä–∞–∑—É –ø—Ä–æ—Å–∏–º –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è (–ø–µ—Ä–µ–Ω–æ—Å —à–∞–≥–∞ —Ä–∞–Ω—å—à–µ –º–µ–¥–∏–∞)
    await state.set_state(CreateFlow.ENDAT)
    await cq.message.answer(format_endtime_prompt(), parse_mode="HTML")
    await cq.answer()

@dp.callback_query(CreateFlow.MEDIA_DECIDE, F.data == "media:yes")
async def media_yes(cq: CallbackQuery, state: FSMContext):
    try:
        await cq.message.edit_reply_markup()
    except Exception:
        pass
    await state.set_state(CreateFlow.MEDIA_UPLOAD)
    await state.update_data(media_top=False)   # <-- –º–µ–¥–∏–∞ –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ ¬´–≤–Ω–∏–∑—É¬ª
    await cq.message.answer(MEDIA_INSTRUCTION, parse_mode="HTML", reply_markup=kb_skip_media())
    await cq.answer()

@dp.callback_query(CreateFlow.MEDIA_DECIDE, F.data == "media:no")
async def media_no(cq: CallbackQuery, state: FSMContext):
    try:
        await cq.message.edit_reply_markup()
    except Exception:
        pass

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–µ—Ä–Ω–æ–≤–∏–∫ –±–µ–∑ –º–µ–¥–∏–∞
    data = await state.get_data()
    owner_id = data.get("owner")
    title    = (data.get("title") or "").strip()
    desc     = (data.get("desc")  or "").strip()
    winners  = int(data.get("winners_count") or 1)
    end_at   = data.get("end_at_utc")

    if not (owner_id and title and end_at):
        await cq.message.answer("–ü–æ—Ö–æ–∂–µ, —à–∞–≥–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é. –ù–∞–±–µ—Ä–∏—Ç–µ /create –∏ –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        await state.clear()
        await cq.answer()
        return

    async with session_scope() as s:
        gw = Giveaway(
            owner_user_id=owner_id,
            internal_title=title,
            public_description=desc,
            photo_file_id=None,
            end_at_utc=end_at,
            winners_count=winners,
            status=GiveawayStatus.DRAFT
        )
        s.add(gw)

    await state.clear()
    await cq.message.answer(
        "–ß–µ—Ä–Ω–æ–≤–∏–∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω.\n–û—Ç–∫—Ä–æ–π—Ç–µ /events, —á—Ç–æ–±—ã –ø—Ä–∏–≤—è–∑–∞—Ç—å –∫–∞–Ω–∞–ª—ã –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à.",
        reply_markup=reply_main_kb()
    )
    await cq.answer()

@dp.callback_query(CreateFlow.MEDIA_UPLOAD, F.data == "media:skip")
async def media_skip_btn(cq: CallbackQuery, state: FSMContext):
    try:
        await cq.message.edit_reply_markup()  # —É–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" –ø–æ–¥ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
    except Exception:
        pass
    await state.set_state(CreateFlow.ENDAT)
    await cq.message.answer(format_endtime_prompt(), parse_mode="HTML")
    await cq.answer()

MAX_VIDEO_BYTES = 5 * 1024 * 1024  # 5 –ú–ë


# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—Å—ë —Ä–∞–≤–Ω–æ –º–æ–∂–µ—Ç –ø—Ä–∏—Å–ª–∞—Ç—å —Ç–µ–∫—Å—Ç ¬´–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª
@dp.message(CreateFlow.MEDIA_UPLOAD, F.text.casefold() == "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
async def media_skip_by_text(m: Message, state: FSMContext):
    await state.set_state(CreateFlow.ENDAT)
    await m.answer(format_endtime_prompt(), parse_mode="HTML")

@dp.message(CreateFlow.MEDIA_UPLOAD, F.photo)
async def got_photo(m: Message, state: FSMContext):
    logging.info("HANDLER photo: state=MEDIA_UPLOAD, sizes=%d", len(m.photo))
    fid = m.photo[-1].file_id
    await state.update_data(photo=pack_media("photo", fid))
    # –ø—Ä–æ–±—É–µ–º ¬´—Ä–∞–º–∫—É¬ª, –∏–Ω–∞—á–µ ‚Äî fallback
    await _ensure_link_preview_or_fallback(m, state, "photo", fid, "image.jpg")

@dp.message(CreateFlow.MEDIA_UPLOAD, F.animation)
async def got_animation(m: Message, state: FSMContext):
    logging.info("HANDLER animation: state=MEDIA_UPLOAD")
    anim = m.animation
    if anim.file_size and anim.file_size > MAX_VIDEO_BYTES:
        await m.answer("‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π —Ñ–∞–π–ª (–¥–æ 5 –ú–ë).", reply_markup=kb_skip_media())
        return
    await state.update_data(photo=pack_media("animation", anim.file_id))
    await _ensure_link_preview_or_fallback(m, state, "animation", anim.file_id, "animation.mp4")

@dp.message(CreateFlow.MEDIA_UPLOAD, F.video)
async def got_video(m: Message, state: FSMContext):
    logging.info("HANDLER video: state=MEDIA_UPLOAD")
    v = m.video
    if v.mime_type and v.mime_type != "video/mp4":
        await m.answer("‚ö†Ô∏è –í–∏–¥–µ–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å MP4.", reply_markup=kb_skip_media())
        return
    if v.file_size and v.file_size > MAX_VIDEO_BYTES:
        await m.answer("‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π —Ñ–∞–π–ª (–¥–æ 5 –ú–ë).", reply_markup=kb_skip_media())
        return
    await state.update_data(photo=pack_media("video", v.file_id))
    await _ensure_link_preview_or_fallback(m, state, "video", v.file_id, "video.mp4")

@dp.message(CreateFlow.ENDAT, F.text)
async def step_endat(m: Message, state: FSMContext):
    """
    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤—ë–ª –≤—Ä–µ–º—è. –í–∞–ª–∏–¥–∏—Ä—É–µ–º, —Å–æ—Ö—Ä–∞–Ω—è–µ–º,
    —Å—á–∏—Ç–∞–µ–º "N –¥–Ω–µ–π" –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–æ–ø—Ä–æ—Å—É –ø—Ä–æ –º–µ–¥–∏–∞.
    """
    txt = (m.text or "").strip()
    logging.info("[ENDAT] got=%r", txt)
    try:
        # –æ–∂–∏–¥–∞–µ–º "HH:MM DD.MM.YYYY" –ø–æ –ú–°–ö (–∫–∞–∫ –ø—Ä–æ—Å–∏–ª–∏)
        dt_msk = datetime.strptime(txt, "%H:%M %d.%m.%Y")
        # –≤ –ë–î —Ö—Ä–∞–Ω–∏–º UTC
        dt_utc = dt_msk.replace(tzinfo=MSK_TZ).astimezone(timezone.utc)

        # –¥–µ–¥–ª–∞–π–Ω –Ω–µ —Ä–∞–Ω—å—à–µ —á–µ–º —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç
        if dt_utc <= datetime.now(timezone.utc) + timedelta(minutes=5):
            await m.answer("–î–µ–¥–ª–∞–π–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∏–Ω–∏–º—É–º —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç. –í–≤–µ–¥–∏—Ç–µ –µ—â—ë —Ä–∞–∑:")
            return

        # —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –æ—Å—Ç–∞–ª–æ—Å—å (–ø–æ –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–º –¥–∞—Ç–∞–º –ú–°–ö)
        now_msk = datetime.now(MSK_TZ).date()
        days_left = (dt_msk.date() - now_msk).days
        if days_left < 0:
            days_left = 0

        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º
        await state.update_data(
            end_at_utc=dt_utc,
            end_at_msk_str=dt_msk.strftime("%H:%M %d.%m.%Y"),
            days_left=days_left
        )

        # —è–≤–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        confirm_text = (
            f"üóì –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: <b>{dt_msk.strftime('%H:%M %d.%m.%Y')}</b>\n"
            f"–û—Å—Ç–∞–ª–æ—Å—å: <b>{days_left}</b> –¥–Ω."
        )
        await m.answer(confirm_text, parse_mode="HTML")

        # –∑–∞–¥–∞—ë–º –≤–æ–ø—Ä–æ—Å –ø—Ä–æ –º–µ–¥–∏–∞ (–∫–Ω–æ–ø–∫–∏ –î–∞/–ù–µ—Ç)
        await state.set_state(CreateFlow.MEDIA_DECIDE)
        await m.answer(MEDIA_QUESTION, reply_markup=kb_yes_no(), parse_mode="HTML")
        logging.info("[ENDAT] saved and asked MEDIA_DECIDE (days_left=%s)", days_left)

    except ValueError:
        await m.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: 13:58 06.10.2025")
    except Exception as e:
        logging.exception("[ENDAT] unexpected error: %s", e)
        await m.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

# ===== –†–∞–∑–¥–µ–ª "–ú–æ–∏ –∫–∞–Ω–∞–ª—ã" =====

def kb_my_channels(rows: list[tuple[int, str]]) -> InlineKeyboardMarkup:
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=title, callback_data=f"mych:info:{row_id}")]
        for row_id, title in rows
    ])
    # –Ω–∏–∂–Ω—è—è –ª–∏–Ω–∏—è —Å ¬´–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª/–≥—Ä—É–ø–ø—É¬ª
    kb.inline_keyboard.append([
        InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª", callback_data="mych:add_channel"),
        InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É", callback_data="mych:add_group"),
    ])
    return kb

@dp.callback_query(F.data == "my_channels")
async def show_my_channels(cq: types.CallbackQuery):
    uid = cq.from_user.id
    async with Session() as s:
        res = await s.execute(
            "SELECT id, title FROM organizer_channels WHERE owner_user_id=? ORDER BY added_at DESC",
            (uid,)
        )
        rows = [(r[0], r[1]) for r in res.all()]

    text = "–í–∞—à–∏ –∫–∞–Ω–∞–ª—ã:\n\n" + ("" if rows else "–ü–æ–∫–∞ –ø—É—Å—Ç–æ.")
    await cq.message.answer(text, reply_markup=kb_my_channels(rows))
    await cq.answer()

# –•–µ–ª–ø–µ—Ä –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤
# –í–µ—Ä–Ω—É—Ç—å —Å–ø–∏—Å–æ–∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—Å–∫–∏—Ö –∫–∞–Ω–∞–ª–æ–≤/–≥—Ä—É–ø–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è [(id, title)]
async def get_user_org_channels(user_id: int) -> list[tuple[int, str]]:
    from sqlalchemy import text as stext
    async with session_scope() as s:
        res = await s.execute(
            stext("SELECT id, title FROM organizer_channels WHERE owner_user_id=:u ORDER BY added_at DESC"),
            {"u": user_id}
        )
        return [(r[0], r[1]) for r in res.all()]

# –ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É –∫–∞–Ω–∞–ª–∞
@dp.callback_query(F.data.startswith("mych:info:"))
async def cb_my_channel_info(cq: CallbackQuery):
    from sqlalchemy import text as stext
    _, _, sid = cq.data.split(":")
    oc_id = int(sid)
    async with session_scope() as s:
        res = await s.execute(
            stext("SELECT title, chat_id, added_at FROM organizer_channels WHERE id=:id AND owner_user_id=:u"),
            {"id": oc_id, "u": cq.from_user.id}
        )
        row = res.first()
    if not row:
        await cq.answer("–ö–∞–Ω–∞–ª/–≥—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", show_alert=True); return

    title, chat_id, added_at = row
    kind = "–ö–∞–Ω–∞–ª" if str(chat_id).startswith("-100") else "–ì—Ä—É–ø–ø–∞"
    dt = added_at.astimezone(MSK_TZ).strftime("%H:%M, %d.%m.%Y")

    text = (f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {title}\n"
            f"<b>–¢–∏–ø:</b> {kind}\n"
            f"<b>ID:</b> {chat_id}\n"
            f"<b>–î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:</b> {dt}\n\n"
            "–£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª ‚Äî –∫–∞–Ω–∞–ª –±—É–¥–µ—Ç —É–¥–∞–ª—ë–Ω —Ç–æ–ª—å–∫–æ –∏–∑ —Å–ø–∏—Å–∫–∞ –≤–∞—à–∏—Ö –∫–∞–Ω–∞–ª–æ–≤ –≤ –±–æ—Ç–µ, "
            "–æ–¥–Ω–∞–∫–æ –≤–æ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–∞—Ö, –∫ –∫–æ—Ç–æ—Ä—ã–º –∫–∞–Ω–∞–ª –±—ã–ª –ø—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω, –æ–Ω –æ—Å—Ç–∞–Ω–µ—Ç—Å—è.")
    kb = InlineKeyboardBuilder()
    kb.button(text="–£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª", callback_data=f"mych:del_confirm:{oc_id}")
    kb.button(text="–û—Ç–º–µ–Ω–∞", callback_data="mych:cancel")
    kb.adjust(2)
    await cq.message.answer(text, reply_markup=kb.as_markup(), parse_mode="HTML")
    await cq.answer()

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
@dp.callback_query(F.data.startswith("mych:del_confirm:"))
async def cb_my_channel_del_confirm(cq: CallbackQuery):
    _, _, sid = cq.data.split(":")
    oc_id = int(sid)
    kb = InlineKeyboardBuilder()
    kb.button(text="–î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"mych:del:{oc_id}")
    kb.button(text="–û—Ç–º–µ–Ω–∞", callback_data="mych:cancel")
    kb.adjust(2)
    await cq.message.answer("–£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª –∏–∑ —Å–ø–∏—Å–∫–∞ –≤–∞—à–∏—Ö –∫–∞–Ω–∞–ª–æ–≤?", reply_markup=kb.as_markup())
    await cq.answer()

# –£–¥–∞–ª–µ–Ω–∏–µ
@dp.callback_query(F.data.startswith("mych:del:"))
async def cb_my_channel_delete(cq: CallbackQuery):
    from sqlalchemy import text as stext
    _, _, sid = cq.data.split(":")
    oc_id = int(sid)
    async with session_scope() as s:
        # —É–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∏–∑ organizer_channels
        await s.execute(
            stext("DELETE FROM organizer_channels WHERE id=:id AND owner_user_id=:u"),
            {"id": oc_id, "u": cq.from_user.id}
        )
    await cq.message.answer("–ö–∞–Ω–∞–ª/–≥—Ä—É–ø–ø–∞ —É–¥–∞–ª–µ–Ω—ã –∏–∑ —Å–ø–∏—Å–∫–∞.")
    await cq.answer()

# –û—Ç–º–µ–Ω–∞ ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º, —á—Ç–æ–±—ã ¬´–∫–∞—Ä—Ç–æ—á–∫–∞¬ª —Å—Ö–ª–æ–ø–Ω—É–ª–∞—Å—å –¥–∏–∞–ª–æ–≥–æ–º
@dp.callback_query(F.data == "mych:cancel")
async def cb_my_channel_cancel(cq: CallbackQuery):
    await cq.answer("–û—Ç–º–µ–Ω–µ–Ω–æ")

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö "–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª/–≥—Ä—É–ø–ø—É" –≤ —Ä–∞–∑–¥–µ–ª–µ "–ú–æ–∏ –∫–∞–Ω–∞–ª—ã"

@dp.callback_query(F.data == "mych:add_channel")
async def cb_mych_add_channel(cq: CallbackQuery, state: FSMContext):
    # –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—É—é mini-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Å–∏—Å—Ç–µ–º–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
    INVISIBLE = "\u2060"
    await cq.message.answer(INVISIBLE, reply_markup=chooser_reply_kb())
    await cq.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –≤ –æ–∫–Ω–µ –Ω–∏–∂–µ.")

@dp.callback_query(F.data == "mych:add_group")
async def cb_mych_add_group(cq: CallbackQuery, state: FSMContext):
    INVISIBLE = "\u2060"
    await cq.message.answer(INVISIBLE, reply_markup=chooser_reply_kb())
    await cq.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –≤ –æ–∫–Ω–µ –Ω–∏–∂–µ.")

# –ö–ª–∏–∫ –ø–æ inline "–°–æ–∑–¥–∞—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à" –≤ –Ω–æ–≤–æ–º –º–µ–Ω—é

@dp.callback_query(F.data == "create")
async def cb_create_inline(cq: CallbackQuery, state: FSMContext):
    await create_giveaway_start(cq.message, state)
    await cq.answer()

# -----------------

@dp.message(Command("events"))
async def cmd_events(m: Message):
    async with session_scope() as s:
        res = await s.execute(
            text("SELECT id, internal_title, status FROM giveaways "
                 "WHERE owner_user_id=:u ORDER BY id DESC"),
            {"u": m.from_user.id}
        )
        row = res.first()

    if not row:
        await m.answer(
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π. –í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à –∏ –æ–Ω –ø–æ—è–≤–∏—Ç—Å—è –∑–¥–µ—Å—å.",
            reply_markup=reply_main_kb()
        )
        return  # <- –í–ù–£–¢–†–ò if

    # —Å—é–¥–∞ –ø–æ–ø–∞–¥—ë–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ row –µ—Å—Ç—å
    await show_event_card(m.chat.id, row[0])

async def show_event_card(chat_id:int, giveaway_id:int):
    async with session_scope() as s:
        gw = await s.get(Giveaway, giveaway_id)

    cap = (f"<b>{gw.internal_title}</b>\n\n{gw.public_description}\n\n"
           f"–°—Ç–∞—Ç—É—Å: {gw.status}\n–ü–æ–±–µ–¥–∏—Ç–µ–ª–µ–π: {gw.winners_count}\n"
           f"–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {(gw.end_at_utc+timedelta(hours=3)).strftime('%H:%M %d.%m.%Y MSK')}")

    kind, fid = unpack_media(gw.photo_file_id)

    if kind == "photo" and fid:
        await bot.send_photo(chat_id, fid, caption=cap, reply_markup=kb_event_actions(giveaway_id, gw.status))
    elif kind == "animation" and fid:
        await bot.send_animation(chat_id, fid, caption=cap, reply_markup=kb_event_actions(giveaway_id, gw.status))
    elif kind == "video" and fid:
        await bot.send_video(chat_id, fid, caption=cap, reply_markup=kb_event_actions(giveaway_id, gw.status))
    else:
        await bot.send_message(chat_id, cap, reply_markup=kb_event_actions(giveaway_id, gw.status))

@dp.message(Command("subscriptions"))
async def cmd_subs(m:Message):
    await m.answer("–ß—Ç–æ–±—ã –ø–æ–¥–∫–ª—é—á–∏—Ç—å –∫–∞–Ω–∞–ª, –¥–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª (–≤ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º ‚Äî –∞–¥–º–∏–Ω–æ–º), "
                   "–∑–∞—Ç–µ–º –ø–µ—Ä–µ—à–ª–∏—Ç–µ —Å—é–¥–∞ –ª—é–±–æ–π –ø–æ—Å—Ç –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ @username –∫–∞–Ω–∞–ª–∞.")


from aiogram.utils.keyboard import InlineKeyboardBuilder

@dp.callback_query(F.data.startswith("ev:"))
async def event_cb(cq:CallbackQuery):
    _, action, sid = cq.data.split(":")
    gid = int(sid)
    if action=="channels":
        from sqlalchemy import text as stext
        async with session_scope() as s:
            gw = await s.get(Giveaway, gid)
            res = await s.execute(stext("SELECT id, title, chat_id FROM organizer_channels WHERE owner_user_id=:u"),{"u":gw.owner_user_id})
            channels = res.all()
            if not channels:
                await cq.message.answer("–ù–µ—Ç –∫–∞–Ω–∞–ª–æ–≤. –°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ —á–µ—Ä–µ–∑ –ø–µ—Ä–µ—Å—ã–ª–∫—É –ø–æ—Å—Ç–∞ –∏–ª–∏ @username."); return
            await s.execute(stext("DELETE FROM giveaway_channels WHERE giveaway_id=:gid"),{"gid":gid})
            for cid, title, chat_id in channels:
                await s.execute(stext("INSERT INTO giveaway_channels(giveaway_id,channel_id,chat_id,title) VALUES(:g,:c,:chat,:t)"),
                                {"g":gid,"c":cid,"chat":chat_id,"t":title})
        await cq.message.answer("–ö–∞–Ω–∞–ª—ã –ø—Ä–∏–≤—è–∑–∞–Ω—ã. –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å.")
        await show_event_card(cq.message.chat.id, gid)

    elif action=="launch":
        from sqlalchemy import text as stext
        async with session_scope() as s:
            gw = await s.get(Giveaway, gid)
            if gw.status != GiveawayStatus.DRAFT:
                await cq.answer("–£–∂–µ –∑–∞–ø—É—â–µ–Ω –∏–ª–∏ –∑–∞–≤–µ—Ä—à—ë–Ω.", show_alert=True); return
            res = await s.execute(stext("SELECT COUNT(*) FROM giveaway_channels WHERE giveaway_id=:gid"),{"gid":gid})
            cnt = res.scalar_one()
            if cnt==0:
                await cq.answer("–°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–≤—è–∂–∏—Ç–µ —Ö–æ—Ç—è –±—ã 1 –∫–∞–Ω–∞–ª.", show_alert=True); return
            secret = gen_ticket_code()+gen_ticket_code()
            gw.secret = secret
            gw.commit_hash = commit_hash(secret, gid)
            gw.status = GiveawayStatus.ACTIVE
        when = await get_end_at(gid)
        scheduler.add_job(finalize_and_draw_job, DateTrigger(run_date=when), args=[gid], id=f"final_{gid}", replace_existing=True)
        await cq.message.answer("–†–æ–∑—ã–≥—Ä—ã—à –∑–∞–ø—É—â–µ–Ω.")
        await show_event_card(cq.message.chat.id, gid)

    elif action=="delete":
        from sqlalchemy import text as stext
        async with session_scope() as s:
            gw = await s.get(Giveaway, gid)
            if gw.status != GiveawayStatus.DRAFT:
                await cq.answer("–£–¥–∞–ª—è—Ç—å –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ —á–µ—Ä–Ω–æ–≤–∏–∫.", show_alert=True); return
            await s.execute(stext("DELETE FROM giveaways WHERE id=:gid"),{"gid":gid})
            await s.execute(stext("DELETE FROM giveaway_channels WHERE giveaway_id=:gid"),{"gid":gid})
        await cq.message.answer("–ß–µ—Ä–Ω–æ–≤–∏–∫ —É–¥–∞–ª—ë–Ω.")

    elif action=="status":
        await show_stats(cq.message.chat.id, gid)

    elif action=="cancel":
        await cancel_giveaway(gid, cq.from_user.id, reason=None)
        await cq.message.answer("–†–æ–∑—ã–≥—Ä—ã—à –æ—Ç–º–µ–Ω—ë–Ω.")
        await show_event_card(cq.message.chat.id, gid)

# ===== –ö–∞—Ä—Ç–æ—á–∫–∞-–ø—Ä–µ–≤—å—é –º–µ–¥–∏–∞ =====

@dp.callback_query(CreateFlow.MEDIA_PREVIEW, F.data == "preview:move:up")
async def preview_move_up(cq: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    if not data.get("media_url"):
        await cq.answer("–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å —Ä–∞–º–∫–æ–π.", show_alert=True)
        return
    await state.update_data(media_top=True)
    await render_link_preview_message(cq.message, state, reedit=True)
    await cq.answer()

@dp.callback_query(CreateFlow.MEDIA_PREVIEW, F.data == "preview:move:down")
async def preview_move_down(cq: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    if not data.get("media_url"):
        await cq.answer("–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å —Ä–∞–º–∫–æ–π.", show_alert=True)
        return
    await state.update_data(media_top=False)
    await render_link_preview_message(cq.message, state, reedit=True)
    await cq.answer()

@dp.callback_query(CreateFlow.MEDIA_PREVIEW, F.data == "preview:change")
async def preview_change_media(cq: CallbackQuery, state: FSMContext):
    await state.set_state(CreateFlow.MEDIA_UPLOAD)
    await cq.message.answer(MEDIA_INSTRUCTION, parse_mode="HTML", reply_markup=kb_skip_media())
    await cq.answer()

@dp.callback_query(CreateFlow.MEDIA_PREVIEW, F.data == "preview:continue")
async def preview_continue(cq: CallbackQuery, state: FSMContext):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–µ—Ä–Ω–æ–≤–∏–∫ –∏ —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
    —Å –∫–Ω–æ–ø–∫–æ–π ¬´–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª/–≥—Ä—É–ø–ø—É¬ª, –∫–∞–∫ –≤ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–µ.
    –¢–∞–∫–∂–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º cq.answer(), —á—Ç–æ–±—ã –ø–æ–≥–∞—Å–∏—Ç—å ¬´–≤–µ—Ä—Ç—É—à–∫—É¬ª.
    """
    # –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π —Å–ø—Ä—è—á–µ–º —Å—Ç–∞—Ä—ã–µ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–æ–º
    try:
        await cq.message.edit_reply_markup()
    except Exception:
        pass

    data = await state.get_data()

    owner_id = data.get("owner")
    title    = (data.get("title") or "").strip()
    desc     = (data.get("desc")  or "").strip()
    winners  = int(data.get("winners_count") or 1)
    end_at   = data.get("end_at_utc")
    photo_id = data.get("photo")  # pack_media(..) | None

    if not (owner_id and title and end_at):
        await cq.message.answer("–ü–æ—Ö–æ–∂–µ, —à–∞–≥–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é. –ù–∞–±–µ—Ä–∏—Ç–µ /create –∏ –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        await state.clear()
        await cq.answer()
        return

    # 1) —Å–æ–∑–¥–∞—ë–º —á–µ—Ä–Ω–æ–≤–∏–∫ –∏ –ø–æ–ª—É—á–∞–µ–º –µ–≥–æ id
    async with session_scope() as s:
        gw = Giveaway(
            owner_user_id=owner_id,
            internal_title=title,
            public_description=desc,
            photo_file_id=photo_id,
            end_at_utc=end_at,
            winners_count=winners,
            status=GiveawayStatus.DRAFT
        )
        s.add(gw)
        await s.flush()          # —á—Ç–æ–±—ã —Å—Ä–∞–∑—É –ø–æ—è–≤–∏–ª—Å—è gw.id
        new_id = gw.id

    # 2) —á–∏—Å—Ç–∏–º FSM
    await state.clear()

    # 3) –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —ç–∫—Ä–∞–Ω-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ + –∫–Ω–æ–ø–∫—É ¬´–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª/–≥—Ä—É–ø–ø—É¬ª
    await cq.message.answer(
        CONNECT_INVITE_TEXT,
        reply_markup=build_connect_invite_kb(new_id)
    )

    # 4) –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≥–∞—Å–∏–º ¬´–≤–µ—Ä—Ç—É—à–∫—É¬ª –Ω–∞ –∫–Ω–æ–ø–∫–µ
    await cq.answer()

# ===== –≠–∫—Ä–∞–Ω –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤ (–ø–æ –∫–Ω–æ–ø–∫–µ "–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª/–≥—Ä—É–ø–ø—É") =====

@dp.callback_query(F.data.startswith("raffle:connect_channels:"))
async def cb_connect_channels(cq: CallbackQuery):
    # data –≤–∏–¥–∞: raffle:connect_channels:<event_id>
    _, _, sid = cq.data.split(":")
    event_id = int(sid)

    from sqlalchemy import text as stext
    async with session_scope() as s:
        gw = await s.get(Giveaway, event_id)
        if not gw:
            await cq.answer("–†–æ–∑—ã–≥—Ä—ã—à –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True); return

        # –í—Å–µ –∫–∞–Ω–∞–ª—ã/–≥—Ä—É–ø–ø—ã, —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∫ –±–æ—Ç—É (–æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—Å–∫–∏–µ)
        res = await s.execute(
            stext("SELECT id, title FROM organizer_channels WHERE owner_user_id=:u"),
            {"u": gw.owner_user_id}
        )
        rows = res.all()
        channels = [(r[0], r[1]) for r in rows]  # (organizer_channel_id, title)

        # –ö–∞–∫–∏–µ –∏–∑ –Ω–∏—Ö —É–∂–µ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω—ã –∫ –¢–ï–ö–£–©–ï–ú–£ —Ä–æ–∑—ã–≥—Ä—ã—à—É?
        res = await s.execute(
            stext("SELECT channel_id FROM giveaway_channels WHERE giveaway_id=:g"),
            {"g": event_id}
        )
        attached_ids = {r[0] for r in res.fetchall()}

    text_block = build_connect_channels_text(gw.internal_title)
    kb = build_channels_menu_kb(event_id, channels, attached_ids)
    await cq.message.answer(text_block, reply_markup=kb)
    await cq.answer()

@dp.callback_query(F.data.startswith("raffle:attach:"))
async def cb_attach_channel(cq: CallbackQuery):
    # data: raffle:attach:<event_id>:<organizer_channel_id>
    try:
        _, _, sid, scid = cq.data.split(":")
        event_id = int(sid)
        org_id = int(scid)
    except Exception:
        await cq.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.", show_alert=True); return

    from sqlalchemy import text as stext
    async with session_scope() as s:
        gw = await s.get(Giveaway, event_id)
        if not gw:
            await cq.answer("–†–æ–∑—ã–≥—Ä—ã—à –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True); return

        # –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ —Ç–∞–∫–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—Å–∫–∏–π –∫–∞–Ω–∞–ª –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        res = await s.execute(
            stext("SELECT id, chat_id, title FROM organizer_channels WHERE id=:id AND owner_user_id=:u"),
            {"id": org_id, "u": gw.owner_user_id}
        )
        row = res.first()
        if not row:
            await cq.answer("–ö–∞–Ω–∞–ª/–≥—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã —É –≤–∞—Å.", show_alert=True); return

        oc_id, chat_id, title = row
        # –ü—Ä–∏–≤—è–∂–µ–º –∫ —Ä–æ–∑—ã–≥—Ä—ã—à—É (idempotent)
        await s.execute(
            stext("INSERT OR IGNORE INTO giveaway_channels(giveaway_id, channel_id, chat_id, title) "
                  "VALUES(:g, :c, :chat, :t)"),
            {"g": event_id, "c": oc_id, "chat": chat_id, "t": title}
        )

        # –°–Ω–æ–≤–∞ —Å–æ–±–µ—Ä—ë–º —Å–ø–∏—Å–æ–∫ –¥–ª—è –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å ¬´–≥–∞–ª–æ—á–∫–∞–º–∏¬ª
        res = await s.execute(
            stext("SELECT id, title FROM organizer_channels WHERE owner_user_id=:u"),
            {"u": gw.owner_user_id}
        )
        all_rows = res.all()
        channels = [(r[0], r[1]) for r in all_rows]
        res = await s.execute(
            stext("SELECT channel_id FROM giveaway_channels WHERE giveaway_id=:g"),
            {"g": event_id}
        )
        attached_ids = {r[0] for r in res.fetchall()}

    # –û–±–Ω–æ–≤–∏–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥ —ç—Ç–∏–º –∂–µ —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    try:
        await cq.message.edit_reply_markup(
            reply_markup=build_channels_menu_kb(event_id, channels, attached_ids)
        )
    except Exception:
        # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å ‚Äî –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏—à–ª—ë–º –Ω–æ–≤—ã–π –±–ª–æ–∫ –µ—â—ë —Ä–∞–∑
        await cq.message.answer(
            build_connect_channels_text(gw.internal_title),
            reply_markup=build_channels_menu_kb(event_id, channels, attached_ids)
        )

    await cq.answer("‚úÖ –ö–∞–Ω–∞–ª/–≥—Ä—É–ø–ø–∞ –¥–æ–±–∞–≤–ª–µ–Ω—ã")

@dp.callback_query(F.data.startswith("raffle:add_channel:"))
async def cb_add_channel(cq: CallbackQuery, state: FSMContext):
    # data: raffle:add_channel:<event_id>
    _, _, sid = cq.data.split(":")
    await state.update_data(chooser_event_id=int(sid))

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ¬´–Ω–µ–≤–∏–¥–∏–º–æ–µ¬ª —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–æ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    INVISIBLE = "\u2060"
    await cq.message.answer(INVISIBLE, reply_markup=chooser_reply_kb())
    await cq.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –≤ –æ–∫–Ω–µ –Ω–∏–∂–µ.")

@dp.callback_query(F.data.startswith("raffle:add_group:"))
async def cb_add_group(cq: CallbackQuery, state: FSMContext):
    _, _, sid = cq.data.split(":")
    await state.update_data(chooser_event_id=int(sid))

    INVISIBLE = "\u2060"
    await cq.message.answer(INVISIBLE, reply_markup=chooser_reply_kb())
    await cq.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –≤ –æ–∫–Ω–µ –Ω–∏–∂–µ.")

@dp.callback_query(F.data.startswith("raffle:start:"))
async def cb_start_raffle(cq: CallbackQuery):
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–æ–∑—ã–≥—Ä—ã—à: –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –í–°–ï –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è,
    # –∫–∞–∫ –¥–µ–ª–∞–µ—Ç–µ –≤ ev:channels/launch.
    _, _, sid = cq.data.split(":")
    gid = int(sid)

    from sqlalchemy import text as stext
    async with session_scope() as s:
        gw = await s.get(Giveaway, gid)
        if not gw:
            await cq.answer("–†–æ–∑—ã–≥—Ä—ã—à –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True); return
        if gw.status != GiveawayStatus.DRAFT:
            await cq.answer("–£–∂–µ –∑–∞–ø—É—â–µ–Ω –∏–ª–∏ –∑–∞–≤–µ—Ä—à—ë–Ω.", show_alert=True); return

        # –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–æ–æ–±—â–µ —Å–æ–µ–¥–∏–Ω—ë–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã?
        res = await s.execute(stext("SELECT id, title, chat_id FROM organizer_channels WHERE owner_user_id=:u"),
                              {"u": gw.owner_user_id})
        org_chans = res.all()
        if not org_chans:
            await cq.answer("–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ —Ö–æ—Ç—è –±—ã 1 –∫–∞–Ω–∞–ª/–≥—Ä—É–ø–ø—É (–∫–Ω–æ–ø–∫–∞ —Å–Ω–∏–∑—É).", show_alert=True); return

        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫–∞–Ω–∞–ª—ã –∫ —Ç–µ–∫—É—â–µ–º—É —Ä–æ–∑—ã–≥—Ä—ã—à—É (–æ–±–Ω—É–ª–∏–≤ —Å—Ç–∞—Ä—ã–µ –ø—Ä–∏–≤—è–∑–∫–∏, –µ—Å–ª–∏ –±—ã–ª–∏)
        await s.execute(stext("DELETE FROM giveaway_channels WHERE giveaway_id=:gid"), {"gid": gid})
        for oc_id, title, chat_id in org_chans:
            await s.execute(
                stext("INSERT INTO giveaway_channels(giveaway_id,channel_id,chat_id,title) "
                      "VALUES(:g,:c,:chat,:t)"),
                {"g": gid, "c": oc_id, "chat": chat_id, "t": title}
            )

        # –¢–µ–ø–µ—Ä—å –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–∏–≤—è–∑–∫–∏ –µ—Å—Ç—å
        res = await s.execute(stext("SELECT COUNT(*) FROM giveaway_channels WHERE giveaway_id=:gid"),
                              {"gid": gid})
        cnt = res.scalar_one()
        if cnt == 0:
            await cq.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–≤—è–∑–∞—Ç—å –∫–∞–Ω–∞–ª—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.", show_alert=True); return

        # –≥–æ—Ç–æ–≤–∏–º —Å–µ–∫—Ä–µ—Ç –∏ –∑–∞–ø—É—Å–∫–∞–µ–º
        secret = gen_ticket_code()+gen_ticket_code()
        gw.secret = secret
        gw.commit_hash = commit_hash(secret, gid)
        gw.status = GiveawayStatus.ACTIVE

    when = await get_end_at(gid)
    scheduler.add_job(finalize_and_draw_job, DateTrigger(run_date=when),
                      args=[gid], id=f"final_{gid}", replace_existing=True)

    await cq.message.answer("–†–æ–∑—ã–≥—Ä—ã—à –∑–∞–ø—É—â–µ–Ω.")
    await show_event_card(cq.message.chat.id, gid)
    await cq.answer()

@dp.callback_query(F.data.startswith("raffle:settings_disabled:"))
async def cb_settings_disabled(cq: CallbackQuery):
    await cq.answer("–†–∞–∑–¥–µ–ª ¬´–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞¬ª —Å–∫–æ—Ä–æ –ø–æ—è–≤–∏—Ç—Å—è ‚úÖ", show_alert=True)


@dp.callback_query(F.data.startswith("raffle:noop:"))
async def cb_noop(cq: CallbackQuery):
    # –ü—Ä–æ—Å—Ç–æ –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∫–Ω–æ–ø–æ–∫-¬´–∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤¬ª –ø–æ–¥–∫–ª—é—á—ë–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
    await cq.answer("–≠—Ç–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –∫–Ω–æ–ø–∫–∞.")

async def show_stats(chat_id:int, gid:int):
    from sqlalchemy import text as stext
    async with session_scope() as s:
        res = await s.execute(stext("SELECT COUNT(*) FROM entries WHERE giveaway_id=:gid"),{"gid":gid})
        total = res.scalar_one()
        res = await s.execute(stext("SELECT COUNT(*) FROM entries WHERE giveaway_id=:gid AND final_ok=1"),{"gid":gid})
        ok_final = res.scalar_one() or 0
        gw = await s.get(Giveaway, gid)
    text_stat = (f"<b>–°—Ç–∞—Ç—É—Å:</b> {gw.status}\n"
                 f"<b>–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–≤—Å–µ–≥–æ –±–∏–ª–µ—Ç–æ–≤):</b> {total}\n"
                 f"<b>–í –ø—É–ª–µ —Ñ–∏–Ω–∞–ª–∞:</b> {ok_final}\n"
                 f"<b>commit:</b> <code>{gw.commit_hash or '-'}</code>\n")
    await bot.send_message(chat_id, text_stat)

@dp.callback_query(F.data.startswith("u:check:"))
async def user_check(cq:CallbackQuery):
    gid = int(cq.data.split(":")[2])
    ok, details = await check_membership_on_all(bot, cq.from_user.id, gid)
    lines = [("‚úÖ " if okk else "‚ùå ")+t for t,okk in details]
    await cq.message.answer("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏:\n"+"\n".join(lines),
                            reply_markup=kb_participate(gid, allow=ok))

@dp.callback_query(F.data.startswith("u:join:"))
async def user_join(cq:CallbackQuery):
    gid = int(cq.data.split(":")[2])
    from sqlalchemy import text as stext
    async with session_scope() as s:
        gw = await s.get(Giveaway, gid)
        if gw.status != GiveawayStatus.ACTIVE:
            await cq.answer("–†–æ–∑—ã–≥—Ä—ã—à –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω.", show_alert=True); return
    ok, details = await check_membership_on_all(bot, cq.from_user.id, gid)
    if not ok:
        await cq.answer("–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", show_alert=True); return
    async with session_scope() as s:
        res = await s.execute(stext("SELECT ticket_code FROM entries WHERE giveaway_id=:gid AND user_id=:u"),
                              {"gid":gid, "u":cq.from_user.id})
        row = res.first()
        if row: code = row[0]
        else:
            for _ in range(5):
                code = gen_ticket_code()
                try:
                    await s.execute(stext(
                        "INSERT INTO entries(giveaway_id,user_id,ticket_code,prelim_ok,prelim_checked_at) "
                        "VALUES (:gid,:u,:code,1,:ts)"
                    ),{"gid":gid,"u":cq.from_user.id,"code":code,"ts":datetime.now(timezone.utc)})
                    break
                except Exception:
                    continue
    await cq.message.answer(f"–í–∞—à –±–∏–ª–µ—Ç –Ω–∞ —Ä–æ–∑—ã–≥—Ä—ã—à: <b>{code}</b>")

async def finalize_and_draw_job(gid:int):
    from sqlalchemy import text as stext
    async with session_scope() as s:
        gw = await s.get(Giveaway, gid)
        if not gw or gw.status!=GiveawayStatus.ACTIVE: return
        res = await s.execute(stext("SELECT user_id,id FROM entries WHERE giveaway_id=:gid AND prelim_ok=1"),{"gid":gid})
        entries = res.all()
    eligible=[]
    for uid, entry_id in entries:
        ok,_ = await check_membership_on_all(bot, uid, gid)
        from sqlalchemy import text as stext
        async with session_scope() as s:
            await s.execute(stext("UPDATE entries SET final_ok=:ok, final_checked_at=:ts WHERE id=:eid"),
                            {"ok":1 if ok else 0, "ts":datetime.now(timezone.utc), "eid":entry_id})
        if ok: eligible.append(uid)
    async with session_scope() as s:
        gw = await s.get(Giveaway, gid)
        winners = deterministic_draw(gw.secret, gid, eligible, gw.winners_count)
        rank=1
        for uid, r, h in winners:
            await s.execute(stext("INSERT INTO winners(giveaway_id,user_id,rank,hash_used) VALUES(:g,:u,:r,:h)"),
                            {"g":gid,"u":uid,"r":rank,"h":h}); rank+=1
        gw.status = GiveawayStatus.FINISHED
    if winners:
        ids = [w[0] for w in winners]
        textw = "\n".join([f"{i+1}) <a href='tg://user?id={uid}'>–ø–æ–±–µ–¥–∏—Ç–µ–ª—å</a>" for i,uid in enumerate(ids)])
    else:
        textw = "–ü–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –Ω–µ—Ç."
    async with session_scope() as s:
        gw = await s.get(Giveaway, gid)
    await bot.send_message(gw.owner_user_id,
                           f"–§–∏–Ω–∞–ª—å–Ω—ã–π –ø—É–ª: {len(eligible)}\n"
                           f"–ü–æ–±–µ–¥–∏—Ç–µ–ª–µ–π: {len(winners)}\n"
                           f"secret: <code>{gw.secret}</code>\n"
                           f"commit: <code>{gw.commit_hash}</code>\n\n{textw}")

async def cancel_giveaway(gid:int, by_user_id:int, reason:str|None):
    from sqlalchemy import text as stext
    async with session_scope() as s:
        gw = await s.get(Giveaway, gid)
        if not gw or gw.status!=GiveawayStatus.ACTIVE: return
        gw.status = GiveawayStatus.CANCELLED
        gw.cancelled_at = datetime.now(timezone.utc)
        gw.cancelled_by = by_user_id
    try:
        scheduler.remove_job(f"final_{gid}")
    except Exception:
        pass

# ---------------- ENTRYPOINT ----------------
async def main():
    import logging
    logging.basicConfig(level=logging.INFO, format="%(asctime)s [%(levelname)s] %(message)s")

    # 1) –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
    await init_db()
    await ensure_schema()            # <‚Äî –î–û–ë–ê–í–¨ –≠–¢–û
    logging.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    logging.info(f"DB file in use: {DB_PATH.resolve()}")

    await ensure_channels_table()
    logging.info("Table organizer_channels ensured")

    # 2) –∑–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    scheduler.start()
    logging.info("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω")

    # 3) –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram
    me = await bot.get_me()
    logging.info(f"ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∫–∞–∫ @{me.username} (ID: {me.id})")

    # 4) –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
    await set_bot_commands(bot)
    logging.info("‚úÖ –ö–æ–º–∞–Ω–¥—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")

    # 5) –°–Ω–∏–º–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–π —Å—Ç–∞—Ä—ã–π –≤–µ–±—Ö—É–∫
    await bot.delete_webhook(drop_pending_updates=True)
    logging.info("üîÅ Webhook —É–¥–∞–ª—ë–Ω, –≤–∫–ª—é—á–∞—é polling...")

    # 6) –ó–∞–ø—É—Å–∫–∞–µ–º polling
    await dp.start_polling(bot, allowed_updates=dp.resolve_used_update_types())


if __name__ == "__main__":
    import asyncio
    asyncio.run(main())